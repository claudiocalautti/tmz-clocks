(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./src/scripts/app.jsx":[function(require,module,exports){
/** @jsx React.DOM */

'use strict';

var React = require('react');

var Wall = require('./components/Wall.jsx');

var cities = require('./data/cities.js');
var zones = require('./data/zones.js');

/**
 * App.
 */
var App = React.createClass({displayName: "App",

  render: function () {
    return (
      React.createElement(Wall, {cities: cities, zones: zones})
    );
  }

});

React.render(React.createElement(App, null), document.getElementById('main'));

},{"./components/Wall.jsx":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/src/scripts/components/Wall.jsx","./data/cities.js":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/src/scripts/data/cities.js","./data/zones.js":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/src/scripts/data/zones.js","react":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/react.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js":[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            currentQueue[queueIndex].run();
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/AutoFocusMixin.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule AutoFocusMixin
 * @typechecks static-only
 */

'use strict';

var focusNode = require("./focusNode");

var AutoFocusMixin = {
  componentDidMount: function() {
    if (this.props.autoFocus) {
      focusNode(this.getDOMNode());
    }
  }
};

module.exports = AutoFocusMixin;

},{"./focusNode":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/focusNode.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/BeforeInputEventPlugin.js":[function(require,module,exports){
/**
 * Copyright 2013-2015 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule BeforeInputEventPlugin
 * @typechecks static-only
 */

'use strict';

var EventConstants = require("./EventConstants");
var EventPropagators = require("./EventPropagators");
var ExecutionEnvironment = require("./ExecutionEnvironment");
var FallbackCompositionState = require("./FallbackCompositionState");
var SyntheticCompositionEvent = require("./SyntheticCompositionEvent");
var SyntheticInputEvent = require("./SyntheticInputEvent");

var keyOf = require("./keyOf");

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var canUseCompositionEvent = (
  ExecutionEnvironment.canUseDOM &&
  'CompositionEvent' in window
);

var documentMode = null;
if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;
}

// Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.
var canUseTextInputEvent = (
  ExecutionEnvironment.canUseDOM &&
  'TextEvent' in window &&
  !documentMode &&
  !isPresto()
);

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.
var useFallbackCompositionData = (
  ExecutionEnvironment.canUseDOM &&
  (
    (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11)
  )
);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return (
    typeof opera === 'object' &&
    typeof opera.version === 'function' &&
    parseInt(opera.version(), 10) <= 12
  );
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

var topLevelTypes = EventConstants.topLevelTypes;

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: keyOf({onBeforeInput: null}),
      captured: keyOf({onBeforeInputCapture: null})
    },
    dependencies: [
      topLevelTypes.topCompositionEnd,
      topLevelTypes.topKeyPress,
      topLevelTypes.topTextInput,
      topLevelTypes.topPaste
    ]
  },
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionEnd: null}),
      captured: keyOf({onCompositionEndCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionEnd,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionStart: null}),
      captured: keyOf({onCompositionStartCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionStart,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionUpdate: null}),
      captured: keyOf({onCompositionUpdateCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionUpdate,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  }
};

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (
    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
    // ctrlKey && altKey is equivalent to AltGr, and is not a command.
    !(nativeEvent.ctrlKey && nativeEvent.altKey)
  );
}


/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case topLevelTypes.topCompositionStart:
      return eventTypes.compositionStart;
    case topLevelTypes.topCompositionEnd:
      return eventTypes.compositionEnd;
    case topLevelTypes.topCompositionUpdate:
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionStart(topLevelType, nativeEvent) {
  return (
    topLevelType === topLevelTypes.topKeyDown &&
    nativeEvent.keyCode === START_KEYCODE
  );
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case topLevelTypes.topKeyUp:
      // Command keys insert or clear IME input.
      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);
    case topLevelTypes.topKeyDown:
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return (nativeEvent.keyCode !== START_KEYCODE);
    case topLevelTypes.topKeyPress:
    case topLevelTypes.topMouseDown:
    case topLevelTypes.topBlur:
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */
function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;
  if (typeof detail === 'object' && 'data' in detail) {
    return detail.data;
  }
  return null;
}

// Track the current IME composition fallback object, if any.
var currentComposition = null;

/**
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {DOMEventTarget} topLevelTarget The listening component root node.
 * @param {string} topLevelTargetID ID of `topLevelTarget`.
 * @param {object} nativeEvent Native browser event.
 * @return {?object} A SyntheticCompositionEvent.
 */
function extractCompositionEvent(
  topLevelType,
  topLevelTarget,
  topLevelTargetID,
  nativeEvent
) {
  var eventType;
  var fallbackData;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(topLevelType);
  } else if (!currentComposition) {
    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionStart;
    }
  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
    eventType = eventTypes.compositionEnd;
  }

  if (!eventType) {
    return null;
  }

  if (useFallbackCompositionData) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!currentComposition && eventType === eventTypes.compositionStart) {
      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
    } else if (eventType === eventTypes.compositionEnd) {
      if (currentComposition) {
        fallbackData = currentComposition.getData();
      }
    }
  }

  var event = SyntheticCompositionEvent.getPooled(
    eventType,
    topLevelTargetID,
    nativeEvent
  );

  if (fallbackData) {
    // Inject data generated from fallback path into the synthetic event.
    // This matches the property of native CompositionEventInterface.
    event.data = fallbackData;
  } else {
    var customData = getDataFromCustomEvent(nativeEvent);
    if (customData !== null) {
      event.data = customData;
    }
  }

  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */
function getNativeBeforeInputChars(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case topLevelTypes.topCompositionEnd:
      return getDataFromCustomEvent(nativeEvent);
    case topLevelTypes.topKeyPress:
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;
      if (which !== SPACEBAR_CODE) {
        return null;
      }

      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case topLevelTypes.topTextInput:
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data;

      // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to blacklist it.
      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;
      }

      return chars;

    default:
      // For other native event types, do nothing.
      return null;
  }
}

/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */
function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  if (currentComposition) {
    if (
      topLevelType === topLevelTypes.topCompositionEnd ||
      isFallbackCompositionEnd(topLevelType, nativeEvent)
    ) {
      var chars = currentComposition.getData();
      FallbackCompositionState.release(currentComposition);
      currentComposition = null;
      return chars;
    }
    return null;
  }

  switch (topLevelType) {
    case topLevelTypes.topPaste:
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;
    case topLevelTypes.topKeyPress:
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
        return String.fromCharCode(nativeEvent.which);
      }
      return null;
    case topLevelTypes.topCompositionEnd:
      return useFallbackCompositionData ? null : nativeEvent.data;
    default:
      return null;
  }
}

/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {DOMEventTarget} topLevelTarget The listening component root node.
 * @param {string} topLevelTargetID ID of `topLevelTarget`.
 * @param {object} nativeEvent Native browser event.
 * @return {?object} A SyntheticInputEvent.
 */
function extractBeforeInputEvent(
  topLevelType,
  topLevelTarget,
  topLevelTargetID,
  nativeEvent
) {
  var chars;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
  } else {
    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
  }

  // If no characters are being inserted, no BeforeInput event should
  // be fired.
  if (!chars) {
    return null;
  }

  var event = SyntheticInputEvent.getPooled(
    eventTypes.beforeInput,
    topLevelTargetID,
    nativeEvent
  );

  event.data = chars;
  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */
var BeforeInputEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
    topLevelType,
    topLevelTarget,
    topLevelTargetID,
    nativeEvent
  ) {
    return [
      extractCompositionEvent(
        topLevelType,
        topLevelTarget,
        topLevelTargetID,
        nativeEvent
      ),
      extractBeforeInputEvent(
        topLevelType,
        topLevelTarget,
        topLevelTargetID,
        nativeEvent
      )
    ];
  }
};

module.exports = BeforeInputEventPlugin;

},{"./EventConstants":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/EventConstants.js","./EventPropagators":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/EventPropagators.js","./ExecutionEnvironment":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ExecutionEnvironment.js","./FallbackCompositionState":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/FallbackCompositionState.js","./SyntheticCompositionEvent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/SyntheticCompositionEvent.js","./SyntheticInputEvent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/SyntheticInputEvent.js","./keyOf":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/keyOf.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/CSSProperty.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSProperty
 */

'use strict';

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  boxFlex: true,
  boxFlexGroup: true,
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  strokeDashoffset: true,
  strokeOpacity: true,
  strokeWidth: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function(prop) {
  prefixes.forEach(function(prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundImage: true,
    backgroundPosition: true,
    backgroundRepeat: true,
    backgroundColor: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;

},{}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/CSSPropertyOperations.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSPropertyOperations
 * @typechecks static-only
 */

'use strict';

var CSSProperty = require("./CSSProperty");
var ExecutionEnvironment = require("./ExecutionEnvironment");

var camelizeStyleName = require("./camelizeStyleName");
var dangerousStyleValue = require("./dangerousStyleValue");
var hyphenateStyleName = require("./hyphenateStyleName");
var memoizeStringOnly = require("./memoizeStringOnly");
var warning = require("./warning");

var processStyleName = memoizeStringOnly(function(styleName) {
  return hyphenateStyleName(styleName);
});

var styleFloatAccessor = 'cssFloat';
if (ExecutionEnvironment.canUseDOM) {
  // IE8 only supports accessing cssFloat (standard) as styleFloat
  if (document.documentElement.style.cssFloat === undefined) {
    styleFloatAccessor = 'styleFloat';
  }
}

if ("production" !== process.env.NODE_ENV) {
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

  // style values shouldn't contain a semicolon
  var badStyleValueWithSemicolonPattern = /;\s*$/;

  var warnedStyleNames = {};
  var warnedStyleValues = {};

  var warnHyphenatedStyleName = function(name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    ("production" !== process.env.NODE_ENV ? warning(
      false,
      'Unsupported style property %s. Did you mean %s?',
      name,
      camelizeStyleName(name)
    ) : null);
  };

  var warnBadVendoredStyleName = function(name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    ("production" !== process.env.NODE_ENV ? warning(
      false,
      'Unsupported vendor-prefixed style property %s. Did you mean %s?',
      name,
      name.charAt(0).toUpperCase() + name.slice(1)
    ) : null);
  };

  var warnStyleValueWithSemicolon = function(name, value) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;
    ("production" !== process.env.NODE_ENV ? warning(
      false,
      'Style property values shouldn\'t contain a semicolon. ' +
      'Try "%s: %s" instead.',
      name,
      value.replace(badStyleValueWithSemicolonPattern, '')
    ) : null);
  };

  /**
   * @param {string} name
   * @param {*} value
   */
  var warnValidStyle = function(name, value) {
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value);
    }
  };
}

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {

  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @return {?string}
   */
  createMarkupForStyles: function(styles) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var styleValue = styles[styleName];
      if ("production" !== process.env.NODE_ENV) {
        warnValidStyle(styleName, styleValue);
      }
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue) + ';';
      }
    }
    return serialized || null;
  },

  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   */
  setValueForStyles: function(node, styles) {
    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if ("production" !== process.env.NODE_ENV) {
        warnValidStyle(styleName, styles[styleName]);
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
      if (styleName === 'float') {
        styleName = styleFloatAccessor;
      }
      if (styleValue) {
        style[styleName] = styleValue;
      } else {
        var expansion = CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';
          }
        } else {
          style[styleName] = '';
        }
      }
    }
  }

};

module.exports = CSSPropertyOperations;

}).call(this,require('_process'))
},{"./CSSProperty":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/CSSProperty.js","./ExecutionEnvironment":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ExecutionEnvironment.js","./camelizeStyleName":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/camelizeStyleName.js","./dangerousStyleValue":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/dangerousStyleValue.js","./hyphenateStyleName":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/hyphenateStyleName.js","./memoizeStringOnly":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/memoizeStringOnly.js","./warning":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/warning.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/CallbackQueue.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CallbackQueue
 */

'use strict';

var PooledClass = require("./PooledClass");

var assign = require("./Object.assign");
var invariant = require("./invariant");

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `CallbackQueue.getPooled()`.
 *
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */
function CallbackQueue() {
  this._callbacks = null;
  this._contexts = null;
}

assign(CallbackQueue.prototype, {

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked.
   *
   * @param {function} callback Invoked when `notifyAll` is invoked.
   * @param {?object} context Context to call `callback` with.
   * @internal
   */
  enqueue: function(callback, context) {
    this._callbacks = this._callbacks || [];
    this._contexts = this._contexts || [];
    this._callbacks.push(callback);
    this._contexts.push(context);
  },

  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */
  notifyAll: function() {
    var callbacks = this._callbacks;
    var contexts = this._contexts;
    if (callbacks) {
      ("production" !== process.env.NODE_ENV ? invariant(
        callbacks.length === contexts.length,
        'Mismatched list of contexts in callback queue'
      ) : invariant(callbacks.length === contexts.length));
      this._callbacks = null;
      this._contexts = null;
      for (var i = 0, l = callbacks.length; i < l; i++) {
        callbacks[i].call(contexts[i]);
      }
      callbacks.length = 0;
      contexts.length = 0;
    }
  },

  /**
   * Resets the internal queue.
   *
   * @internal
   */
  reset: function() {
    this._callbacks = null;
    this._contexts = null;
  },

  /**
   * `PooledClass` looks for this.
   */
  destructor: function() {
    this.reset();
  }

});

PooledClass.addPoolingTo(CallbackQueue);

module.exports = CallbackQueue;

}).call(this,require('_process'))
},{"./Object.assign":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/Object.assign.js","./PooledClass":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/PooledClass.js","./invariant":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/invariant.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ChangeEventPlugin.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ChangeEventPlugin
 */

'use strict';

var EventConstants = require("./EventConstants");
var EventPluginHub = require("./EventPluginHub");
var EventPropagators = require("./EventPropagators");
var ExecutionEnvironment = require("./ExecutionEnvironment");
var ReactUpdates = require("./ReactUpdates");
var SyntheticEvent = require("./SyntheticEvent");

var isEventSupported = require("./isEventSupported");
var isTextInputElement = require("./isTextInputElement");
var keyOf = require("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  change: {
    phasedRegistrationNames: {
      bubbled: keyOf({onChange: null}),
      captured: keyOf({onChangeCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topChange,
      topLevelTypes.topClick,
      topLevelTypes.topFocus,
      topLevelTypes.topInput,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyUp,
      topLevelTypes.topSelectionChange
    ]
  }
};

/**
 * For IE shims
 */
var activeElement = null;
var activeElementID = null;
var activeElementValue = null;
var activeElementValueProp = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  return (
    elem.nodeName === 'SELECT' ||
    (elem.nodeName === 'INPUT' && elem.type === 'file')
  );
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (
    (!('documentMode' in document) || document.documentMode > 8)
  );
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = SyntheticEvent.getPooled(
    eventTypes.change,
    activeElementID,
    nativeEvent
  );
  EventPropagators.accumulateTwoPhaseDispatches(event);

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue();
}

function startWatchingForChangeEventIE8(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementID = null;
}

function getTargetIDForChangeEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topChange) {
    return topLevelTargetID;
  }
}
function handleEventsForChangeEventIE8(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForChangeEventIE8();
  }
}


/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events
  isInputEventSupported = isEventSupported('input') && (
    (!('documentMode' in document) || document.documentMode > 9)
  );
}

/**
 * (For old IE.) Replacement getter/setter for the `value` property that gets
 * set on the active element.
 */
var newValueProp =  {
  get: function() {
    return activeElementValueProp.get.call(this);
  },
  set: function(val) {
    // Cast to a string so we can do equality checks.
    activeElementValue = '' + val;
    activeElementValueProp.set.call(this, val);
  }
};

/**
 * (For old IE.) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElementValue = target.value;
  activeElementValueProp = Object.getOwnPropertyDescriptor(
    target.constructor.prototype,
    'value'
  );

  Object.defineProperty(activeElement, 'value', newValueProp);
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}

/**
 * (For old IE.) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  // delete restores the original property definition
  delete activeElement.value;
  activeElement.detachEvent('onpropertychange', handlePropertyChange);

  activeElement = null;
  activeElementID = null;
  activeElementValue = null;
  activeElementValueProp = null;
}

/**
 * (For old IE.) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  var value = nativeEvent.srcElement.value;
  if (value === activeElementValue) {
    return;
  }
  activeElementValue = value;

  manualDispatchChangeEvent(nativeEvent);
}

/**
 * If a `change` event should be fired, returns the target's ID.
 */
function getTargetIDForInputEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topInput) {
    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
    // what we want so fall through here and trigger an abstract event
    return topLevelTargetID;
  }
}

// For IE8 and IE9.
function handleEventsForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetIDForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topSelectionChange ||
      topLevelType === topLevelTypes.topKeyUp ||
      topLevelType === topLevelTypes.topKeyDown) {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    if (activeElement && activeElement.value !== activeElementValue) {
      activeElementValue = activeElement.value;
      return activeElementID;
    }
  }
}


/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  return (
    elem.nodeName === 'INPUT' &&
    (elem.type === 'checkbox' || elem.type === 'radio')
  );
}

function getTargetIDForClickEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topClick) {
    return topLevelTargetID;
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var getTargetIDFunc, handleEventFunc;
    if (shouldUseChangeEvent(topLevelTarget)) {
      if (doesChangeEventBubble) {
        getTargetIDFunc = getTargetIDForChangeEvent;
      } else {
        handleEventFunc = handleEventsForChangeEventIE8;
      }
    } else if (isTextInputElement(topLevelTarget)) {
      if (isInputEventSupported) {
        getTargetIDFunc = getTargetIDForInputEvent;
      } else {
        getTargetIDFunc = getTargetIDForInputEventIE;
        handleEventFunc = handleEventsForInputEventIE;
      }
    } else if (shouldUseClickEvent(topLevelTarget)) {
      getTargetIDFunc = getTargetIDForClickEvent;
    }

    if (getTargetIDFunc) {
      var targetID = getTargetIDFunc(
        topLevelType,
        topLevelTarget,
        topLevelTargetID
      );
      if (targetID) {
        var event = SyntheticEvent.getPooled(
          eventTypes.change,
          targetID,
          nativeEvent
        );
        EventPropagators.accumulateTwoPhaseDispatches(event);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(
        topLevelType,
        topLevelTarget,
        topLevelTargetID
      );
    }
  }

};

module.exports = ChangeEventPlugin;

},{"./EventConstants":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/EventConstants.js","./EventPluginHub":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/EventPluginHub.js","./EventPropagators":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/EventPropagators.js","./ExecutionEnvironment":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ExecutionEnvironment.js","./ReactUpdates":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactUpdates.js","./SyntheticEvent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/SyntheticEvent.js","./isEventSupported":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/isEventSupported.js","./isTextInputElement":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/isTextInputElement.js","./keyOf":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/keyOf.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ClientReactRootIndex.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ClientReactRootIndex
 * @typechecks
 */

'use strict';

var nextReactRootIndex = 0;

var ClientReactRootIndex = {
  createReactRootIndex: function() {
    return nextReactRootIndex++;
  }
};

module.exports = ClientReactRootIndex;

},{}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/DOMChildrenOperations.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMChildrenOperations
 * @typechecks static-only
 */

'use strict';

var Danger = require("./Danger");
var ReactMultiChildUpdateTypes = require("./ReactMultiChildUpdateTypes");

var setTextContent = require("./setTextContent");
var invariant = require("./invariant");

/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
function insertChildAt(parentNode, childNode, index) {
  // By exploiting arrays returning `undefined` for an undefined index, we can
  // rely exclusively on `insertBefore(node, null)` instead of also using
  // `appendChild(node)`. However, using `undefined` is not allowed by all
  // browsers so we must replace it with `null`.
  parentNode.insertBefore(
    childNode,
    parentNode.childNodes[index] || null
  );
}

/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = {

  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

  updateTextContent: setTextContent,

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markupList List of markup strings.
   * @internal
   */
  processUpdates: function(updates, markupList) {
    var update;
    // Mapping from parent IDs to initial child orderings.
    var initialChildren = null;
    // List of children that will be moved or removed.
    var updatedChildren = null;

    for (var i = 0; i < updates.length; i++) {
      update = updates[i];
      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||
          update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
        var updatedIndex = update.fromIndex;
        var updatedChild = update.parentNode.childNodes[updatedIndex];
        var parentID = update.parentID;

        ("production" !== process.env.NODE_ENV ? invariant(
          updatedChild,
          'processUpdates(): Unable to find child %s of element. This ' +
          'probably means the DOM was unexpectedly mutated (e.g., by the ' +
          'browser), usually due to forgetting a <tbody> when using tables, ' +
          'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' +
          'in an <svg> parent. Try inspecting the child nodes of the element ' +
          'with React ID `%s`.',
          updatedIndex,
          parentID
        ) : invariant(updatedChild));

        initialChildren = initialChildren || {};
        initialChildren[parentID] = initialChildren[parentID] || [];
        initialChildren[parentID][updatedIndex] = updatedChild;

        updatedChildren = updatedChildren || [];
        updatedChildren.push(updatedChild);
      }
    }

    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);

    // Remove updated children first so that `toIndex` is consistent.
    if (updatedChildren) {
      for (var j = 0; j < updatedChildren.length; j++) {
        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
      }
    }

    for (var k = 0; k < updates.length; k++) {
      update = updates[k];
      switch (update.type) {
        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
          insertChildAt(
            update.parentNode,
            renderedMarkup[update.markupIndex],
            update.toIndex
          );
          break;
        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
          insertChildAt(
            update.parentNode,
            initialChildren[update.parentID][update.fromIndex],
            update.toIndex
          );
          break;
        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
          setTextContent(
            update.parentNode,
            update.textContent
          );
          break;
        case ReactMultiChildUpdateTypes.REMOVE_NODE:
          // Already removed by the for-loop above.
          break;
      }
    }
  }

};

module.exports = DOMChildrenOperations;

}).call(this,require('_process'))
},{"./Danger":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/Danger.js","./ReactMultiChildUpdateTypes":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactMultiChildUpdateTypes.js","./invariant":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/invariant.js","./setTextContent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/setTextContent.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/DOMProperty.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMProperty
 * @typechecks static-only
 */

/*jslint bitwise: true */

'use strict';

var invariant = require("./invariant");

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_ATTRIBUTE: 0x1,
  MUST_USE_PROPERTY: 0x2,
  HAS_SIDE_EFFECTS: 0x4,
  HAS_BOOLEAN_VALUE: 0x8,
  HAS_NUMERIC_VALUE: 0x10,
  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function(domPropertyConfig) {
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(
        domPropertyConfig.isCustomAttribute
      );
    }

    for (var propName in Properties) {
      ("production" !== process.env.NODE_ENV ? invariant(
        !DOMProperty.isStandardName.hasOwnProperty(propName),
        'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' +
        '\'%s\' which has already been injected. You may be accidentally ' +
        'injecting the same DOM property config twice, or you may be ' +
        'injecting two configs that have conflicting property names.',
        propName
      ) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)));

      DOMProperty.isStandardName[propName] = true;

      var lowerCased = propName.toLowerCase();
      DOMProperty.getPossibleStandardName[lowerCased] = propName;

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];
        DOMProperty.getPossibleStandardName[attributeName] = propName;
        DOMProperty.getAttributeName[propName] = attributeName;
      } else {
        DOMProperty.getAttributeName[propName] = lowerCased;
      }

      DOMProperty.getPropertyName[propName] =
        DOMPropertyNames.hasOwnProperty(propName) ?
          DOMPropertyNames[propName] :
          propName;

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        DOMProperty.getMutationMethod[propName] = DOMMutationMethods[propName];
      } else {
        DOMProperty.getMutationMethod[propName] = null;
      }

      var propConfig = Properties[propName];
      DOMProperty.mustUseAttribute[propName] =
        checkMask(propConfig, DOMPropertyInjection.MUST_USE_ATTRIBUTE);
      DOMProperty.mustUseProperty[propName] =
        checkMask(propConfig, DOMPropertyInjection.MUST_USE_PROPERTY);
      DOMProperty.hasSideEffects[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_SIDE_EFFECTS);
      DOMProperty.hasBooleanValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_BOOLEAN_VALUE);
      DOMProperty.hasNumericValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_NUMERIC_VALUE);
      DOMProperty.hasPositiveNumericValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE);
      DOMProperty.hasOverloadedBooleanValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE);

      ("production" !== process.env.NODE_ENV ? invariant(
        !DOMProperty.mustUseAttribute[propName] ||
          !DOMProperty.mustUseProperty[propName],
        'DOMProperty: Cannot require using both attribute and property: %s',
        propName
      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||
        !DOMProperty.mustUseProperty[propName]));
      ("production" !== process.env.NODE_ENV ? invariant(
        DOMProperty.mustUseProperty[propName] ||
          !DOMProperty.hasSideEffects[propName],
        'DOMProperty: Properties that have side effects must use property: %s',
        propName
      ) : invariant(DOMProperty.mustUseProperty[propName] ||
        !DOMProperty.hasSideEffects[propName]));
      ("production" !== process.env.NODE_ENV ? invariant(
        !!DOMProperty.hasBooleanValue[propName] +
          !!DOMProperty.hasNumericValue[propName] +
          !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1,
        'DOMProperty: Value can be one of boolean, overloaded boolean, or ' +
        'numeric value, but not a combination: %s',
        propName
      ) : invariant(!!DOMProperty.hasBooleanValue[propName] +
        !!DOMProperty.hasNumericValue[propName] +
        !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1));
    }
  }
};
var defaultValueCache = {};

/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = {

  ID_ATTRIBUTE_NAME: 'data-reactid',

  /**
   * Checks whether a property name is a standard property.
   * @type {Object}
   */
  isStandardName: {},

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties.
   * @type {Object}
   */
  getPossibleStandardName: {},

  /**
   * Mapping from normalized names to attribute names that differ. Attribute
   * names are used when rendering markup or with `*Attribute()`.
   * @type {Object}
   */
  getAttributeName: {},

  /**
   * Mapping from normalized names to properties on DOM node instances.
   * (This includes properties that mutate due to external factors.)
   * @type {Object}
   */
  getPropertyName: {},

  /**
   * Mapping from normalized names to mutation methods. This will only exist if
   * mutation cannot be set simply by the property or `setAttribute()`.
   * @type {Object}
   */
  getMutationMethod: {},

  /**
   * Whether the property must be accessed and mutated as an object property.
   * @type {Object}
   */
  mustUseAttribute: {},

  /**
   * Whether the property must be accessed and mutated using `*Attribute()`.
   * (This includes anything that fails `<propName> in <element>`.)
   * @type {Object}
   */
  mustUseProperty: {},

  /**
   * Whether or not setting a value causes side effects such as triggering
   * resources to be loaded or text selection changes. We must ensure that
   * the value is only set if it has changed.
   * @type {Object}
   */
  hasSideEffects: {},

  /**
   * Whether the property should be removed when set to a falsey value.
   * @type {Object}
   */
  hasBooleanValue: {},

  /**
   * Whether the property must be numeric or parse as a
   * numeric and should be removed when set to a falsey value.
   * @type {Object}
   */
  hasNumericValue: {},

  /**
   * Whether the property must be positive numeric or parse as a positive
   * numeric and should be removed when set to a falsey value.
   * @type {Object}
   */
  hasPositiveNumericValue: {},

  /**
   * Whether the property can be used as a flag as well as with a value. Removed
   * when strictly equal to false; present without a value when strictly equal
   * to true; present with a value otherwise.
   * @type {Object}
   */
  hasOverloadedBooleanValue: {},

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [],

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function(attributeName) {
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
      if (isCustomAttributeFn(attributeName)) {
        return true;
      }
    }
    return false;
  },

  /**
   * Returns the default property value for a DOM property (i.e., not an
   * attribute). Most default values are '' or false, but not all. Worse yet,
   * some (in particular, `type`) vary depending on the type of element.
   *
   * TODO: Is it better to grab all the possible properties when creating an
   * element to avoid having to create the same element twice?
   */
  getDefaultValueForProperty: function(nodeName, prop) {
    var nodeDefaults = defaultValueCache[nodeName];
    var testElement;
    if (!nodeDefaults) {
      defaultValueCache[nodeName] = nodeDefaults = {};
    }
    if (!(prop in nodeDefaults)) {
      testElement = document.createElement(nodeName);
      nodeDefaults[prop] = testElement[prop];
    }
    return nodeDefaults[prop];
  },

  injection: DOMPropertyInjection
};

module.exports = DOMProperty;

}).call(this,require('_process'))
},{"./invariant":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/invariant.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/DOMPropertyOperations.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMPropertyOperations
 * @typechecks static-only
 */

'use strict';

var DOMProperty = require("./DOMProperty");

var quoteAttributeValueForBrowser = require("./quoteAttributeValueForBrowser");
var warning = require("./warning");

function shouldIgnoreValue(name, value) {
  return value == null ||
    (DOMProperty.hasBooleanValue[name] && !value) ||
    (DOMProperty.hasNumericValue[name] && isNaN(value)) ||
    (DOMProperty.hasPositiveNumericValue[name] && (value < 1)) ||
    (DOMProperty.hasOverloadedBooleanValue[name] && value === false);
}

if ("production" !== process.env.NODE_ENV) {
  var reactProps = {
    children: true,
    dangerouslySetInnerHTML: true,
    key: true,
    ref: true
  };
  var warnedProperties = {};

  var warnUnknownProperty = function(name) {
    if (reactProps.hasOwnProperty(name) && reactProps[name] ||
        warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
      return;
    }

    warnedProperties[name] = true;
    var lowerCasedName = name.toLowerCase();

    // data-* attributes should be lowercase; suggest the lowercase version
    var standardName = (
      DOMProperty.isCustomAttribute(lowerCasedName) ?
        lowerCasedName :
      DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ?
        DOMProperty.getPossibleStandardName[lowerCasedName] :
        null
    );

    // For now, only warn when we have a suggested correction. This prevents
    // logging too much when using transferPropsTo.
    ("production" !== process.env.NODE_ENV ? warning(
      standardName == null,
      'Unknown DOM property %s. Did you mean %s?',
      name,
      standardName
    ) : null);

  };
}

/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = {

  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function(id) {
    return DOMProperty.ID_ATTRIBUTE_NAME + '=' +
      quoteAttributeValueForBrowser(id);
  },

  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function(name, value) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      if (shouldIgnoreValue(name, value)) {
        return '';
      }
      var attributeName = DOMProperty.getAttributeName[name];
      if (DOMProperty.hasBooleanValue[name] ||
          (DOMProperty.hasOverloadedBooleanValue[name] && value === true)) {
        return attributeName;
      }
      return attributeName + '=' + quoteAttributeValueForBrowser(value);
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';
      }
      return name + '=' + quoteAttributeValueForBrowser(value);
    } else if ("production" !== process.env.NODE_ENV) {
      warnUnknownProperty(name);
    }
    return null;
  },

  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function(node, name, value) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      var mutationMethod = DOMProperty.getMutationMethod[name];
      if (mutationMethod) {
        mutationMethod(node, value);
      } else if (shouldIgnoreValue(name, value)) {
        this.deleteValueForProperty(node, name);
      } else if (DOMProperty.mustUseAttribute[name]) {
        // `setAttribute` with objects becomes only `[object]` in IE8/9,
        // ('' + value) makes it output the correct toString()-value.
        node.setAttribute(DOMProperty.getAttributeName[name], '' + value);
      } else {
        var propName = DOMProperty.getPropertyName[name];
        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
        // property type before comparing; only `value` does and is string.
        if (!DOMProperty.hasSideEffects[name] ||
            ('' + node[propName]) !== ('' + value)) {
          // Contrary to `setAttribute`, object properties are properly
          // `toString`ed by IE8/9.
          node[propName] = value;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        node.removeAttribute(name);
      } else {
        node.setAttribute(name, '' + value);
      }
    } else if ("production" !== process.env.NODE_ENV) {
      warnUnknownProperty(name);
    }
  },

  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function(node, name) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      var mutationMethod = DOMProperty.getMutationMethod[name];
      if (mutationMethod) {
        mutationMethod(node, undefined);
      } else if (DOMProperty.mustUseAttribute[name]) {
        node.removeAttribute(DOMProperty.getAttributeName[name]);
      } else {
        var propName = DOMProperty.getPropertyName[name];
        var defaultValue = DOMProperty.getDefaultValueForProperty(
          node.nodeName,
          propName
        );
        if (!DOMProperty.hasSideEffects[name] ||
            ('' + node[propName]) !== defaultValue) {
          node[propName] = defaultValue;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);
    } else if ("production" !== process.env.NODE_ENV) {
      warnUnknownProperty(name);
    }
  }

};

module.exports = DOMPropertyOperations;

}).call(this,require('_process'))
},{"./DOMProperty":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/DOMProperty.js","./quoteAttributeValueForBrowser":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/quoteAttributeValueForBrowser.js","./warning":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/warning.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/Danger.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Danger
 * @typechecks static-only
 */

/*jslint evil: true, sub: true */

'use strict';

var ExecutionEnvironment = require("./ExecutionEnvironment");

var createNodesFromMarkup = require("./createNodesFromMarkup");
var emptyFunction = require("./emptyFunction");
var getMarkupWrap = require("./getMarkupWrap");
var invariant = require("./invariant");

var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
var RESULT_INDEX_ATTR = 'data-danger-index';

/**
 * Extracts the `nodeName` from a string of markup.
 *
 * NOTE: Extracting the `nodeName` does not require a regular expression match
 * because we make assumptions about React-generated markup (i.e. there are no
 * spaces surrounding the opening tag and there is at least one attribute).
 *
 * @param {string} markup String of markup.
 * @return {string} Node name of the supplied markup.
 * @see http://jsperf.com/extract-nodename
 */
function getNodeName(markup) {
  return markup.substring(1, markup.indexOf(' '));
}

var Danger = {

  /**
   * Renders markup into an array of nodes. The markup is expected to render
   * into a list of root nodes. Also, the length of `resultList` and
   * `markupList` should be the same.
   *
   * @param {array<string>} markupList List of markup strings to render.
   * @return {array<DOMElement>} List of rendered nodes.
   * @internal
   */
  dangerouslyRenderMarkup: function(markupList) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ExecutionEnvironment.canUseDOM,
      'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' +
      'thread. Make sure `window` and `document` are available globally ' +
      'before requiring React when unit testing or use ' +
      'React.renderToString for server rendering.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    var nodeName;
    var markupByNodeName = {};
    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
    for (var i = 0; i < markupList.length; i++) {
      ("production" !== process.env.NODE_ENV ? invariant(
        markupList[i],
        'dangerouslyRenderMarkup(...): Missing markup.'
      ) : invariant(markupList[i]));
      nodeName = getNodeName(markupList[i]);
      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
      markupByNodeName[nodeName][i] = markupList[i];
    }
    var resultList = [];
    var resultListAssignmentCount = 0;
    for (nodeName in markupByNodeName) {
      if (!markupByNodeName.hasOwnProperty(nodeName)) {
        continue;
      }
      var markupListByNodeName = markupByNodeName[nodeName];

      // This for-in loop skips the holes of the sparse array. The order of
      // iteration should follow the order of assignment, which happens to match
      // numerical index order, but we don't rely on that.
      var resultIndex;
      for (resultIndex in markupListByNodeName) {
        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
          var markup = markupListByNodeName[resultIndex];

          // Push the requested markup with an additional RESULT_INDEX_ATTR
          // attribute.  If the markup does not start with a < character, it
          // will be discarded below (with an appropriate console.error).
          markupListByNodeName[resultIndex] = markup.replace(
            OPEN_TAG_NAME_EXP,
            // This index will be parsed back out below.
            '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" '
          );
        }
      }

      // Render each group of markup with similar wrapping `nodeName`.
      var renderNodes = createNodesFromMarkup(
        markupListByNodeName.join(''),
        emptyFunction // Do nothing special with <script> tags.
      );

      for (var j = 0; j < renderNodes.length; ++j) {
        var renderNode = renderNodes[j];
        if (renderNode.hasAttribute &&
            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
          renderNode.removeAttribute(RESULT_INDEX_ATTR);

          ("production" !== process.env.NODE_ENV ? invariant(
            !resultList.hasOwnProperty(resultIndex),
            'Danger: Assigning to an already-occupied result index.'
          ) : invariant(!resultList.hasOwnProperty(resultIndex)));

          resultList[resultIndex] = renderNode;

          // This should match resultList.length and markupList.length when
          // we're done.
          resultListAssignmentCount += 1;

        } else if ("production" !== process.env.NODE_ENV) {
          console.error(
            'Danger: Discarding unexpected node:',
            renderNode
          );
        }
      }
    }

    // Although resultList was populated out of order, it should now be a dense
    // array.
    ("production" !== process.env.NODE_ENV ? invariant(
      resultListAssignmentCount === resultList.length,
      'Danger: Did not assign to every index of resultList.'
    ) : invariant(resultListAssignmentCount === resultList.length));

    ("production" !== process.env.NODE_ENV ? invariant(
      resultList.length === markupList.length,
      'Danger: Expected markup to render %s nodes, but rendered %s.',
      markupList.length,
      resultList.length
    ) : invariant(resultList.length === markupList.length));

    return resultList;
  },

  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ExecutionEnvironment.canUseDOM,
      'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +
      'worker thread. Make sure `window` and `document` are available ' +
      'globally before requiring React when unit testing or use ' +
      'React.renderToString for server rendering.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    ("production" !== process.env.NODE_ENV ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));
    ("production" !== process.env.NODE_ENV ? invariant(
      oldChild.tagName.toLowerCase() !== 'html',
      'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +
      '<html> node. This is because browser quirks make this unreliable ' +
      'and/or slow. If you want to render to the root you must use ' +
      'server rendering. See React.renderToString().'
    ) : invariant(oldChild.tagName.toLowerCase() !== 'html'));

    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
    oldChild.parentNode.replaceChild(newChild, oldChild);
  }

};

module.exports = Danger;

}).call(this,require('_process'))
},{"./ExecutionEnvironment":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ExecutionEnvironment.js","./createNodesFromMarkup":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/createNodesFromMarkup.js","./emptyFunction":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/emptyFunction.js","./getMarkupWrap":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/getMarkupWrap.js","./invariant":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/invariant.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/DefaultEventPluginOrder.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DefaultEventPluginOrder
 */

'use strict';

var keyOf = require("./keyOf");

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */
var DefaultEventPluginOrder = [
  keyOf({ResponderEventPlugin: null}),
  keyOf({SimpleEventPlugin: null}),
  keyOf({TapEventPlugin: null}),
  keyOf({EnterLeaveEventPlugin: null}),
  keyOf({ChangeEventPlugin: null}),
  keyOf({SelectEventPlugin: null}),
  keyOf({BeforeInputEventPlugin: null}),
  keyOf({AnalyticsEventPlugin: null}),
  keyOf({MobileSafariClickEventPlugin: null})
];

module.exports = DefaultEventPluginOrder;

},{"./keyOf":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/keyOf.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/EnterLeaveEventPlugin.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EnterLeaveEventPlugin
 * @typechecks static-only
 */

'use strict';

var EventConstants = require("./EventConstants");
var EventPropagators = require("./EventPropagators");
var SyntheticMouseEvent = require("./SyntheticMouseEvent");

var ReactMount = require("./ReactMount");
var keyOf = require("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;
var getFirstReactDOM = ReactMount.getFirstReactDOM;

var eventTypes = {
  mouseEnter: {
    registrationName: keyOf({onMouseEnter: null}),
    dependencies: [
      topLevelTypes.topMouseOut,
      topLevelTypes.topMouseOver
    ]
  },
  mouseLeave: {
    registrationName: keyOf({onMouseLeave: null}),
    dependencies: [
      topLevelTypes.topMouseOut,
      topLevelTypes.topMouseOver
    ]
  }
};

var extractedEvents = [null, null];

var EnterLeaveEventPlugin = {

  eventTypes: eventTypes,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    if (topLevelType === topLevelTypes.topMouseOver &&
        (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== topLevelTypes.topMouseOut &&
        topLevelType !== topLevelTypes.topMouseOver) {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (topLevelTarget.window === topLevelTarget) {
      // `topLevelTarget` is probably a window object.
      win = topLevelTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = topLevelTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from, to;
    if (topLevelType === topLevelTypes.topMouseOut) {
      from = topLevelTarget;
      to =
        getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||
        win;
    } else {
      from = win;
      to = topLevelTarget;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var fromID = from ? ReactMount.getID(from) : '';
    var toID = to ? ReactMount.getID(to) : '';

    var leave = SyntheticMouseEvent.getPooled(
      eventTypes.mouseLeave,
      fromID,
      nativeEvent
    );
    leave.type = 'mouseleave';
    leave.target = from;
    leave.relatedTarget = to;

    var enter = SyntheticMouseEvent.getPooled(
      eventTypes.mouseEnter,
      toID,
      nativeEvent
    );
    enter.type = 'mouseenter';
    enter.target = to;
    enter.relatedTarget = from;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

    extractedEvents[0] = leave;
    extractedEvents[1] = enter;

    return extractedEvents;
  }

};

module.exports = EnterLeaveEventPlugin;

},{"./EventConstants":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/EventConstants.js","./EventPropagators":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/EventPropagators.js","./ReactMount":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactMount.js","./SyntheticMouseEvent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/SyntheticMouseEvent.js","./keyOf":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/keyOf.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/EventConstants.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventConstants
 */

'use strict';

var keyMirror = require("./keyMirror");

var PropagationPhases = keyMirror({bubbled: null, captured: null});

/**
 * Types of raw signals from the browser caught at the top level.
 */
var topLevelTypes = keyMirror({
  topBlur: null,
  topChange: null,
  topClick: null,
  topCompositionEnd: null,
  topCompositionStart: null,
  topCompositionUpdate: null,
  topContextMenu: null,
  topCopy: null,
  topCut: null,
  topDoubleClick: null,
  topDrag: null,
  topDragEnd: null,
  topDragEnter: null,
  topDragExit: null,
  topDragLeave: null,
  topDragOver: null,
  topDragStart: null,
  topDrop: null,
  topError: null,
  topFocus: null,
  topInput: null,
  topKeyDown: null,
  topKeyPress: null,
  topKeyUp: null,
  topLoad: null,
  topMouseDown: null,
  topMouseMove: null,
  topMouseOut: null,
  topMouseOver: null,
  topMouseUp: null,
  topPaste: null,
  topReset: null,
  topScroll: null,
  topSelectionChange: null,
  topSubmit: null,
  topTextInput: null,
  topTouchCancel: null,
  topTouchEnd: null,
  topTouchMove: null,
  topTouchStart: null,
  topWheel: null
});

var EventConstants = {
  topLevelTypes: topLevelTypes,
  PropagationPhases: PropagationPhases
};

module.exports = EventConstants;

},{"./keyMirror":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/keyMirror.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/EventListener.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule EventListener
 * @typechecks
 */

var emptyFunction = require("./emptyFunction");

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function() {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function(target, eventType, callback) {
    if (!target.addEventListener) {
      if ("production" !== process.env.NODE_ENV) {
        console.error(
          'Attempted to listen to events during the capture phase on a ' +
          'browser that does not support the capture phase. Your application ' +
          'will not receive some events.'
        );
      }
      return {
        remove: emptyFunction
      };
    } else {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, true);
        }
      };
    }
  },

  registerDefault: function() {}
};

module.exports = EventListener;

}).call(this,require('_process'))
},{"./emptyFunction":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/emptyFunction.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/EventPluginHub.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginHub
 */

'use strict';

var EventPluginRegistry = require("./EventPluginRegistry");
var EventPluginUtils = require("./EventPluginUtils");

var accumulateInto = require("./accumulateInto");
var forEachAccumulated = require("./forEachAccumulated");
var invariant = require("./invariant");

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @private
 */
var executeDispatchesAndRelease = function(event) {
  if (event) {
    var executeDispatch = EventPluginUtils.executeDispatch;
    // Plugins can provide custom behavior when dispatching events.
    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);
    if (PluginModule && PluginModule.executeDispatch) {
      executeDispatch = PluginModule.executeDispatch;
    }
    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};

/**
 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
 *   hierarchy given ids of the logical DOM elements involved.
 */
var InstanceHandle = null;

function validateInstanceHandle() {
  var valid =
    InstanceHandle &&
    InstanceHandle.traverseTwoPhase &&
    InstanceHandle.traverseEnterLeave;
  ("production" !== process.env.NODE_ENV ? invariant(
    valid,
    'InstanceHandle not injected before use!'
  ) : invariant(valid));
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = {

  /**
   * Methods for injecting dependencies.
   */
  injection: {

    /**
     * @param {object} InjectedMount
     * @public
     */
    injectMount: EventPluginUtils.injection.injectMount,

    /**
     * @param {object} InjectedInstanceHandle
     * @public
     */
    injectInstanceHandle: function(InjectedInstanceHandle) {
      InstanceHandle = InjectedInstanceHandle;
      if ("production" !== process.env.NODE_ENV) {
        validateInstanceHandle();
      }
    },

    getInstanceHandle: function() {
      if ("production" !== process.env.NODE_ENV) {
        validateInstanceHandle();
      }
      return InstanceHandle;
    },

    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

  },

  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

  registrationNameModules: EventPluginRegistry.registrationNameModules,

  /**
   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {?function} listener The callback to store.
   */
  putListener: function(id, registrationName, listener) {
    ("production" !== process.env.NODE_ENV ? invariant(
      !listener || typeof listener === 'function',
      'Expected %s listener to be a function, instead got type %s',
      registrationName, typeof listener
    ) : invariant(!listener || typeof listener === 'function'));

    var bankForRegistrationName =
      listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[id] = listener;
  },

  /**
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function(id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    return bankForRegistrationName && bankForRegistrationName[id];
  },

  /**
   * Deletes a listener from the registration bank.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function(id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    if (bankForRegistrationName) {
      delete bankForRegistrationName[id];
    }
  },

  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {string} id ID of the DOM element.
   */
  deleteAllListeners: function(id) {
    for (var registrationName in listenerBank) {
      delete listenerBank[registrationName][id];
    }
  },

  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0, l = plugins.length; i < l; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(
          topLevelType,
          topLevelTarget,
          topLevelTargetID,
          nativeEvent
        );
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  },

  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function(events) {
    if (events) {
      eventQueue = accumulateInto(eventQueue, events);
    }
  },

  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function() {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);
    ("production" !== process.env.NODE_ENV ? invariant(
      !eventQueue,
      'processEventQueue(): Additional events were enqueued while processing ' +
      'an event queue. Support for this has not yet been implemented.'
    ) : invariant(!eventQueue));
  },

  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function() {
    listenerBank = {};
  },

  __getListenerBank: function() {
    return listenerBank;
  }

};

module.exports = EventPluginHub;

}).call(this,require('_process'))
},{"./EventPluginRegistry":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/EventPluginRegistry.js","./EventPluginUtils":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/EventPluginUtils.js","./accumulateInto":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/accumulateInto.js","./forEachAccumulated":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/forEachAccumulated.js","./invariant":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/invariant.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/EventPluginRegistry.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginRegistry
 * @typechecks static-only
 */

'use strict';

var invariant = require("./invariant");

/**
 * Injectable ordering of event plugins.
 */
var EventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!EventPluginOrder) {
    // Wait until an `EventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var PluginModule = namesToPlugins[pluginName];
    var pluginIndex = EventPluginOrder.indexOf(pluginName);
    ("production" !== process.env.NODE_ENV ? invariant(
      pluginIndex > -1,
      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +
      'the plugin ordering, `%s`.',
      pluginName
    ) : invariant(pluginIndex > -1));
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    ("production" !== process.env.NODE_ENV ? invariant(
      PluginModule.extractEvents,
      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +
      'method, but `%s` does not.',
      pluginName
    ) : invariant(PluginModule.extractEvents));
    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
    var publishedEvents = PluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      ("production" !== process.env.NODE_ENV ? invariant(
        publishEventForPlugin(
          publishedEvents[eventName],
          PluginModule,
          eventName
        ),
        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',
        eventName,
        pluginName
      ) : invariant(publishEventForPlugin(
        publishedEvents[eventName],
        PluginModule,
        eventName
      )));
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
  ("production" !== process.env.NODE_ENV ? invariant(
    !EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),
    'EventPluginHub: More than one plugin attempted to publish the same ' +
    'event name, `%s`.',
    eventName
  ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)));
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(
          phasedRegistrationName,
          PluginModule,
          eventName
        );
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(
      dispatchConfig.registrationName,
      PluginModule,
      eventName
    );
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, PluginModule, eventName) {
  ("production" !== process.env.NODE_ENV ? invariant(
    !EventPluginRegistry.registrationNameModules[registrationName],
    'EventPluginHub: More than one plugin attempted to publish the same ' +
    'registration name, `%s`.',
    registrationName
  ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));
  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] =
    PluginModule.eventTypes[eventName].dependencies;
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = {

  /**
   * Ordered list of injected plugins.
   */
  plugins: [],

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {},

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {},

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {},

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function(InjectedEventPluginOrder) {
    ("production" !== process.env.NODE_ENV ? invariant(
      !EventPluginOrder,
      'EventPluginRegistry: Cannot inject event plugin ordering more than ' +
      'once. You are likely trying to load more than one copy of React.'
    ) : invariant(!EventPluginOrder));
    // Clone the ordering so it cannot be dynamically mutated.
    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
    recomputePluginOrdering();
  },

  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function(injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var PluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) ||
          namesToPlugins[pluginName] !== PluginModule) {
        ("production" !== process.env.NODE_ENV ? invariant(
          !namesToPlugins[pluginName],
          'EventPluginRegistry: Cannot inject two different event plugins ' +
          'using the same name, `%s`.',
          pluginName
        ) : invariant(!namesToPlugins[pluginName]));
        namesToPlugins[pluginName] = PluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function(event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[
        dispatchConfig.registrationName
      ] || null;
    }
    for (var phase in dispatchConfig.phasedRegistrationNames) {
      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
        continue;
      }
      var PluginModule = EventPluginRegistry.registrationNameModules[
        dispatchConfig.phasedRegistrationNames[phase]
      ];
      if (PluginModule) {
        return PluginModule;
      }
    }
    return null;
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function() {
    EventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }
  }

};

module.exports = EventPluginRegistry;

}).call(this,require('_process'))
},{"./invariant":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/invariant.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/EventPluginUtils.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginUtils
 */

'use strict';

var EventConstants = require("./EventConstants");

var invariant = require("./invariant");

/**
 * Injected dependencies:
 */

/**
 * - `Mount`: [required] Module that can convert between React dom IDs and
 *   actual node references.
 */
var injection = {
  Mount: null,
  injectMount: function(InjectedMount) {
    injection.Mount = InjectedMount;
    if ("production" !== process.env.NODE_ENV) {
      ("production" !== process.env.NODE_ENV ? invariant(
        InjectedMount && InjectedMount.getNode,
        'EventPluginUtils.injection.injectMount(...): Injected Mount module ' +
        'is missing getNode.'
      ) : invariant(InjectedMount && InjectedMount.getNode));
    }
  }
};

var topLevelTypes = EventConstants.topLevelTypes;

function isEndish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseUp ||
         topLevelType === topLevelTypes.topTouchEnd ||
         topLevelType === topLevelTypes.topTouchCancel;
}

function isMoveish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseMove ||
         topLevelType === topLevelTypes.topTouchMove;
}
function isStartish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseDown ||
         topLevelType === topLevelTypes.topTouchStart;
}


var validateEventDispatches;
if ("production" !== process.env.NODE_ENV) {
  validateEventDispatches = function(event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var idsIsArr = Array.isArray(dispatchIDs);
    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
    var listenersLen = listenersIsArr ?
      dispatchListeners.length :
      dispatchListeners ? 1 : 0;

    ("production" !== process.env.NODE_ENV ? invariant(
      idsIsArr === listenersIsArr && IDsLen === listenersLen,
      'EventPluginUtils: Invalid `event`.'
    ) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));
  };
}

/**
 * Invokes `cb(event, listener, id)`. Avoids using call if no scope is
 * provided. The `(listener,id)` pair effectively forms the "dispatch" but are
 * kept separate to conserve memory.
 */
function forEachEventDispatch(event, cb) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== process.env.NODE_ENV) {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      cb(event, dispatchListeners[i], dispatchIDs[i]);
    }
  } else if (dispatchListeners) {
    cb(event, dispatchListeners, dispatchIDs);
  }
}

/**
 * Default implementation of PluginModule.executeDispatch().
 * @param {SyntheticEvent} SyntheticEvent to handle
 * @param {function} Application-level callback
 * @param {string} domID DOM id to pass to the callback.
 */
function executeDispatch(event, listener, domID) {
  event.currentTarget = injection.Mount.getNode(domID);
  var returnValue = listener(event, domID);
  event.currentTarget = null;
  return returnValue;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, cb) {
  forEachEventDispatch(event, cb);
  event._dispatchListeners = null;
  event._dispatchIDs = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return id of the first dispatch execution who's listener returns true, or
 * null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== process.env.NODE_ENV) {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchIDs[i])) {
        return dispatchIDs[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchIDs)) {
      return dispatchIDs;
    }
  }
  return null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchIDs = null;
  event._dispatchListeners = null;
  return ret;
}

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if ("production" !== process.env.NODE_ENV) {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchID = event._dispatchIDs;
  ("production" !== process.env.NODE_ENV ? invariant(
    !Array.isArray(dispatchListener),
    'executeDirectDispatch(...): Invalid `event`.'
  ) : invariant(!Array.isArray(dispatchListener)));
  var res = dispatchListener ?
    dispatchListener(event, dispatchID) :
    null;
  event._dispatchListeners = null;
  event._dispatchIDs = null;
  return res;
}

/**
 * @param {SyntheticEvent} event
 * @return {bool} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;
}

/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatch: executeDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,
  injection: injection,
  useTouchEvents: false
};

module.exports = EventPluginUtils;

}).call(this,require('_process'))
},{"./EventConstants":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/EventConstants.js","./invariant":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/invariant.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/EventPropagators.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPropagators
 */

'use strict';

var EventConstants = require("./EventConstants");
var EventPluginHub = require("./EventPluginHub");

var accumulateInto = require("./accumulateInto");
var forEachAccumulated = require("./forEachAccumulated");

var PropagationPhases = EventConstants.PropagationPhases;
var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(id, event, propagationPhase) {
  var registrationName =
    event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(id, registrationName);
}

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(domID, upwards, event) {
  if ("production" !== process.env.NODE_ENV) {
    if (!domID) {
      throw new Error('Dispatching id must not be null');
    }
  }
  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
  var listener = listenerAtPhase(domID, event, phase);
  if (listener) {
    event._dispatchListeners =
      accumulateInto(event._dispatchListeners, listener);
    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We can not perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(
      event.dispatchMarker,
      accumulateDirectionalDispatches,
      event
    );
  }
}


/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(id, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(id, registrationName);
    if (listener) {
      event._dispatchListeners =
        accumulateInto(event._dispatchListeners, listener);
      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event.dispatchMarker, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(
    fromID,
    toID,
    accumulateDispatches,
    leave,
    enter
  );
}


function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}



/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;

}).call(this,require('_process'))
},{"./EventConstants":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/EventConstants.js","./EventPluginHub":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/EventPluginHub.js","./accumulateInto":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/accumulateInto.js","./forEachAccumulated":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/forEachAccumulated.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ExecutionEnvironment.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ExecutionEnvironment
 */

/*jslint evil: true */

"use strict";

var canUseDOM = !!(
  (typeof window !== 'undefined' &&
  window.document && window.document.createElement)
);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners:
    canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;

},{}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/FallbackCompositionState.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule FallbackCompositionState
 * @typechecks static-only
 */

'use strict';

var PooledClass = require("./PooledClass");

var assign = require("./Object.assign");
var getTextContentAccessor = require("./getTextContentAccessor");

/**
 * This helper class stores information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this._root = root;
  this._startText = this.getText();
  this._fallbackText = null;
}

assign(FallbackCompositionState.prototype, {
  /**
   * Get current text of input.
   *
   * @return {string}
   */
  getText: function() {
    if ('value' in this._root) {
      return this._root.value;
    }
    return this._root[getTextContentAccessor()];
  },

  /**
   * Determine the differing substring between the initially stored
   * text content and the current content.
   *
   * @return {string}
   */
  getData: function() {
    if (this._fallbackText) {
      return this._fallbackText;
    }

    var start;
    var startValue = this._startText;
    var startLength = startValue.length;
    var end;
    var endValue = this.getText();
    var endLength = endValue.length;

    for (start = 0; start < startLength; start++) {
      if (startValue[start] !== endValue[start]) {
        break;
      }
    }

    var minEnd = startLength - start;
    for (end = 1; end <= minEnd; end++) {
      if (startValue[startLength - end] !== endValue[endLength - end]) {
        break;
      }
    }

    var sliceTail = end > 1 ? 1 - end : undefined;
    this._fallbackText = endValue.slice(start, sliceTail);
    return this._fallbackText;
  }
});

PooledClass.addPoolingTo(FallbackCompositionState);

module.exports = FallbackCompositionState;

},{"./Object.assign":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/Object.assign.js","./PooledClass":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/PooledClass.js","./getTextContentAccessor":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/getTextContentAccessor.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/HTMLDOMPropertyConfig.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule HTMLDOMPropertyConfig
 */

/*jslint bitwise: true*/

'use strict';

var DOMProperty = require("./DOMProperty");
var ExecutionEnvironment = require("./ExecutionEnvironment");

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE =
  DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE =
  DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

var hasSVG;
if (ExecutionEnvironment.canUseDOM) {
  var implementation = document.implementation;
  hasSVG = (
    implementation &&
    implementation.hasFeature &&
    implementation.hasFeature(
      'http://www.w3.org/TR/SVG11/feature#BasicStructure',
      '1.1'
    )
  );
}


var HTMLDOMPropertyConfig = {
  isCustomAttribute: RegExp.prototype.test.bind(
    /^(data|aria)-[a-z_][a-z\d_.\-]*$/
  ),
  Properties: {
    /**
     * Standard Properties
     */
    accept: null,
    acceptCharset: null,
    accessKey: null,
    action: null,
    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    allowTransparency: MUST_USE_ATTRIBUTE,
    alt: null,
    async: HAS_BOOLEAN_VALUE,
    autoComplete: null,
    // autoFocus is polyfilled/normalized by AutoFocusMixin
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    cellPadding: null,
    cellSpacing: null,
    charSet: MUST_USE_ATTRIBUTE,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    classID: MUST_USE_ATTRIBUTE,
    // To set className on SVG elements, it's necessary to use .setAttribute;
    // this works on HTML elements too in all browsers except IE8. Conveniently,
    // IE8 doesn't support SVG and so we can simply use the attribute in
    // browsers that support SVG and the property in browsers that don't,
    // regardless of whether the element is HTML or SVG.
    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    colSpan: null,
    content: null,
    contentEditable: null,
    contextMenu: MUST_USE_ATTRIBUTE,
    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    coords: null,
    crossOrigin: null,
    data: null, // For `<object />` acts as `src`.
    dateTime: MUST_USE_ATTRIBUTE,
    defer: HAS_BOOLEAN_VALUE,
    dir: null,
    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: null,
    encType: null,
    form: MUST_USE_ATTRIBUTE,
    formAction: MUST_USE_ATTRIBUTE,
    formEncType: MUST_USE_ATTRIBUTE,
    formMethod: MUST_USE_ATTRIBUTE,
    formNoValidate: HAS_BOOLEAN_VALUE,
    formTarget: MUST_USE_ATTRIBUTE,
    frameBorder: MUST_USE_ATTRIBUTE,
    headers: null,
    height: MUST_USE_ATTRIBUTE,
    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    high: null,
    href: null,
    hrefLang: null,
    htmlFor: null,
    httpEquiv: null,
    icon: null,
    id: MUST_USE_PROPERTY,
    label: null,
    lang: null,
    list: MUST_USE_ATTRIBUTE,
    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    low: null,
    manifest: MUST_USE_ATTRIBUTE,
    marginHeight: null,
    marginWidth: null,
    max: null,
    maxLength: MUST_USE_ATTRIBUTE,
    media: MUST_USE_ATTRIBUTE,
    mediaGroup: null,
    method: null,
    min: null,
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    name: null,
    noValidate: HAS_BOOLEAN_VALUE,
    open: HAS_BOOLEAN_VALUE,
    optimum: null,
    pattern: null,
    placeholder: null,
    poster: null,
    preload: null,
    radioGroup: null,
    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    rel: null,
    required: HAS_BOOLEAN_VALUE,
    role: MUST_USE_ATTRIBUTE,
    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: null,
    sandbox: null,
    scope: null,
    scoped: HAS_BOOLEAN_VALUE,
    scrolling: null,
    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    shape: null,
    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    sizes: MUST_USE_ATTRIBUTE,
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: null,
    src: null,
    srcDoc: MUST_USE_PROPERTY,
    srcSet: MUST_USE_ATTRIBUTE,
    start: HAS_NUMERIC_VALUE,
    step: null,
    style: null,
    tabIndex: null,
    target: null,
    title: null,
    type: null,
    useMap: null,
    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
    width: MUST_USE_ATTRIBUTE,
    wmode: MUST_USE_ATTRIBUTE,

    /**
     * Non-standard Properties
     */
    // autoCapitalize and autoCorrect are supported in Mobile Safari for
    // keyboard hints.
    autoCapitalize: null,
    autoCorrect: null,
    // itemProp, itemScope, itemType are for
    // Microdata support. See http://schema.org/docs/gs.html
    itemProp: MUST_USE_ATTRIBUTE,
    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    itemType: MUST_USE_ATTRIBUTE,
    // itemID and itemRef are for Microdata support as well but
    // only specified in the the WHATWG spec document. See
    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
    itemID: MUST_USE_ATTRIBUTE,
    itemRef: MUST_USE_ATTRIBUTE,
    // property is supported for OpenGraph in meta tags.
    property: null,
    // IE-only attribute that controls focus behavior
    unselectable: MUST_USE_ATTRIBUTE
  },
  DOMAttributeNames: {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMPropertyNames: {
    autoCapitalize: 'autocapitalize',
    autoComplete: 'autocomplete',
    autoCorrect: 'autocorrect',
    autoFocus: 'autofocus',
    autoPlay: 'autoplay',
    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
    encType: 'encoding',
    hrefLang: 'hreflang',
    radioGroup: 'radiogroup',
    spellCheck: 'spellcheck',
    srcDoc: 'srcdoc',
    srcSet: 'srcset'
  }
};

module.exports = HTMLDOMPropertyConfig;

},{"./DOMProperty":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/DOMProperty.js","./ExecutionEnvironment":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ExecutionEnvironment.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/LinkedValueUtils.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LinkedValueUtils
 * @typechecks static-only
 */

'use strict';

var ReactPropTypes = require("./ReactPropTypes");

var invariant = require("./invariant");

var hasReadOnlyValue = {
  'button': true,
  'checkbox': true,
  'image': true,
  'hidden': true,
  'radio': true,
  'reset': true,
  'submit': true
};

function _assertSingleLink(input) {
  ("production" !== process.env.NODE_ENV ? invariant(
    input.props.checkedLink == null || input.props.valueLink == null,
    'Cannot provide a checkedLink and a valueLink. If you want to use ' +
    'checkedLink, you probably don\'t want to use valueLink and vice versa.'
  ) : invariant(input.props.checkedLink == null || input.props.valueLink == null));
}
function _assertValueLink(input) {
  _assertSingleLink(input);
  ("production" !== process.env.NODE_ENV ? invariant(
    input.props.value == null && input.props.onChange == null,
    'Cannot provide a valueLink and a value or onChange event. If you want ' +
    'to use value or onChange, you probably don\'t want to use valueLink.'
  ) : invariant(input.props.value == null && input.props.onChange == null));
}

function _assertCheckedLink(input) {
  _assertSingleLink(input);
  ("production" !== process.env.NODE_ENV ? invariant(
    input.props.checked == null && input.props.onChange == null,
    'Cannot provide a checkedLink and a checked property or onChange event. ' +
    'If you want to use checked or onChange, you probably don\'t want to ' +
    'use checkedLink'
  ) : invariant(input.props.checked == null && input.props.onChange == null));
}

/**
 * @param {SyntheticEvent} e change event to handle
 */
function _handleLinkedValueChange(e) {
  /*jshint validthis:true */
  this.props.valueLink.requestChange(e.target.value);
}

/**
  * @param {SyntheticEvent} e change event to handle
  */
function _handleLinkedCheckChange(e) {
  /*jshint validthis:true */
  this.props.checkedLink.requestChange(e.target.checked);
}

/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = {
  Mixin: {
    propTypes: {
      value: function(props, propName, componentName) {
        if (!props[propName] ||
            hasReadOnlyValue[props.type] ||
            props.onChange ||
            props.readOnly ||
            props.disabled) {
          return null;
        }
        return new Error(
          'You provided a `value` prop to a form field without an ' +
          '`onChange` handler. This will render a read-only field. If ' +
          'the field should be mutable use `defaultValue`. Otherwise, ' +
          'set either `onChange` or `readOnly`.'
        );
      },
      checked: function(props, propName, componentName) {
        if (!props[propName] ||
            props.onChange ||
            props.readOnly ||
            props.disabled) {
          return null;
        }
        return new Error(
          'You provided a `checked` prop to a form field without an ' +
          '`onChange` handler. This will render a read-only field. If ' +
          'the field should be mutable use `defaultChecked`. Otherwise, ' +
          'set either `onChange` or `readOnly`.'
        );
      },
      onChange: ReactPropTypes.func
    }
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function(input) {
    if (input.props.valueLink) {
      _assertValueLink(input);
      return input.props.valueLink.value;
    }
    return input.props.value;
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function(input) {
    if (input.props.checkedLink) {
      _assertCheckedLink(input);
      return input.props.checkedLink.value;
    }
    return input.props.checked;
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {function} change callback either from onChange prop or link.
   */
  getOnChange: function(input) {
    if (input.props.valueLink) {
      _assertValueLink(input);
      return _handleLinkedValueChange;
    } else if (input.props.checkedLink) {
      _assertCheckedLink(input);
      return _handleLinkedCheckChange;
    }
    return input.props.onChange;
  }
};

module.exports = LinkedValueUtils;

}).call(this,require('_process'))
},{"./ReactPropTypes":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactPropTypes.js","./invariant":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/invariant.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/LocalEventTrapMixin.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LocalEventTrapMixin
 */

'use strict';

var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");

var accumulateInto = require("./accumulateInto");
var forEachAccumulated = require("./forEachAccumulated");
var invariant = require("./invariant");

function remove(event) {
  event.remove();
}

var LocalEventTrapMixin = {
  trapBubbledEvent:function(topLevelType, handlerBaseName) {
    ("production" !== process.env.NODE_ENV ? invariant(this.isMounted(), 'Must be mounted to trap events') : invariant(this.isMounted()));
    // If a component renders to null or if another component fatals and causes
    // the state of the tree to be corrupted, `node` here can be null.
    var node = this.getDOMNode();
    ("production" !== process.env.NODE_ENV ? invariant(
      node,
      'LocalEventTrapMixin.trapBubbledEvent(...): Requires node to be rendered.'
    ) : invariant(node));
    var listener = ReactBrowserEventEmitter.trapBubbledEvent(
      topLevelType,
      handlerBaseName,
      node
    );
    this._localEventListeners =
      accumulateInto(this._localEventListeners, listener);
  },

  // trapCapturedEvent would look nearly identical. We don't implement that
  // method because it isn't currently needed.

  componentWillUnmount:function() {
    if (this._localEventListeners) {
      forEachAccumulated(this._localEventListeners, remove);
    }
  }
};

module.exports = LocalEventTrapMixin;

}).call(this,require('_process'))
},{"./ReactBrowserEventEmitter":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactBrowserEventEmitter.js","./accumulateInto":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/accumulateInto.js","./forEachAccumulated":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/forEachAccumulated.js","./invariant":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/invariant.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/MobileSafariClickEventPlugin.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule MobileSafariClickEventPlugin
 * @typechecks static-only
 */

'use strict';

var EventConstants = require("./EventConstants");

var emptyFunction = require("./emptyFunction");

var topLevelTypes = EventConstants.topLevelTypes;

/**
 * Mobile Safari does not fire properly bubble click events on non-interactive
 * elements, which means delegated click listeners do not fire. The workaround
 * for this bug involves attaching an empty click listener on the target node.
 *
 * This particular plugin works around the bug by attaching an empty click
 * listener on `touchstart` (which does fire on every element).
 */
var MobileSafariClickEventPlugin = {

  eventTypes: null,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    if (topLevelType === topLevelTypes.topTouchStart) {
      var target = nativeEvent.target;
      if (target && !target.onclick) {
        target.onclick = emptyFunction;
      }
    }
  }

};

module.exports = MobileSafariClickEventPlugin;

},{"./EventConstants":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/EventConstants.js","./emptyFunction":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/emptyFunction.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/Object.assign.js":[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Object.assign
 */

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

'use strict';

function assign(target, sources) {
  if (target == null) {
    throw new TypeError('Object.assign target cannot be null or undefined');
  }

  var to = Object(target);
  var hasOwnProperty = Object.prototype.hasOwnProperty;

  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
    var nextSource = arguments[nextIndex];
    if (nextSource == null) {
      continue;
    }

    var from = Object(nextSource);

    // We don't currently support accessors nor proxies. Therefore this
    // copy cannot throw. If we ever supported this then we must handle
    // exceptions and side-effects. We don't support symbols so they won't
    // be transferred.

    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }
  }

  return to;
}

module.exports = assign;

},{}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/PooledClass.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule PooledClass
 */

'use strict';

var invariant = require("./invariant");

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function(copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function(a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function(a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fiveArgumentPooler = function(a1, a2, a3, a4, a5) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4, a5);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4, a5);
  }
};

var standardReleaser = function(instance) {
  var Klass = this;
  ("production" !== process.env.NODE_ENV ? invariant(
    instance instanceof Klass,
    'Trying to release an instance into a pool of a different type.'
  ) : invariant(instance instanceof Klass));
  if (instance.destructor) {
    instance.destructor();
  }
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances (optional).
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function(CopyConstructor, pooler) {
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fiveArgumentPooler: fiveArgumentPooler
};

module.exports = PooledClass;

}).call(this,require('_process'))
},{"./invariant":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/invariant.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/React.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule React
 */

/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

'use strict';

var EventPluginUtils = require("./EventPluginUtils");
var ReactChildren = require("./ReactChildren");
var ReactComponent = require("./ReactComponent");
var ReactClass = require("./ReactClass");
var ReactContext = require("./ReactContext");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactElement = require("./ReactElement");
var ReactElementValidator = require("./ReactElementValidator");
var ReactDOM = require("./ReactDOM");
var ReactDOMTextComponent = require("./ReactDOMTextComponent");
var ReactDefaultInjection = require("./ReactDefaultInjection");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactMount = require("./ReactMount");
var ReactPerf = require("./ReactPerf");
var ReactPropTypes = require("./ReactPropTypes");
var ReactReconciler = require("./ReactReconciler");
var ReactServerRendering = require("./ReactServerRendering");

var assign = require("./Object.assign");
var findDOMNode = require("./findDOMNode");
var onlyChild = require("./onlyChild");

ReactDefaultInjection.inject();

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;
var cloneElement = ReactElement.cloneElement;

if ("production" !== process.env.NODE_ENV) {
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
  cloneElement = ReactElementValidator.cloneElement;
}

var render = ReactPerf.measure('React', 'render', ReactMount.render);

var React = {
  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    only: onlyChild
  },
  Component: ReactComponent,
  DOM: ReactDOM,
  PropTypes: ReactPropTypes,
  initializeTouchEvents: function(shouldUseTouch) {
    EventPluginUtils.useTouchEvents = shouldUseTouch;
  },
  createClass: ReactClass.createClass,
  createElement: createElement,
  cloneElement: cloneElement,
  createFactory: createFactory,
  createMixin: function(mixin) {
    // Currently a noop. Will be used to validate and trace mixins.
    return mixin;
  },
  constructAndRenderComponent: ReactMount.constructAndRenderComponent,
  constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,
  findDOMNode: findDOMNode,
  render: render,
  renderToString: ReactServerRendering.renderToString,
  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
  isValidElement: ReactElement.isValidElement,
  withContext: ReactContext.withContext,

  // Hook for JSX spread, don't use this for anything else.
  __spread: assign
};

// Inject the runtime into a devtools global hook regardless of browser.
// Allows for debugging when the hook is injected on the page.
if (
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    CurrentOwner: ReactCurrentOwner,
    InstanceHandles: ReactInstanceHandles,
    Mount: ReactMount,
    Reconciler: ReactReconciler,
    TextComponent: ReactDOMTextComponent
  });
}

if ("production" !== process.env.NODE_ENV) {
  var ExecutionEnvironment = require("./ExecutionEnvironment");
  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

    // If we're in Chrome, look for the devtools marker and provide a download
    // link if not installed.
    if (navigator.userAgent.indexOf('Chrome') > -1) {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
        console.debug(
          'Download the React DevTools for a better development experience: ' +
          'https://fb.me/react-devtools'
        );
      }
    }

    var expectedFeatures = [
      // shims
      Array.isArray,
      Array.prototype.every,
      Array.prototype.forEach,
      Array.prototype.indexOf,
      Array.prototype.map,
      Date.now,
      Function.prototype.bind,
      Object.keys,
      String.prototype.split,
      String.prototype.trim,

      // shams
      Object.create,
      Object.freeze
    ];

    for (var i = 0; i < expectedFeatures.length; i++) {
      if (!expectedFeatures[i]) {
        console.error(
          'One or more ES5 shim/shams expected by React are not available: ' +
          'https://fb.me/react-warning-polyfills'
        );
        break;
      }
    }
  }
}

React.version = '0.13.3';

module.exports = React;

}).call(this,require('_process'))
},{"./EventPluginUtils":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/EventPluginUtils.js","./ExecutionEnvironment":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ExecutionEnvironment.js","./Object.assign":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/Object.assign.js","./ReactChildren":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactChildren.js","./ReactClass":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactClass.js","./ReactComponent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactComponent.js","./ReactContext":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactContext.js","./ReactCurrentOwner":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactCurrentOwner.js","./ReactDOM":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactDOM.js","./ReactDOMTextComponent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactDOMTextComponent.js","./ReactDefaultInjection":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactDefaultInjection.js","./ReactElement":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactElement.js","./ReactElementValidator":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactElementValidator.js","./ReactInstanceHandles":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactInstanceHandles.js","./ReactMount":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactMount.js","./ReactPerf":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactPerf.js","./ReactPropTypes":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactPropTypes.js","./ReactReconciler":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactReconciler.js","./ReactServerRendering":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactServerRendering.js","./findDOMNode":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/findDOMNode.js","./onlyChild":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/onlyChild.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactBrowserComponentMixin.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserComponentMixin
 */

'use strict';

var findDOMNode = require("./findDOMNode");

var ReactBrowserComponentMixin = {
  /**
   * Returns the DOM node rendered by this component.
   *
   * @return {DOMElement} The root node of this component.
   * @final
   * @protected
   */
  getDOMNode: function() {
    return findDOMNode(this);
  }
};

module.exports = ReactBrowserComponentMixin;

},{"./findDOMNode":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/findDOMNode.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactBrowserEventEmitter.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserEventEmitter
 * @typechecks static-only
 */

'use strict';

var EventConstants = require("./EventConstants");
var EventPluginHub = require("./EventPluginHub");
var EventPluginRegistry = require("./EventPluginRegistry");
var ReactEventEmitterMixin = require("./ReactEventEmitterMixin");
var ViewportMetrics = require("./ViewportMetrics");

var assign = require("./Object.assign");
var isEventSupported = require("./isEventSupported");

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
  topBlur: 'blur',
  topChange: 'change',
  topClick: 'click',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topScroll: 'scroll',
  topSelectionChange: 'selectionchange',
  topTextInput: 'textInput',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topWheel: 'wheel'
};

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
 * example:
 *
 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

  /**
   * Injectable event backend
   */
  ReactEventListener: null,

  injection: {
    /**
     * @param {object} ReactEventListener
     */
    injectReactEventListener: function(ReactEventListener) {
      ReactEventListener.setHandleTopLevel(
        ReactBrowserEventEmitter.handleTopLevel
      );
      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
    }
  },

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function(enabled) {
    if (ReactBrowserEventEmitter.ReactEventListener) {
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
    }
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function() {
    return !!(
      (ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled())
    );
  },

  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} contentDocumentHandle Document which owns the container
   */
  listenTo: function(registrationName, contentDocumentHandle) {
    var mountAt = contentDocumentHandle;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = EventPluginRegistry.
      registrationNameDependencies[registrationName];

    var topLevelTypes = EventConstants.topLevelTypes;
    for (var i = 0, l = dependencies.length; i < l; i++) {
      var dependency = dependencies[i];
      if (!(
            (isListening.hasOwnProperty(dependency) && isListening[dependency])
          )) {
        if (dependency === topLevelTypes.topWheel) {
          if (isEventSupported('wheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'wheel',
              mountAt
            );
          } else if (isEventSupported('mousewheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'mousewheel',
              mountAt
            );
          } else {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'DOMMouseScroll',
              mountAt
            );
          }
        } else if (dependency === topLevelTypes.topScroll) {

          if (isEventSupported('scroll', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topScroll,
              'scroll',
              mountAt
            );
          } else {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topScroll,
              'scroll',
              ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE
            );
          }
        } else if (dependency === topLevelTypes.topFocus ||
            dependency === topLevelTypes.topBlur) {

          if (isEventSupported('focus', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topFocus,
              'focus',
              mountAt
            );
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topBlur,
              'blur',
              mountAt
            );
          } else if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topFocus,
              'focusin',
              mountAt
            );
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topBlur,
              'focusout',
              mountAt
            );
          }

          // to make sure blur and focus event listeners are only attached once
          isListening[topLevelTypes.topBlur] = true;
          isListening[topLevelTypes.topFocus] = true;
        } else if (topEventMapping.hasOwnProperty(dependency)) {
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
            dependency,
            topEventMapping[dependency],
            mountAt
          );
        }

        isListening[dependency] = true;
      }
    }
  },

  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
      topLevelType,
      handlerBaseName,
      handle
    );
  },

  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
      topLevelType,
      handlerBaseName,
      handle
    );
  },

  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function() {
    if (!isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
      isMonitoringScrollValue = true;
    }
  },

  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

  registrationNameModules: EventPluginHub.registrationNameModules,

  putListener: EventPluginHub.putListener,

  getListener: EventPluginHub.getListener,

  deleteListener: EventPluginHub.deleteListener,

  deleteAllListeners: EventPluginHub.deleteAllListeners

});

module.exports = ReactBrowserEventEmitter;

},{"./EventConstants":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/EventConstants.js","./EventPluginHub":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/EventPluginHub.js","./EventPluginRegistry":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/EventPluginRegistry.js","./Object.assign":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/Object.assign.js","./ReactEventEmitterMixin":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactEventEmitterMixin.js","./ViewportMetrics":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ViewportMetrics.js","./isEventSupported":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/isEventSupported.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactChildReconciler.js":[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildReconciler
 * @typechecks static-only
 */

'use strict';

var ReactReconciler = require("./ReactReconciler");

var flattenChildren = require("./flattenChildren");
var instantiateReactComponent = require("./instantiateReactComponent");
var shouldUpdateReactComponent = require("./shouldUpdateReactComponent");

/**
 * ReactChildReconciler provides helpers for initializing or updating a set of
 * children. Its output is suitable for passing it onto ReactMultiChild which
 * does diffed reordering and insertion.
 */
var ReactChildReconciler = {

  /**
   * Generates a "mount image" for each of the supplied children. In the case
   * of `ReactDOMComponent`, a mount image is a string of markup.
   *
   * @param {?object} nestedChildNodes Nested child maps.
   * @return {?object} A set of child instances.
   * @internal
   */
  instantiateChildren: function(nestedChildNodes, transaction, context) {
    var children = flattenChildren(nestedChildNodes);
    for (var name in children) {
      if (children.hasOwnProperty(name)) {
        var child = children[name];
        // The rendered children must be turned into instances as they're
        // mounted.
        var childInstance = instantiateReactComponent(child, null);
        children[name] = childInstance;
      }
    }
    return children;
  },

  /**
   * Updates the rendered children and returns a new set of children.
   *
   * @param {?object} prevChildren Previously initialized set of children.
   * @param {?object} nextNestedChildNodes Nested child maps.
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @return {?object} A new set of child instances.
   * @internal
   */
  updateChildren: function(
    prevChildren,
    nextNestedChildNodes,
    transaction,
    context) {
    // We currently don't have a way to track moves here but if we use iterators
    // instead of for..in we can zip the iterators and check if an item has
    // moved.
    // TODO: If nothing has changed, return the prevChildren object so that we
    // can quickly bailout if nothing has changed.
    var nextChildren = flattenChildren(nextNestedChildNodes);
    if (!nextChildren && !prevChildren) {
      return null;
    }
    var name;
    for (name in nextChildren) {
      if (!nextChildren.hasOwnProperty(name)) {
        continue;
      }
      var prevChild = prevChildren && prevChildren[name];
      var prevElement = prevChild && prevChild._currentElement;
      var nextElement = nextChildren[name];
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        ReactReconciler.receiveComponent(
          prevChild, nextElement, transaction, context
        );
        nextChildren[name] = prevChild;
      } else {
        if (prevChild) {
          ReactReconciler.unmountComponent(prevChild, name);
        }
        // The child must be instantiated before it's mounted.
        var nextChildInstance = instantiateReactComponent(
          nextElement,
          null
        );
        nextChildren[name] = nextChildInstance;
      }
    }
    // Unmount children that are no longer present.
    for (name in prevChildren) {
      if (prevChildren.hasOwnProperty(name) &&
          !(nextChildren && nextChildren.hasOwnProperty(name))) {
        ReactReconciler.unmountComponent(prevChildren[name]);
      }
    }
    return nextChildren;
  },

  /**
   * Unmounts all rendered children. This should be used to clean up children
   * when this component is unmounted.
   *
   * @param {?object} renderedChildren Previously initialized set of children.
   * @internal
   */
  unmountChildren: function(renderedChildren) {
    for (var name in renderedChildren) {
      var renderedChild = renderedChildren[name];
      ReactReconciler.unmountComponent(renderedChild);
    }
  }

};

module.exports = ReactChildReconciler;

},{"./ReactReconciler":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactReconciler.js","./flattenChildren":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/flattenChildren.js","./instantiateReactComponent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/instantiateReactComponent.js","./shouldUpdateReactComponent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/shouldUpdateReactComponent.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactChildren.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildren
 */

'use strict';

var PooledClass = require("./PooledClass");
var ReactFragment = require("./ReactFragment");

var traverseAllChildren = require("./traverseAllChildren");
var warning = require("./warning");

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var threeArgumentPooler = PooledClass.threeArgumentPooler;

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.forEachFunction = forEachFunction;
  this.forEachContext = forEachContext;
}
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(traverseContext, child, name, i) {
  var forEachBookKeeping = traverseContext;
  forEachBookKeeping.forEachFunction.call(
    forEachBookKeeping.forEachContext, child, i);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc.
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }

  var traverseContext =
    ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, mapFunction, mapContext) {
  this.mapResult = mapResult;
  this.mapFunction = mapFunction;
  this.mapContext = mapContext;
}
PooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);

function mapSingleChildIntoContext(traverseContext, child, name, i) {
  var mapBookKeeping = traverseContext;
  var mapResult = mapBookKeeping.mapResult;

  var keyUnique = !mapResult.hasOwnProperty(name);
  if ("production" !== process.env.NODE_ENV) {
    ("production" !== process.env.NODE_ENV ? warning(
      keyUnique,
      'ReactChildren.map(...): Encountered two children with the same key, ' +
      '`%s`. Child keys must be unique; when two children share a key, only ' +
      'the first child will be used.',
      name
    ) : null);
  }

  if (keyUnique) {
    var mappedChild =
      mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);
    mapResult[name] = mappedChild;
  }
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * TODO: This may likely break any calls to `ReactChildren.map` that were
 * previously relying on the fact that we guarded against null children.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} mapFunction.
 * @param {*} mapContext Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }

  var mapResult = {};
  var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
  return ReactFragment.create(mapResult);
}

function forEachSingleChildDummy(traverseContext, child, name, i) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  count: countChildren
};

module.exports = ReactChildren;

}).call(this,require('_process'))
},{"./PooledClass":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/PooledClass.js","./ReactFragment":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactFragment.js","./traverseAllChildren":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/traverseAllChildren.js","./warning":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/warning.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactClass.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactClass
 */

'use strict';

var ReactComponent = require("./ReactComponent");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactElement = require("./ReactElement");
var ReactErrorUtils = require("./ReactErrorUtils");
var ReactInstanceMap = require("./ReactInstanceMap");
var ReactLifeCycle = require("./ReactLifeCycle");
var ReactPropTypeLocations = require("./ReactPropTypeLocations");
var ReactPropTypeLocationNames = require("./ReactPropTypeLocationNames");
var ReactUpdateQueue = require("./ReactUpdateQueue");

var assign = require("./Object.assign");
var invariant = require("./invariant");
var keyMirror = require("./keyMirror");
var keyOf = require("./keyOf");
var warning = require("./warning");

var MIXINS_KEY = keyOf({mixins: null});

/**
 * Policies that describe methods in `ReactClassInterface`.
 */
var SpecPolicy = keyMirror({
  /**
   * These methods may be defined only once by the class specification or mixin.
   */
  DEFINE_ONCE: null,
  /**
   * These methods may be defined by both the class specification and mixins.
   * Subsequent definitions will be chained. These methods must return void.
   */
  DEFINE_MANY: null,
  /**
   * These methods are overriding the base class.
   */
  OVERRIDE_BASE: null,
  /**
   * These methods are similar to DEFINE_MANY, except we assume they return
   * objects. We try to merge the keys of the return values of all the mixed in
   * functions. If there is a key conflict we throw.
   */
  DEFINE_MANY_MERGED: null
});


var injectedMixins = [];

/**
 * Composite components are higher-level components that compose other composite
 * or native components.
 *
 * To create a new type of `ReactClass`, pass a specification of
 * your new class to `React.createClass`. The only requirement of your class
 * specification is that you implement a `render` method.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return <div>Hello World</div>;
 *     }
 *   });
 *
 * The class specification supports a specific protocol of methods that have
 * special meaning (e.g. `render`). See `ReactClassInterface` for
 * more the comprehensive protocol. Any other properties and methods in the
 * class specification will available on the prototype.
 *
 * @interface ReactClassInterface
 * @internal
 */
var ReactClassInterface = {

  /**
   * An array of Mixin objects to include when defining your component.
   *
   * @type {array}
   * @optional
   */
  mixins: SpecPolicy.DEFINE_MANY,

  /**
   * An object containing properties and methods that should be defined on
   * the component's constructor instead of its prototype (static methods).
   *
   * @type {object}
   * @optional
   */
  statics: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of prop types for this component.
   *
   * @type {object}
   * @optional
   */
  propTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types for this component.
   *
   * @type {object}
   * @optional
   */
  contextTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types this component sets for its children.
   *
   * @type {object}
   * @optional
   */
  childContextTypes: SpecPolicy.DEFINE_MANY,

  // ==== Definition methods ====

  /**
   * Invoked when the component is mounted. Values in the mapping will be set on
   * `this.props` if that prop is not specified (i.e. using an `in` check).
   *
   * This method is invoked before `getInitialState` and therefore cannot rely
   * on `this.state` or use `this.setState`.
   *
   * @return {object}
   * @optional
   */
  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Invoked once before the component is mounted. The return value will be used
   * as the initial value of `this.state`.
   *
   *   getInitialState: function() {
   *     return {
   *       isOn: false,
   *       fooBaz: new BazFoo()
   *     }
   *   }
   *
   * @return {object}
   * @optional
   */
  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * @return {object}
   * @optional
   */
  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Uses props from `this.props` and state from `this.state` to render the
   * structure of the component.
   *
   * No guarantees are made about when or how often this method is invoked, so
   * it must not have side effects.
   *
   *   render: function() {
   *     var name = this.props.name;
   *     return <div>Hello, {name}!</div>;
   *   }
   *
   * @return {ReactComponent}
   * @nosideeffects
   * @required
   */
  render: SpecPolicy.DEFINE_ONCE,



  // ==== Delegate methods ====

  /**
   * Invoked when the component is initially created and about to be mounted.
   * This may have side effects, but any external subscriptions or data created
   * by this method must be cleaned up in `componentWillUnmount`.
   *
   * @optional
   */
  componentWillMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component has been mounted and has a DOM representation.
   * However, there is no guarantee that the DOM node is in the document.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been mounted (initialized and rendered) for the first time.
   *
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked before the component receives new props.
   *
   * Use this as an opportunity to react to a prop transition by updating the
   * state using `this.setState`. Current props are accessed via `this.props`.
   *
   *   componentWillReceiveProps: function(nextProps, nextContext) {
   *     this.setState({
   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
   *     });
   *   }
   *
   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
   * transition may cause a state change, but the opposite is not true. If you
   * need it, you are probably looking for `componentWillUpdate`.
   *
   * @param {object} nextProps
   * @optional
   */
  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked while deciding if the component should be updated as a result of
   * receiving new props, state and/or context.
   *
   * Use this as an opportunity to `return false` when you're certain that the
   * transition to the new props/state/context will not require a component
   * update.
   *
   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
   *     return !equal(nextProps, this.props) ||
   *       !equal(nextState, this.state) ||
   *       !equal(nextContext, this.context);
   *   }
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @return {boolean} True if the component should update.
   * @optional
   */
  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

  /**
   * Invoked when the component is about to update due to a transition from
   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
   * and `nextContext`.
   *
   * Use this as an opportunity to perform preparation before an update occurs.
   *
   * NOTE: You **cannot** use `this.setState()` in this method.
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @param {ReactReconcileTransaction} transaction
   * @optional
   */
  componentWillUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component's DOM representation has been updated.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been updated.
   *
   * @param {object} prevProps
   * @param {?object} prevState
   * @param {?object} prevContext
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component is about to be removed from its parent and have
   * its DOM representation destroyed.
   *
   * Use this as an opportunity to deallocate any external resources.
   *
   * NOTE: There is no `componentDidUnmount` since your component will have been
   * destroyed by that point.
   *
   * @optional
   */
  componentWillUnmount: SpecPolicy.DEFINE_MANY,



  // ==== Advanced methods ====

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   * @overridable
   */
  updateComponent: SpecPolicy.OVERRIDE_BASE

};

/**
 * Mapping from class specification keys to special processing functions.
 *
 * Although these are declared like instance properties in the specification
 * when defining classes using `React.createClass`, they are actually static
 * and are accessible on the constructor instead of the prototype. Despite
 * being static, they must be defined outside of the "statics" key under
 * which all other static methods are defined.
 */
var RESERVED_SPEC_KEYS = {
  displayName: function(Constructor, displayName) {
    Constructor.displayName = displayName;
  },
  mixins: function(Constructor, mixins) {
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        mixSpecIntoComponent(Constructor, mixins[i]);
      }
    }
  },
  childContextTypes: function(Constructor, childContextTypes) {
    if ("production" !== process.env.NODE_ENV) {
      validateTypeDef(
        Constructor,
        childContextTypes,
        ReactPropTypeLocations.childContext
      );
    }
    Constructor.childContextTypes = assign(
      {},
      Constructor.childContextTypes,
      childContextTypes
    );
  },
  contextTypes: function(Constructor, contextTypes) {
    if ("production" !== process.env.NODE_ENV) {
      validateTypeDef(
        Constructor,
        contextTypes,
        ReactPropTypeLocations.context
      );
    }
    Constructor.contextTypes = assign(
      {},
      Constructor.contextTypes,
      contextTypes
    );
  },
  /**
   * Special case getDefaultProps which should move into statics but requires
   * automatic merging.
   */
  getDefaultProps: function(Constructor, getDefaultProps) {
    if (Constructor.getDefaultProps) {
      Constructor.getDefaultProps = createMergedResultFunction(
        Constructor.getDefaultProps,
        getDefaultProps
      );
    } else {
      Constructor.getDefaultProps = getDefaultProps;
    }
  },
  propTypes: function(Constructor, propTypes) {
    if ("production" !== process.env.NODE_ENV) {
      validateTypeDef(
        Constructor,
        propTypes,
        ReactPropTypeLocations.prop
      );
    }
    Constructor.propTypes = assign(
      {},
      Constructor.propTypes,
      propTypes
    );
  },
  statics: function(Constructor, statics) {
    mixStaticSpecIntoComponent(Constructor, statics);
  }
};

function validateTypeDef(Constructor, typeDef, location) {
  for (var propName in typeDef) {
    if (typeDef.hasOwnProperty(propName)) {
      // use a warning instead of an invariant so components
      // don't show up in prod but not in __DEV__
      ("production" !== process.env.NODE_ENV ? warning(
        typeof typeDef[propName] === 'function',
        '%s: %s type `%s` is invalid; it must be a function, usually from ' +
        'React.PropTypes.',
        Constructor.displayName || 'ReactClass',
        ReactPropTypeLocationNames[location],
        propName
      ) : null);
    }
  }
}

function validateMethodOverride(proto, name) {
  var specPolicy = ReactClassInterface.hasOwnProperty(name) ?
    ReactClassInterface[name] :
    null;

  // Disallow overriding of base class methods unless explicitly allowed.
  if (ReactClassMixin.hasOwnProperty(name)) {
    ("production" !== process.env.NODE_ENV ? invariant(
      specPolicy === SpecPolicy.OVERRIDE_BASE,
      'ReactClassInterface: You are attempting to override ' +
      '`%s` from your class specification. Ensure that your method names ' +
      'do not overlap with React methods.',
      name
    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));
  }

  // Disallow defining methods more than once unless explicitly allowed.
  if (proto.hasOwnProperty(name)) {
    ("production" !== process.env.NODE_ENV ? invariant(
      specPolicy === SpecPolicy.DEFINE_MANY ||
      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,
      'ReactClassInterface: You are attempting to define ' +
      '`%s` on your component more than once. This conflict may be due ' +
      'to a mixin.',
      name
    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||
    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));
  }
}

/**
 * Mixin helper which handles policy validation and reserved
 * specification keys when building React classses.
 */
function mixSpecIntoComponent(Constructor, spec) {
  if (!spec) {
    return;
  }

  ("production" !== process.env.NODE_ENV ? invariant(
    typeof spec !== 'function',
    'ReactClass: You\'re attempting to ' +
    'use a component class as a mixin. Instead, just use a regular object.'
  ) : invariant(typeof spec !== 'function'));
  ("production" !== process.env.NODE_ENV ? invariant(
    !ReactElement.isValidElement(spec),
    'ReactClass: You\'re attempting to ' +
    'use a component as a mixin. Instead, just use a regular object.'
  ) : invariant(!ReactElement.isValidElement(spec)));

  var proto = Constructor.prototype;

  // By handling mixins before any other properties, we ensure the same
  // chaining order is applied to methods with DEFINE_MANY policy, whether
  // mixins are listed before or after these methods in the spec.
  if (spec.hasOwnProperty(MIXINS_KEY)) {
    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
  }

  for (var name in spec) {
    if (!spec.hasOwnProperty(name)) {
      continue;
    }

    if (name === MIXINS_KEY) {
      // We have already handled mixins in a special case above
      continue;
    }

    var property = spec[name];
    validateMethodOverride(proto, name);

    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
      RESERVED_SPEC_KEYS[name](Constructor, property);
    } else {
      // Setup methods on prototype:
      // The following member methods should not be automatically bound:
      // 1. Expected ReactClass methods (in the "interface").
      // 2. Overridden methods (that were mixed in).
      var isReactClassMethod =
        ReactClassInterface.hasOwnProperty(name);
      var isAlreadyDefined = proto.hasOwnProperty(name);
      var markedDontBind = property && property.__reactDontBind;
      var isFunction = typeof property === 'function';
      var shouldAutoBind =
        isFunction &&
        !isReactClassMethod &&
        !isAlreadyDefined &&
        !markedDontBind;

      if (shouldAutoBind) {
        if (!proto.__reactAutoBindMap) {
          proto.__reactAutoBindMap = {};
        }
        proto.__reactAutoBindMap[name] = property;
        proto[name] = property;
      } else {
        if (isAlreadyDefined) {
          var specPolicy = ReactClassInterface[name];

          // These cases should already be caught by validateMethodOverride
          ("production" !== process.env.NODE_ENV ? invariant(
            isReactClassMethod && (
              (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)
            ),
            'ReactClass: Unexpected spec policy %s for key %s ' +
            'when mixing in component specs.',
            specPolicy,
            name
          ) : invariant(isReactClassMethod && (
            (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)
          )));

          // For methods which are defined more than once, call the existing
          // methods before calling the new property, merging if appropriate.
          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
            proto[name] = createMergedResultFunction(proto[name], property);
          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
            proto[name] = createChainedFunction(proto[name], property);
          }
        } else {
          proto[name] = property;
          if ("production" !== process.env.NODE_ENV) {
            // Add verbose displayName to the function, which helps when looking
            // at profiling tools.
            if (typeof property === 'function' && spec.displayName) {
              proto[name].displayName = spec.displayName + '_' + name;
            }
          }
        }
      }
    }
  }
}

function mixStaticSpecIntoComponent(Constructor, statics) {
  if (!statics) {
    return;
  }
  for (var name in statics) {
    var property = statics[name];
    if (!statics.hasOwnProperty(name)) {
      continue;
    }

    var isReserved = name in RESERVED_SPEC_KEYS;
    ("production" !== process.env.NODE_ENV ? invariant(
      !isReserved,
      'ReactClass: You are attempting to define a reserved ' +
      'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
      'as an instance property instead; it will still be accessible on the ' +
      'constructor.',
      name
    ) : invariant(!isReserved));

    var isInherited = name in Constructor;
    ("production" !== process.env.NODE_ENV ? invariant(
      !isInherited,
      'ReactClass: You are attempting to define ' +
      '`%s` on your component more than once. This conflict may be ' +
      'due to a mixin.',
      name
    ) : invariant(!isInherited));
    Constructor[name] = property;
  }
}

/**
 * Merge two objects, but throw if both contain the same key.
 *
 * @param {object} one The first object, which is mutated.
 * @param {object} two The second object
 * @return {object} one after it has been mutated to contain everything in two.
 */
function mergeIntoWithNoDuplicateKeys(one, two) {
  ("production" !== process.env.NODE_ENV ? invariant(
    one && two && typeof one === 'object' && typeof two === 'object',
    'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'
  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));

  for (var key in two) {
    if (two.hasOwnProperty(key)) {
      ("production" !== process.env.NODE_ENV ? invariant(
        one[key] === undefined,
        'mergeIntoWithNoDuplicateKeys(): ' +
        'Tried to merge two objects with the same key: `%s`. This conflict ' +
        'may be due to a mixin; in particular, this may be caused by two ' +
        'getInitialState() or getDefaultProps() methods returning objects ' +
        'with clashing keys.',
        key
      ) : invariant(one[key] === undefined));
      one[key] = two[key];
    }
  }
  return one;
}

/**
 * Creates a function that invokes two functions and merges their return values.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createMergedResultFunction(one, two) {
  return function mergedResult() {
    var a = one.apply(this, arguments);
    var b = two.apply(this, arguments);
    if (a == null) {
      return b;
    } else if (b == null) {
      return a;
    }
    var c = {};
    mergeIntoWithNoDuplicateKeys(c, a);
    mergeIntoWithNoDuplicateKeys(c, b);
    return c;
  };
}

/**
 * Creates a function that invokes two functions and ignores their return vales.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createChainedFunction(one, two) {
  return function chainedFunction() {
    one.apply(this, arguments);
    two.apply(this, arguments);
  };
}

/**
 * Binds a method to the component.
 *
 * @param {object} component Component whose method is going to be bound.
 * @param {function} method Method to be bound.
 * @return {function} The bound method.
 */
function bindAutoBindMethod(component, method) {
  var boundMethod = method.bind(component);
  if ("production" !== process.env.NODE_ENV) {
    boundMethod.__reactBoundContext = component;
    boundMethod.__reactBoundMethod = method;
    boundMethod.__reactBoundArguments = null;
    var componentName = component.constructor.displayName;
    var _bind = boundMethod.bind;
    /* eslint-disable block-scoped-var, no-undef */
    boundMethod.bind = function(newThis ) {for (var args=[],$__0=1,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
      // User is trying to bind() an autobound method; we effectively will
      // ignore the value of "this" that the user is trying to use, so
      // let's warn.
      if (newThis !== component && newThis !== null) {
        ("production" !== process.env.NODE_ENV ? warning(
          false,
          'bind(): React component methods may only be bound to the ' +
          'component instance. See %s',
          componentName
        ) : null);
      } else if (!args.length) {
        ("production" !== process.env.NODE_ENV ? warning(
          false,
          'bind(): You are binding a component method to the component. ' +
          'React does this for you automatically in a high-performance ' +
          'way, so you can safely remove this call. See %s',
          componentName
        ) : null);
        return boundMethod;
      }
      var reboundMethod = _bind.apply(boundMethod, arguments);
      reboundMethod.__reactBoundContext = component;
      reboundMethod.__reactBoundMethod = method;
      reboundMethod.__reactBoundArguments = args;
      return reboundMethod;
      /* eslint-enable */
    };
  }
  return boundMethod;
}

/**
 * Binds all auto-bound methods in a component.
 *
 * @param {object} component Component whose method is going to be bound.
 */
function bindAutoBindMethods(component) {
  for (var autoBindKey in component.__reactAutoBindMap) {
    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
      var method = component.__reactAutoBindMap[autoBindKey];
      component[autoBindKey] = bindAutoBindMethod(
        component,
        ReactErrorUtils.guard(
          method,
          component.constructor.displayName + '.' + autoBindKey
        )
      );
    }
  }
}

var typeDeprecationDescriptor = {
  enumerable: false,
  get: function() {
    var displayName = this.displayName || this.name || 'Component';
    ("production" !== process.env.NODE_ENV ? warning(
      false,
      '%s.type is deprecated. Use %s directly to access the class.',
      displayName,
      displayName
    ) : null);
    Object.defineProperty(this, 'type', {
      value: this
    });
    return this;
  }
};

/**
 * Add more to the ReactClass base class. These are all legacy features and
 * therefore not already part of the modern ReactComponent.
 */
var ReactClassMixin = {

  /**
   * TODO: This will be deprecated because state should always keep a consistent
   * type signature and the only use case for this, is to avoid that.
   */
  replaceState: function(newState, callback) {
    ReactUpdateQueue.enqueueReplaceState(this, newState);
    if (callback) {
      ReactUpdateQueue.enqueueCallback(this, callback);
    }
  },

  /**
   * Checks whether or not this composite component is mounted.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function() {
    if ("production" !== process.env.NODE_ENV) {
      var owner = ReactCurrentOwner.current;
      if (owner !== null) {
        ("production" !== process.env.NODE_ENV ? warning(
          owner._warnedAboutRefsInRender,
          '%s is accessing isMounted inside its render() function. ' +
          'render() should be a pure function of props and state. It should ' +
          'never access something that requires stale data from the previous ' +
          'render, such as refs. Move this logic to componentDidMount and ' +
          'componentDidUpdate instead.',
          owner.getName() || 'A component'
        ) : null);
        owner._warnedAboutRefsInRender = true;
      }
    }
    var internalInstance = ReactInstanceMap.get(this);
    return (
      internalInstance &&
      internalInstance !== ReactLifeCycle.currentlyMountingInstance
    );
  },

  /**
   * Sets a subset of the props.
   *
   * @param {object} partialProps Subset of the next props.
   * @param {?function} callback Called after props are updated.
   * @final
   * @public
   * @deprecated
   */
  setProps: function(partialProps, callback) {
    ReactUpdateQueue.enqueueSetProps(this, partialProps);
    if (callback) {
      ReactUpdateQueue.enqueueCallback(this, callback);
    }
  },

  /**
   * Replace all the props.
   *
   * @param {object} newProps Subset of the next props.
   * @param {?function} callback Called after props are updated.
   * @final
   * @public
   * @deprecated
   */
  replaceProps: function(newProps, callback) {
    ReactUpdateQueue.enqueueReplaceProps(this, newProps);
    if (callback) {
      ReactUpdateQueue.enqueueCallback(this, callback);
    }
  }
};

var ReactClassComponent = function() {};
assign(
  ReactClassComponent.prototype,
  ReactComponent.prototype,
  ReactClassMixin
);

/**
 * Module for creating composite components.
 *
 * @class ReactClass
 */
var ReactClass = {

  /**
   * Creates a composite component class given a class specification.
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  createClass: function(spec) {
    var Constructor = function(props, context) {
      // This constructor is overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted.

      if ("production" !== process.env.NODE_ENV) {
        ("production" !== process.env.NODE_ENV ? warning(
          this instanceof Constructor,
          'Something is calling a React component directly. Use a factory or ' +
          'JSX instead. See: https://fb.me/react-legacyfactory'
        ) : null);
      }

      // Wire up auto-binding
      if (this.__reactAutoBindMap) {
        bindAutoBindMethods(this);
      }

      this.props = props;
      this.context = context;
      this.state = null;

      // ReactClasses doesn't have constructors. Instead, they use the
      // getInitialState and componentWillMount methods for initialization.

      var initialState = this.getInitialState ? this.getInitialState() : null;
      if ("production" !== process.env.NODE_ENV) {
        // We allow auto-mocks to proceed as if they're returning null.
        if (typeof initialState === 'undefined' &&
            this.getInitialState._isMockFunction) {
          // This is probably bad practice. Consider warning here and
          // deprecating this convenience.
          initialState = null;
        }
      }
      ("production" !== process.env.NODE_ENV ? invariant(
        typeof initialState === 'object' && !Array.isArray(initialState),
        '%s.getInitialState(): must return an object or null',
        Constructor.displayName || 'ReactCompositeComponent'
      ) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));

      this.state = initialState;
    };
    Constructor.prototype = new ReactClassComponent();
    Constructor.prototype.constructor = Constructor;

    injectedMixins.forEach(
      mixSpecIntoComponent.bind(null, Constructor)
    );

    mixSpecIntoComponent(Constructor, spec);

    // Initialize the defaultProps property after all mixins have been merged
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    if ("production" !== process.env.NODE_ENV) {
      // This is a tag to indicate that the use of these method names is ok,
      // since it's used with createClass. If it's not, then it's likely a
      // mistake so we'll warn you to use the static property, property
      // initializer or constructor respectively.
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps.isReactClassApproved = {};
      }
      if (Constructor.prototype.getInitialState) {
        Constructor.prototype.getInitialState.isReactClassApproved = {};
      }
    }

    ("production" !== process.env.NODE_ENV ? invariant(
      Constructor.prototype.render,
      'createClass(...): Class specification must implement a `render` method.'
    ) : invariant(Constructor.prototype.render));

    if ("production" !== process.env.NODE_ENV) {
      ("production" !== process.env.NODE_ENV ? warning(
        !Constructor.prototype.componentShouldUpdate,
        '%s has a method called ' +
        'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
        'The name is phrased as a question because the function is ' +
        'expected to return a value.',
        spec.displayName || 'A component'
      ) : null);
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactClassInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    // Legacy hook
    Constructor.type = Constructor;
    if ("production" !== process.env.NODE_ENV) {
      try {
        Object.defineProperty(Constructor, 'type', typeDeprecationDescriptor);
      } catch (x) {
        // IE will fail on defineProperty (es5-shim/sham too)
      }
    }

    return Constructor;
  },

  injection: {
    injectMixin: function(mixin) {
      injectedMixins.push(mixin);
    }
  }

};

module.exports = ReactClass;

}).call(this,require('_process'))
},{"./Object.assign":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/Object.assign.js","./ReactComponent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactComponent.js","./ReactCurrentOwner":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactCurrentOwner.js","./ReactElement":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactElement.js","./ReactErrorUtils":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactErrorUtils.js","./ReactInstanceMap":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactInstanceMap.js","./ReactLifeCycle":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactLifeCycle.js","./ReactPropTypeLocationNames":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactPropTypeLocationNames.js","./ReactPropTypeLocations":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactPropTypeLocations.js","./ReactUpdateQueue":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactUpdateQueue.js","./invariant":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/invariant.js","./keyMirror":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/keyMirror.js","./keyOf":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/keyOf.js","./warning":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/warning.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactComponent.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponent
 */

'use strict';

var ReactUpdateQueue = require("./ReactUpdateQueue");

var invariant = require("./invariant");
var warning = require("./warning");

/**
 * Base class helpers for the updating state of a component.
 */
function ReactComponent(props, context) {
  this.props = props;
  this.context = context;
}

/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */
ReactComponent.prototype.setState = function(partialState, callback) {
  ("production" !== process.env.NODE_ENV ? invariant(
    typeof partialState === 'object' ||
    typeof partialState === 'function' ||
    partialState == null,
    'setState(...): takes an object of state variables to update or a ' +
    'function which returns an object of state variables.'
  ) : invariant(typeof partialState === 'object' ||
  typeof partialState === 'function' ||
  partialState == null));
  if ("production" !== process.env.NODE_ENV) {
    ("production" !== process.env.NODE_ENV ? warning(
      partialState != null,
      'setState(...): You passed an undefined or null state object; ' +
      'instead, use forceUpdate().'
    ) : null);
  }
  ReactUpdateQueue.enqueueSetState(this, partialState);
  if (callback) {
    ReactUpdateQueue.enqueueCallback(this, callback);
  }
};

/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */
ReactComponent.prototype.forceUpdate = function(callback) {
  ReactUpdateQueue.enqueueForceUpdate(this);
  if (callback) {
    ReactUpdateQueue.enqueueCallback(this, callback);
  }
};

/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */
if ("production" !== process.env.NODE_ENV) {
  var deprecatedAPIs = {
    getDOMNode: [
      'getDOMNode',
      'Use React.findDOMNode(component) instead.'
    ],
    isMounted: [
      'isMounted',
      'Instead, make sure to clean up subscriptions and pending requests in ' +
      'componentWillUnmount to prevent memory leaks.'
    ],
    replaceProps: [
      'replaceProps',
      'Instead, call React.render again at the top level.'
    ],
    replaceState: [
      'replaceState',
      'Refactor your code to use setState instead (see ' +
      'https://github.com/facebook/react/issues/3236).'
    ],
    setProps: [
      'setProps',
      'Instead, call React.render again at the top level.'
    ]
  };
  var defineDeprecationWarning = function(methodName, info) {
    try {
      Object.defineProperty(ReactComponent.prototype, methodName, {
        get: function() {
          ("production" !== process.env.NODE_ENV ? warning(
            false,
            '%s(...) is deprecated in plain JavaScript React classes. %s',
            info[0],
            info[1]
          ) : null);
          return undefined;
        }
      });
    } catch (x) {
      // IE will fail on defineProperty (es5-shim/sham too)
    }
  };
  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

module.exports = ReactComponent;

}).call(this,require('_process'))
},{"./ReactUpdateQueue":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactUpdateQueue.js","./invariant":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/invariant.js","./warning":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/warning.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactComponentBrowserEnvironment.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentBrowserEnvironment
 */

/*jslint evil: true */

'use strict';

var ReactDOMIDOperations = require("./ReactDOMIDOperations");
var ReactMount = require("./ReactMount");

/**
 * Abstracts away all functionality of the reconciler that requires knowledge of
 * the browser context. TODO: These callers should be refactored to avoid the
 * need for this injection.
 */
var ReactComponentBrowserEnvironment = {

  processChildrenUpdates:
    ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

  replaceNodeWithMarkupByID:
    ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,

  /**
   * If a particular environment requires that some resources be cleaned up,
   * specify this in the injected Mixin. In the DOM, we would likely want to
   * purge any cached node ID lookups.
   *
   * @private
   */
  unmountIDFromEnvironment: function(rootNodeID) {
    ReactMount.purgeID(rootNodeID);
  }

};

module.exports = ReactComponentBrowserEnvironment;

},{"./ReactDOMIDOperations":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactDOMIDOperations.js","./ReactMount":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactMount.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactComponentEnvironment.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentEnvironment
 */

'use strict';

var invariant = require("./invariant");

var injected = false;

var ReactComponentEnvironment = {

  /**
   * Optionally injectable environment dependent cleanup hook. (server vs.
   * browser etc). Example: A browser system caches DOM nodes based on component
   * ID and must remove that cache entry when this instance is unmounted.
   */
  unmountIDFromEnvironment: null,

  /**
   * Optionally injectable hook for swapping out mount images in the middle of
   * the tree.
   */
  replaceNodeWithMarkupByID: null,

  /**
   * Optionally injectable hook for processing a queue of child updates. Will
   * later move into MultiChildComponents.
   */
  processChildrenUpdates: null,

  injection: {
    injectEnvironment: function(environment) {
      ("production" !== process.env.NODE_ENV ? invariant(
        !injected,
        'ReactCompositeComponent: injectEnvironment() can only be called once.'
      ) : invariant(!injected));
      ReactComponentEnvironment.unmountIDFromEnvironment =
        environment.unmountIDFromEnvironment;
      ReactComponentEnvironment.replaceNodeWithMarkupByID =
        environment.replaceNodeWithMarkupByID;
      ReactComponentEnvironment.processChildrenUpdates =
        environment.processChildrenUpdates;
      injected = true;
    }
  }

};

module.exports = ReactComponentEnvironment;

}).call(this,require('_process'))
},{"./invariant":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/invariant.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactCompositeComponent.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCompositeComponent
 */

'use strict';

var ReactComponentEnvironment = require("./ReactComponentEnvironment");
var ReactContext = require("./ReactContext");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactElement = require("./ReactElement");
var ReactElementValidator = require("./ReactElementValidator");
var ReactInstanceMap = require("./ReactInstanceMap");
var ReactLifeCycle = require("./ReactLifeCycle");
var ReactNativeComponent = require("./ReactNativeComponent");
var ReactPerf = require("./ReactPerf");
var ReactPropTypeLocations = require("./ReactPropTypeLocations");
var ReactPropTypeLocationNames = require("./ReactPropTypeLocationNames");
var ReactReconciler = require("./ReactReconciler");
var ReactUpdates = require("./ReactUpdates");

var assign = require("./Object.assign");
var emptyObject = require("./emptyObject");
var invariant = require("./invariant");
var shouldUpdateReactComponent = require("./shouldUpdateReactComponent");
var warning = require("./warning");

function getDeclarationErrorAddendum(component) {
  var owner = component._currentElement._owner || null;
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * ------------------ The Life-Cycle of a Composite Component ------------------
 *
 * - constructor: Initialization of state. The instance is now retained.
 *   - componentWillMount
 *   - render
 *   - [children's constructors]
 *     - [children's componentWillMount and render]
 *     - [children's componentDidMount]
 *     - componentDidMount
 *
 *       Update Phases:
 *       - componentWillReceiveProps (only called if parent updated)
 *       - shouldComponentUpdate
 *         - componentWillUpdate
 *           - render
 *           - [children's constructors or receive props phases]
 *         - componentDidUpdate
 *
 *     - componentWillUnmount
 *     - [children's componentWillUnmount]
 *   - [children destroyed]
 * - (destroyed): The instance is now blank, released by React and ready for GC.
 *
 * -----------------------------------------------------------------------------
 */

/**
 * An incrementing ID assigned to each component when it is mounted. This is
 * used to enforce the order in which `ReactUpdates` updates dirty components.
 *
 * @private
 */
var nextMountID = 1;

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponentMixin = {

  /**
   * Base constructor for all composite component.
   *
   * @param {ReactElement} element
   * @final
   * @internal
   */
  construct: function(element) {
    this._currentElement = element;
    this._rootNodeID = null;
    this._instance = null;

    // See ReactUpdateQueue
    this._pendingElement = null;
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    this._renderedComponent = null;

    this._context = null;
    this._mountOrder = 0;
    this._isTopLevel = false;

    // See ReactUpdates and ReactUpdateQueue.
    this._pendingCallbacks = null;
  },

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function(rootID, transaction, context) {
    this._context = context;
    this._mountOrder = nextMountID++;
    this._rootNodeID = rootID;

    var publicProps = this._processProps(this._currentElement.props);
    var publicContext = this._processContext(this._currentElement._context);

    var Component = ReactNativeComponent.getComponentClassForElement(
      this._currentElement
    );

    // Initialize the public class
    var inst = new Component(publicProps, publicContext);

    if ("production" !== process.env.NODE_ENV) {
      // This will throw later in _renderValidatedComponent, but add an early
      // warning now to help debugging
      ("production" !== process.env.NODE_ENV ? warning(
        inst.render != null,
        '%s(...): No `render` method found on the returned component ' +
        'instance: you may have forgotten to define `render` in your ' +
        'component or you may have accidentally tried to render an element ' +
        'whose type is a function that isn\'t a React component.',
        Component.displayName || Component.name || 'Component'
      ) : null);
    }

    // These should be set up in the constructor, but as a convenience for
    // simpler class abstractions, we set them up after the fact.
    inst.props = publicProps;
    inst.context = publicContext;
    inst.refs = emptyObject;

    this._instance = inst;

    // Store a reference from the instance back to the internal representation
    ReactInstanceMap.set(inst, this);

    if ("production" !== process.env.NODE_ENV) {
      this._warnIfContextsDiffer(this._currentElement._context, context);
    }

    if ("production" !== process.env.NODE_ENV) {
      // Since plain JS classes are defined without any special initialization
      // logic, we can not catch common errors early. Therefore, we have to
      // catch them here, at initialization time, instead.
      ("production" !== process.env.NODE_ENV ? warning(
        !inst.getInitialState ||
        inst.getInitialState.isReactClassApproved,
        'getInitialState was defined on %s, a plain JavaScript class. ' +
        'This is only supported for classes created using React.createClass. ' +
        'Did you mean to define a state property instead?',
        this.getName() || 'a component'
      ) : null);
      ("production" !== process.env.NODE_ENV ? warning(
        !inst.getDefaultProps ||
        inst.getDefaultProps.isReactClassApproved,
        'getDefaultProps was defined on %s, a plain JavaScript class. ' +
        'This is only supported for classes created using React.createClass. ' +
        'Use a static property to define defaultProps instead.',
        this.getName() || 'a component'
      ) : null);
      ("production" !== process.env.NODE_ENV ? warning(
        !inst.propTypes,
        'propTypes was defined as an instance property on %s. Use a static ' +
        'property to define propTypes instead.',
        this.getName() || 'a component'
      ) : null);
      ("production" !== process.env.NODE_ENV ? warning(
        !inst.contextTypes,
        'contextTypes was defined as an instance property on %s. Use a ' +
        'static property to define contextTypes instead.',
        this.getName() || 'a component'
      ) : null);
      ("production" !== process.env.NODE_ENV ? warning(
        typeof inst.componentShouldUpdate !== 'function',
        '%s has a method called ' +
        'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
        'The name is phrased as a question because the function is ' +
        'expected to return a value.',
        (this.getName() || 'A component')
      ) : null);
    }

    var initialState = inst.state;
    if (initialState === undefined) {
      inst.state = initialState = null;
    }
    ("production" !== process.env.NODE_ENV ? invariant(
      typeof initialState === 'object' && !Array.isArray(initialState),
      '%s.state: must be set to an object or null',
      this.getName() || 'ReactCompositeComponent'
    ) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));

    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    var childContext;
    var renderedElement;

    var previouslyMounting = ReactLifeCycle.currentlyMountingInstance;
    ReactLifeCycle.currentlyMountingInstance = this;
    try {
      if (inst.componentWillMount) {
        inst.componentWillMount();
        // When mounting, calls to `setState` by `componentWillMount` will set
        // `this._pendingStateQueue` without triggering a re-render.
        if (this._pendingStateQueue) {
          inst.state = this._processPendingState(inst.props, inst.context);
        }
      }

      childContext = this._getValidatedChildContext(context);
      renderedElement = this._renderValidatedComponent(childContext);
    } finally {
      ReactLifeCycle.currentlyMountingInstance = previouslyMounting;
    }

    this._renderedComponent = this._instantiateReactComponent(
      renderedElement,
      this._currentElement.type // The wrapping type
    );

    var markup = ReactReconciler.mountComponent(
      this._renderedComponent,
      rootID,
      transaction,
      this._mergeChildContext(context, childContext)
    );
    if (inst.componentDidMount) {
      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
    }

    return markup;
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function() {
    var inst = this._instance;

    if (inst.componentWillUnmount) {
      var previouslyUnmounting = ReactLifeCycle.currentlyUnmountingInstance;
      ReactLifeCycle.currentlyUnmountingInstance = this;
      try {
        inst.componentWillUnmount();
      } finally {
        ReactLifeCycle.currentlyUnmountingInstance = previouslyUnmounting;
      }
    }

    ReactReconciler.unmountComponent(this._renderedComponent);
    this._renderedComponent = null;

    // Reset pending fields
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;
    this._pendingCallbacks = null;
    this._pendingElement = null;

    // These fields do not really need to be reset since this object is no
    // longer accessible.
    this._context = null;
    this._rootNodeID = null;

    // Delete the reference from the instance to this internal representation
    // which allow the internals to be properly cleaned up even if the user
    // leaks a reference to the public instance.
    ReactInstanceMap.remove(inst);

    // Some existing components rely on inst.props even after they've been
    // destroyed (in event handlers).
    // TODO: inst.props = null;
    // TODO: inst.state = null;
    // TODO: inst.context = null;
  },

  /**
   * Schedule a partial update to the props. Only used for internal testing.
   *
   * @param {object} partialProps Subset of the next props.
   * @param {?function} callback Called after props are updated.
   * @final
   * @internal
   */
  _setPropsInternal: function(partialProps, callback) {
    // This is a deoptimized path. We optimize for always having an element.
    // This creates an extra internal element.
    var element = this._pendingElement || this._currentElement;
    this._pendingElement = ReactElement.cloneAndReplaceProps(
      element,
      assign({}, element.props, partialProps)
    );
    ReactUpdates.enqueueUpdate(this, callback);
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _maskContext: function(context) {
    var maskedContext = null;
    // This really should be getting the component class for the element,
    // but we know that we're not going to need it for built-ins.
    if (typeof this._currentElement.type === 'string') {
      return emptyObject;
    }
    var contextTypes = this._currentElement.type.contextTypes;
    if (!contextTypes) {
      return emptyObject;
    }
    maskedContext = {};
    for (var contextName in contextTypes) {
      maskedContext[contextName] = context[contextName];
    }
    return maskedContext;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function(context) {
    var maskedContext = this._maskContext(context);
    if ("production" !== process.env.NODE_ENV) {
      var Component = ReactNativeComponent.getComponentClassForElement(
        this._currentElement
      );
      if (Component.contextTypes) {
        this._checkPropTypes(
          Component.contextTypes,
          maskedContext,
          ReactPropTypeLocations.context
        );
      }
    }
    return maskedContext;
  },

  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _getValidatedChildContext: function(currentContext) {
    var inst = this._instance;
    var childContext = inst.getChildContext && inst.getChildContext();
    if (childContext) {
      ("production" !== process.env.NODE_ENV ? invariant(
        typeof inst.constructor.childContextTypes === 'object',
        '%s.getChildContext(): childContextTypes must be defined in order to ' +
        'use getChildContext().',
        this.getName() || 'ReactCompositeComponent'
      ) : invariant(typeof inst.constructor.childContextTypes === 'object'));
      if ("production" !== process.env.NODE_ENV) {
        this._checkPropTypes(
          inst.constructor.childContextTypes,
          childContext,
          ReactPropTypeLocations.childContext
        );
      }
      for (var name in childContext) {
        ("production" !== process.env.NODE_ENV ? invariant(
          name in inst.constructor.childContextTypes,
          '%s.getChildContext(): key "%s" is not defined in childContextTypes.',
          this.getName() || 'ReactCompositeComponent',
          name
        ) : invariant(name in inst.constructor.childContextTypes));
      }
      return childContext;
    }
    return null;
  },

  _mergeChildContext: function(currentContext, childContext) {
    if (childContext) {
      return assign({}, currentContext, childContext);
    }
    return currentContext;
  },

  /**
   * Processes props by setting default values for unspecified props and
   * asserting that the props are valid. Does not mutate its argument; returns
   * a new props object with defaults merged in.
   *
   * @param {object} newProps
   * @return {object}
   * @private
   */
  _processProps: function(newProps) {
    if ("production" !== process.env.NODE_ENV) {
      var Component = ReactNativeComponent.getComponentClassForElement(
        this._currentElement
      );
      if (Component.propTypes) {
        this._checkPropTypes(
          Component.propTypes,
          newProps,
          ReactPropTypeLocations.prop
        );
      }
    }
    return newProps;
  },

  /**
   * Assert that the props are valid
   *
   * @param {object} propTypes Map of prop name to a ReactPropType
   * @param {object} props
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkPropTypes: function(propTypes, props, location) {
    // TODO: Stop validating prop types here and only use the element
    // validation.
    var componentName = this.getName();
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error;
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          ("production" !== process.env.NODE_ENV ? invariant(
            typeof propTypes[propName] === 'function',
            '%s: %s type `%s` is invalid; it must be a function, usually ' +
            'from React.PropTypes.',
            componentName || 'React class',
            ReactPropTypeLocationNames[location],
            propName
          ) : invariant(typeof propTypes[propName] === 'function'));
          error = propTypes[propName](props, propName, componentName, location);
        } catch (ex) {
          error = ex;
        }
        if (error instanceof Error) {
          // We may want to extend this logic for similar errors in
          // React.render calls, so I'm abstracting it away into
          // a function to minimize refactoring in the future
          var addendum = getDeclarationErrorAddendum(this);

          if (location === ReactPropTypeLocations.prop) {
            // Preface gives us something to blacklist in warning module
            ("production" !== process.env.NODE_ENV ? warning(
              false,
              'Failed Composite propType: %s%s',
              error.message,
              addendum
            ) : null);
          } else {
            ("production" !== process.env.NODE_ENV ? warning(
              false,
              'Failed Context Types: %s%s',
              error.message,
              addendum
            ) : null);
          }
        }
      }
    }
  },

  receiveComponent: function(nextElement, transaction, nextContext) {
    var prevElement = this._currentElement;
    var prevContext = this._context;

    this._pendingElement = null;

    this.updateComponent(
      transaction,
      prevElement,
      nextElement,
      prevContext,
      nextContext
    );
  },

  /**
   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
   * is set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function(transaction) {
    if (this._pendingElement != null) {
      ReactReconciler.receiveComponent(
        this,
        this._pendingElement || this._currentElement,
        transaction,
        this._context
      );
    }

    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
      if ("production" !== process.env.NODE_ENV) {
        ReactElementValidator.checkAndWarnForMutatedProps(
          this._currentElement
        );
      }

      this.updateComponent(
        transaction,
        this._currentElement,
        this._currentElement,
        this._context,
        this._context
      );
    }
  },

  /**
   * Compare two contexts, warning if they are different
   * TODO: Remove this check when owner-context is removed
   */
   _warnIfContextsDiffer: function(ownerBasedContext, parentBasedContext) {
    ownerBasedContext = this._maskContext(ownerBasedContext);
    parentBasedContext = this._maskContext(parentBasedContext);
    var parentKeys = Object.keys(parentBasedContext).sort();
    var displayName = this.getName() || 'ReactCompositeComponent';
    for (var i = 0; i < parentKeys.length; i++) {
      var key = parentKeys[i];
      ("production" !== process.env.NODE_ENV ? warning(
        ownerBasedContext[key] === parentBasedContext[key],
        'owner-based and parent-based contexts differ '  +
        '(values: `%s` vs `%s`) for key (%s) while mounting %s ' +
        '(see: http://fb.me/react-context-by-parent)',
        ownerBasedContext[key],
        parentBasedContext[key],
        key,
        displayName
      ) : null);
    }
  },

  /**
   * Perform an update to a mounted component. The componentWillReceiveProps and
   * shouldComponentUpdate methods are called, then (assuming the update isn't
   * skipped) the remaining update lifecycle methods are called and the DOM
   * representation is updated.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevParentElement
   * @param {ReactElement} nextParentElement
   * @internal
   * @overridable
   */
  updateComponent: function(
    transaction,
    prevParentElement,
    nextParentElement,
    prevUnmaskedContext,
    nextUnmaskedContext
  ) {
    var inst = this._instance;

    var nextContext = inst.context;
    var nextProps = inst.props;

    // Distinguish between a props update versus a simple state update
    if (prevParentElement !== nextParentElement) {
      nextContext = this._processContext(nextParentElement._context);
      nextProps = this._processProps(nextParentElement.props);

      if ("production" !== process.env.NODE_ENV) {
        if (nextUnmaskedContext != null) {
          this._warnIfContextsDiffer(
            nextParentElement._context,
            nextUnmaskedContext
          );
        }
      }

      // An update here will schedule an update but immediately set
      // _pendingStateQueue which will ensure that any state updates gets
      // immediately reconciled instead of waiting for the next batch.

      if (inst.componentWillReceiveProps) {
        inst.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    var nextState = this._processPendingState(nextProps, nextContext);

    var shouldUpdate =
      this._pendingForceUpdate ||
      !inst.shouldComponentUpdate ||
      inst.shouldComponentUpdate(nextProps, nextState, nextContext);

    if ("production" !== process.env.NODE_ENV) {
      ("production" !== process.env.NODE_ENV ? warning(
        typeof shouldUpdate !== 'undefined',
        '%s.shouldComponentUpdate(): Returned undefined instead of a ' +
        'boolean value. Make sure to return true or false.',
        this.getName() || 'ReactCompositeComponent'
      ) : null);
    }

    if (shouldUpdate) {
      this._pendingForceUpdate = false;
      // Will set `this.props`, `this.state` and `this.context`.
      this._performComponentUpdate(
        nextParentElement,
        nextProps,
        nextState,
        nextContext,
        transaction,
        nextUnmaskedContext
      );
    } else {
      // If it's determined that a component should not update, we still want
      // to set props and state but we shortcut the rest of the update.
      this._currentElement = nextParentElement;
      this._context = nextUnmaskedContext;
      inst.props = nextProps;
      inst.state = nextState;
      inst.context = nextContext;
    }
  },

  _processPendingState: function(props, context) {
    var inst = this._instance;
    var queue = this._pendingStateQueue;
    var replace = this._pendingReplaceState;
    this._pendingReplaceState = false;
    this._pendingStateQueue = null;

    if (!queue) {
      return inst.state;
    }

    if (replace && queue.length === 1) {
      return queue[0];
    }

    var nextState = assign({}, replace ? queue[0] : inst.state);
    for (var i = replace ? 1 : 0; i < queue.length; i++) {
      var partial = queue[i];
      assign(
        nextState,
        typeof partial === 'function' ?
          partial.call(inst, nextState, props, context) :
          partial
      );
    }

    return nextState;
  },

  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {ReactElement} nextElement Next element
   * @param {object} nextProps Next public object to set as properties.
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextContext Next public object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @param {?object} unmaskedContext
   * @private
   */
  _performComponentUpdate: function(
    nextElement,
    nextProps,
    nextState,
    nextContext,
    transaction,
    unmaskedContext
  ) {
    var inst = this._instance;

    var prevProps = inst.props;
    var prevState = inst.state;
    var prevContext = inst.context;

    if (inst.componentWillUpdate) {
      inst.componentWillUpdate(nextProps, nextState, nextContext);
    }

    this._currentElement = nextElement;
    this._context = unmaskedContext;
    inst.props = nextProps;
    inst.state = nextState;
    inst.context = nextContext;

    this._updateRenderedComponent(transaction, unmaskedContext);

    if (inst.componentDidUpdate) {
      transaction.getReactMountReady().enqueue(
        inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext),
        inst
      );
    }
  },

  /**
   * Call the component's `render` method and update the DOM accordingly.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  _updateRenderedComponent: function(transaction, context) {
    var prevComponentInstance = this._renderedComponent;
    var prevRenderedElement = prevComponentInstance._currentElement;
    var childContext = this._getValidatedChildContext();
    var nextRenderedElement = this._renderValidatedComponent(childContext);
    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
      ReactReconciler.receiveComponent(
        prevComponentInstance,
        nextRenderedElement,
        transaction,
        this._mergeChildContext(context, childContext)
      );
    } else {
      // These two IDs are actually the same! But nothing should rely on that.
      var thisID = this._rootNodeID;
      var prevComponentID = prevComponentInstance._rootNodeID;
      ReactReconciler.unmountComponent(prevComponentInstance);

      this._renderedComponent = this._instantiateReactComponent(
        nextRenderedElement,
        this._currentElement.type
      );
      var nextMarkup = ReactReconciler.mountComponent(
        this._renderedComponent,
        thisID,
        transaction,
        this._mergeChildContext(context, childContext)
      );
      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
    }
  },

  /**
   * @protected
   */
  _replaceNodeWithMarkupByID: function(prevComponentID, nextMarkup) {
    ReactComponentEnvironment.replaceNodeWithMarkupByID(
      prevComponentID,
      nextMarkup
    );
  },

  /**
   * @protected
   */
  _renderValidatedComponentWithoutOwnerOrContext: function() {
    var inst = this._instance;
    var renderedComponent = inst.render();
    if ("production" !== process.env.NODE_ENV) {
      // We allow auto-mocks to proceed as if they're returning null.
      if (typeof renderedComponent === 'undefined' &&
          inst.render._isMockFunction) {
        // This is probably bad practice. Consider warning here and
        // deprecating this convenience.
        renderedComponent = null;
      }
    }

    return renderedComponent;
  },

  /**
   * @private
   */
  _renderValidatedComponent: function(childContext) {
    var renderedComponent;
    var previousContext = ReactContext.current;
    ReactContext.current = this._mergeChildContext(
      this._currentElement._context,
      childContext
    );
    ReactCurrentOwner.current = this;
    try {
      renderedComponent =
        this._renderValidatedComponentWithoutOwnerOrContext();
    } finally {
      ReactContext.current = previousContext;
      ReactCurrentOwner.current = null;
    }
    ("production" !== process.env.NODE_ENV ? invariant(
      // TODO: An `isValidNode` function would probably be more appropriate
      renderedComponent === null || renderedComponent === false ||
      ReactElement.isValidElement(renderedComponent),
      '%s.render(): A valid ReactComponent must be returned. You may have ' +
        'returned undefined, an array or some other invalid object.',
      this.getName() || 'ReactCompositeComponent'
    ) : invariant(// TODO: An `isValidNode` function would probably be more appropriate
    renderedComponent === null || renderedComponent === false ||
    ReactElement.isValidElement(renderedComponent)));
    return renderedComponent;
  },

  /**
   * Lazily allocates the refs object and stores `component` as `ref`.
   *
   * @param {string} ref Reference name.
   * @param {component} component Component to store as `ref`.
   * @final
   * @private
   */
  attachRef: function(ref, component) {
    var inst = this.getPublicInstance();
    var refs = inst.refs === emptyObject ? (inst.refs = {}) : inst.refs;
    refs[ref] = component.getPublicInstance();
  },

  /**
   * Detaches a reference name.
   *
   * @param {string} ref Name to dereference.
   * @final
   * @private
   */
  detachRef: function(ref) {
    var refs = this.getPublicInstance().refs;
    delete refs[ref];
  },

  /**
   * Get a text description of the component that can be used to identify it
   * in error messages.
   * @return {string} The name or null.
   * @internal
   */
  getName: function() {
    var type = this._currentElement.type;
    var constructor = this._instance && this._instance.constructor;
    return (
      type.displayName || (constructor && constructor.displayName) ||
      type.name || (constructor && constructor.name) ||
      null
    );
  },

  /**
   * Get the publicly accessible representation of this component - i.e. what
   * is exposed by refs and returned by React.render. Can be null for stateless
   * components.
   *
   * @return {ReactComponent} the public component instance.
   * @internal
   */
  getPublicInstance: function() {
    return this._instance;
  },

  // Stub
  _instantiateReactComponent: null

};

ReactPerf.measureMethods(
  ReactCompositeComponentMixin,
  'ReactCompositeComponent',
  {
    mountComponent: 'mountComponent',
    updateComponent: 'updateComponent',
    _renderValidatedComponent: '_renderValidatedComponent'
  }
);

var ReactCompositeComponent = {

  Mixin: ReactCompositeComponentMixin

};

module.exports = ReactCompositeComponent;

}).call(this,require('_process'))
},{"./Object.assign":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/Object.assign.js","./ReactComponentEnvironment":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactComponentEnvironment.js","./ReactContext":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactContext.js","./ReactCurrentOwner":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactCurrentOwner.js","./ReactElement":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactElement.js","./ReactElementValidator":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactElementValidator.js","./ReactInstanceMap":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactInstanceMap.js","./ReactLifeCycle":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactLifeCycle.js","./ReactNativeComponent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactNativeComponent.js","./ReactPerf":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactPerf.js","./ReactPropTypeLocationNames":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactPropTypeLocationNames.js","./ReactPropTypeLocations":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactPropTypeLocations.js","./ReactReconciler":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactReconciler.js","./ReactUpdates":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactUpdates.js","./emptyObject":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/emptyObject.js","./invariant":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/invariant.js","./shouldUpdateReactComponent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/shouldUpdateReactComponent.js","./warning":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/warning.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactContext.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactContext
 */

'use strict';

var assign = require("./Object.assign");
var emptyObject = require("./emptyObject");
var warning = require("./warning");

var didWarn = false;

/**
 * Keeps track of the current context.
 *
 * The context is automatically passed down the component ownership hierarchy
 * and is accessible via `this.context` on ReactCompositeComponents.
 */
var ReactContext = {

  /**
   * @internal
   * @type {object}
   */
  current: emptyObject,

  /**
   * Temporarily extends the current context while executing scopedCallback.
   *
   * A typical use case might look like
   *
   *  render: function() {
   *    var children = ReactContext.withContext({foo: 'foo'}, () => (
   *
   *    ));
   *    return <div>{children}</div>;
   *  }
   *
   * @param {object} newContext New context to merge into the existing context
   * @param {function} scopedCallback Callback to run with the new context
   * @return {ReactComponent|array<ReactComponent>}
   */
  withContext: function(newContext, scopedCallback) {
    if ("production" !== process.env.NODE_ENV) {
      ("production" !== process.env.NODE_ENV ? warning(
        didWarn,
        'withContext is deprecated and will be removed in a future version. ' +
        'Use a wrapper component with getChildContext instead.'
      ) : null);

      didWarn = true;
    }

    var result;
    var previousContext = ReactContext.current;
    ReactContext.current = assign({}, previousContext, newContext);
    try {
      result = scopedCallback();
    } finally {
      ReactContext.current = previousContext;
    }
    return result;
  }

};

module.exports = ReactContext;

}).call(this,require('_process'))
},{"./Object.assign":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/Object.assign.js","./emptyObject":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/emptyObject.js","./warning":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/warning.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactCurrentOwner.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCurrentOwner
 */

'use strict';

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 *
 * The depth indicate how many composite components are above this render level.
 */
var ReactCurrentOwner = {

  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null

};

module.exports = ReactCurrentOwner;

},{}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactDOM.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOM
 * @typechecks static-only
 */

'use strict';

var ReactElement = require("./ReactElement");
var ReactElementValidator = require("./ReactElementValidator");

var mapObject = require("./mapObject");

/**
 * Create a factory that creates HTML tag elements.
 *
 * @param {string} tag Tag name (e.g. `div`).
 * @private
 */
function createDOMFactory(tag) {
  if ("production" !== process.env.NODE_ENV) {
    return ReactElementValidator.createFactory(tag);
  }
  return ReactElement.createFactory(tag);
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 * This is also accessible via `React.DOM`.
 *
 * @public
 */
var ReactDOM = mapObject({
  a: 'a',
  abbr: 'abbr',
  address: 'address',
  area: 'area',
  article: 'article',
  aside: 'aside',
  audio: 'audio',
  b: 'b',
  base: 'base',
  bdi: 'bdi',
  bdo: 'bdo',
  big: 'big',
  blockquote: 'blockquote',
  body: 'body',
  br: 'br',
  button: 'button',
  canvas: 'canvas',
  caption: 'caption',
  cite: 'cite',
  code: 'code',
  col: 'col',
  colgroup: 'colgroup',
  data: 'data',
  datalist: 'datalist',
  dd: 'dd',
  del: 'del',
  details: 'details',
  dfn: 'dfn',
  dialog: 'dialog',
  div: 'div',
  dl: 'dl',
  dt: 'dt',
  em: 'em',
  embed: 'embed',
  fieldset: 'fieldset',
  figcaption: 'figcaption',
  figure: 'figure',
  footer: 'footer',
  form: 'form',
  h1: 'h1',
  h2: 'h2',
  h3: 'h3',
  h4: 'h4',
  h5: 'h5',
  h6: 'h6',
  head: 'head',
  header: 'header',
  hr: 'hr',
  html: 'html',
  i: 'i',
  iframe: 'iframe',
  img: 'img',
  input: 'input',
  ins: 'ins',
  kbd: 'kbd',
  keygen: 'keygen',
  label: 'label',
  legend: 'legend',
  li: 'li',
  link: 'link',
  main: 'main',
  map: 'map',
  mark: 'mark',
  menu: 'menu',
  menuitem: 'menuitem',
  meta: 'meta',
  meter: 'meter',
  nav: 'nav',
  noscript: 'noscript',
  object: 'object',
  ol: 'ol',
  optgroup: 'optgroup',
  option: 'option',
  output: 'output',
  p: 'p',
  param: 'param',
  picture: 'picture',
  pre: 'pre',
  progress: 'progress',
  q: 'q',
  rp: 'rp',
  rt: 'rt',
  ruby: 'ruby',
  s: 's',
  samp: 'samp',
  script: 'script',
  section: 'section',
  select: 'select',
  small: 'small',
  source: 'source',
  span: 'span',
  strong: 'strong',
  style: 'style',
  sub: 'sub',
  summary: 'summary',
  sup: 'sup',
  table: 'table',
  tbody: 'tbody',
  td: 'td',
  textarea: 'textarea',
  tfoot: 'tfoot',
  th: 'th',
  thead: 'thead',
  time: 'time',
  title: 'title',
  tr: 'tr',
  track: 'track',
  u: 'u',
  ul: 'ul',
  'var': 'var',
  video: 'video',
  wbr: 'wbr',

  // SVG
  circle: 'circle',
  clipPath: 'clipPath',
  defs: 'defs',
  ellipse: 'ellipse',
  g: 'g',
  line: 'line',
  linearGradient: 'linearGradient',
  mask: 'mask',
  path: 'path',
  pattern: 'pattern',
  polygon: 'polygon',
  polyline: 'polyline',
  radialGradient: 'radialGradient',
  rect: 'rect',
  stop: 'stop',
  svg: 'svg',
  text: 'text',
  tspan: 'tspan'

}, createDOMFactory);

module.exports = ReactDOM;

}).call(this,require('_process'))
},{"./ReactElement":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactElement.js","./ReactElementValidator":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactElementValidator.js","./mapObject":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/mapObject.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactDOMButton.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMButton
 */

'use strict';

var AutoFocusMixin = require("./AutoFocusMixin");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactClass = require("./ReactClass");
var ReactElement = require("./ReactElement");

var keyMirror = require("./keyMirror");

var button = ReactElement.createFactory('button');

var mouseListenerNames = keyMirror({
  onClick: true,
  onDoubleClick: true,
  onMouseDown: true,
  onMouseMove: true,
  onMouseUp: true,
  onClickCapture: true,
  onDoubleClickCapture: true,
  onMouseDownCapture: true,
  onMouseMoveCapture: true,
  onMouseUpCapture: true
});

/**
 * Implements a <button> native component that does not receive mouse events
 * when `disabled` is set.
 */
var ReactDOMButton = ReactClass.createClass({
  displayName: 'ReactDOMButton',
  tagName: 'BUTTON',

  mixins: [AutoFocusMixin, ReactBrowserComponentMixin],

  render: function() {
    var props = {};

    // Copy the props; except the mouse listeners if we're disabled
    for (var key in this.props) {
      if (this.props.hasOwnProperty(key) &&
          (!this.props.disabled || !mouseListenerNames[key])) {
        props[key] = this.props[key];
      }
    }

    return button(props, this.props.children);
  }

});

module.exports = ReactDOMButton;

},{"./AutoFocusMixin":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/AutoFocusMixin.js","./ReactBrowserComponentMixin":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactBrowserComponentMixin.js","./ReactClass":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactClass.js","./ReactElement":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactElement.js","./keyMirror":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/keyMirror.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactDOMComponent.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMComponent
 * @typechecks static-only
 */

/* global hasOwnProperty:true */

'use strict';

var CSSPropertyOperations = require("./CSSPropertyOperations");
var DOMProperty = require("./DOMProperty");
var DOMPropertyOperations = require("./DOMPropertyOperations");
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");
var ReactComponentBrowserEnvironment =
  require("./ReactComponentBrowserEnvironment");
var ReactMount = require("./ReactMount");
var ReactMultiChild = require("./ReactMultiChild");
var ReactPerf = require("./ReactPerf");

var assign = require("./Object.assign");
var escapeTextContentForBrowser = require("./escapeTextContentForBrowser");
var invariant = require("./invariant");
var isEventSupported = require("./isEventSupported");
var keyOf = require("./keyOf");
var warning = require("./warning");

var deleteListener = ReactBrowserEventEmitter.deleteListener;
var listenTo = ReactBrowserEventEmitter.listenTo;
var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = {'string': true, 'number': true};

var STYLE = keyOf({style: null});

var ELEMENT_NODE_TYPE = 1;

/**
 * Optionally injectable operations for mutating the DOM
 */
var BackendIDOperations = null;

/**
 * @param {?object} props
 */
function assertValidProps(props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  if (props.dangerouslySetInnerHTML != null) {
    ("production" !== process.env.NODE_ENV ? invariant(
      props.children == null,
      'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
    ) : invariant(props.children == null));
    ("production" !== process.env.NODE_ENV ? invariant(
      typeof props.dangerouslySetInnerHTML === 'object' &&
      '__html' in props.dangerouslySetInnerHTML,
      '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' +
      'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' +
      'for more information.'
    ) : invariant(typeof props.dangerouslySetInnerHTML === 'object' &&
    '__html' in props.dangerouslySetInnerHTML));
  }
  if ("production" !== process.env.NODE_ENV) {
    ("production" !== process.env.NODE_ENV ? warning(
      props.innerHTML == null,
      'Directly setting property `innerHTML` is not permitted. ' +
      'For more information, lookup documentation on `dangerouslySetInnerHTML`.'
    ) : null);
    ("production" !== process.env.NODE_ENV ? warning(
      !props.contentEditable || props.children == null,
      'A component is `contentEditable` and contains `children` managed by ' +
      'React. It is now your responsibility to guarantee that none of ' +
      'those nodes are unexpectedly modified or duplicated. This is ' +
      'probably not intentional.'
    ) : null);
  }
  ("production" !== process.env.NODE_ENV ? invariant(
    props.style == null || typeof props.style === 'object',
    'The `style` prop expects a mapping from style properties to values, ' +
    'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' +
    'using JSX.'
  ) : invariant(props.style == null || typeof props.style === 'object'));
}

function putListener(id, registrationName, listener, transaction) {
  if ("production" !== process.env.NODE_ENV) {
    // IE8 has no API for event capturing and the `onScroll` event doesn't
    // bubble.
    ("production" !== process.env.NODE_ENV ? warning(
      registrationName !== 'onScroll' || isEventSupported('scroll', true),
      'This browser doesn\'t support the `onScroll` event'
    ) : null);
  }
  var container = ReactMount.findReactContainerForID(id);
  if (container) {
    var doc = container.nodeType === ELEMENT_NODE_TYPE ?
      container.ownerDocument :
      container;
    listenTo(registrationName, doc);
  }
  transaction.getPutListenerQueue().enqueuePutListener(
    id,
    registrationName,
    listener
  );
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special cased tags.

var omittedCloseTags = {
  'area': true,
  'base': true,
  'br': true,
  'col': true,
  'embed': true,
  'hr': true,
  'img': true,
  'input': true,
  'keygen': true,
  'link': true,
  'meta': true,
  'param': true,
  'source': true,
  'track': true,
  'wbr': true
  // NOTE: menuitem's close tag should be omitted, but that causes problems.
};

// We accept any tag to be rendered but since this gets injected into abitrary
// HTML, we want to make sure that it's a safe tag.
// http://www.w3.org/TR/REC-xml/#NT-Name

var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
var validatedTagCache = {};
var hasOwnProperty = {}.hasOwnProperty;

function validateDangerousTag(tag) {
  if (!hasOwnProperty.call(validatedTagCache, tag)) {
    ("production" !== process.env.NODE_ENV ? invariant(VALID_TAG_REGEX.test(tag), 'Invalid tag: %s', tag) : invariant(VALID_TAG_REGEX.test(tag)));
    validatedTagCache[tag] = true;
  }
}

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @constructor ReactDOMComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(tag) {
  validateDangerousTag(tag);
  this._tag = tag;
  this._renderedChildren = null;
  this._previousStyleCopy = null;
  this._rootNodeID = null;
}

ReactDOMComponent.displayName = 'ReactDOMComponent';

ReactDOMComponent.Mixin = {

  construct: function(element) {
    this._currentElement = element;
  },

  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {string} rootID The root DOM ID for this node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} The computed markup.
   */
  mountComponent: function(rootID, transaction, context) {
    this._rootNodeID = rootID;
    assertValidProps(this._currentElement.props);
    var closeTag = omittedCloseTags[this._tag] ? '' : '</' + this._tag + '>';
    return (
      this._createOpenTagMarkupAndPutListeners(transaction) +
      this._createContentMarkup(transaction, context) +
      closeTag
    );
  },

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function(transaction) {
    var props = this._currentElement.props;
    var ret = '<' + this._tag;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules.hasOwnProperty(propKey)) {
        putListener(this._rootNodeID, propKey, propValue, transaction);
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            propValue = this._previousStyleCopy = assign({}, props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
        }
        var markup =
          DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    // For static pages, no need to put React ID and checksum. Saves lots of
    // bytes.
    if (transaction.renderToStaticMarkup) {
      return ret + '>';
    }

    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
    return ret + ' ' + markupForID + '>';
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} context
   * @return {string} Content markup.
   */
  _createContentMarkup: function(transaction, context) {
    var prefix = '';
    if (this._tag === 'listing' ||
        this._tag === 'pre' ||
        this._tag === 'textarea') {
      // Add an initial newline because browsers ignore the first newline in
      // a <listing>, <pre>, or <textarea> as an "authoring convenience" -- see
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody.
      prefix = '\n';
    }

    var props = this._currentElement.props;

    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        return prefix + innerHTML.__html;
      }
    } else {
      var contentToUse =
        CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      if (contentToUse != null) {
        return prefix + escapeTextContentForBrowser(contentToUse);
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(
          childrenToUse,
          transaction,
          context
        );
        return prefix + mountImages.join('');
      }
    }
    return prefix;
  },

  receiveComponent: function(nextElement, transaction, context) {
    var prevElement = this._currentElement;
    this._currentElement = nextElement;
    this.updateComponent(transaction, prevElement, nextElement, context);
  },

  /**
   * Updates a native DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @param {ReactElement} nextElement
   * @internal
   * @overridable
   */
  updateComponent: function(transaction, prevElement, nextElement, context) {
    assertValidProps(this._currentElement.props);
    this._updateDOMProperties(prevElement.props, transaction);
    this._updateDOMChildren(prevElement.props, transaction, context);
  },

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMProperties: function(lastProps, transaction) {
    var nextProps = this._currentElement.props;
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) ||
         !lastProps.hasOwnProperty(propKey)) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = this._previousStyleCopy;
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
        this._previousStyleCopy = null;
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        deleteListener(this._rootNodeID, propKey);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        BackendIDOperations.deletePropertyByID(
          this._rootNodeID,
          propKey
        );
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = propKey === STYLE ?
        this._previousStyleCopy :
        lastProps[propKey];
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          nextProp = this._previousStyleCopy = assign({}, nextProp);
        } else {
          this._previousStyleCopy = null;
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) &&
                (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) &&
                lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        putListener(this._rootNodeID, propKey, nextProp, transaction);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        BackendIDOperations.updatePropertyByID(
          this._rootNodeID,
          propKey,
          nextProp
        );
      }
    }
    if (styleUpdates) {
      BackendIDOperations.updateStylesByID(
        this._rootNodeID,
        styleUpdates
      );
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMChildren: function(lastProps, transaction, context) {
    var nextProps = this._currentElement.props;

    var lastContent =
      CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
    var nextContent =
      CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

    var lastHtml =
      lastProps.dangerouslySetInnerHTML &&
      lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml =
      nextProps.dangerouslySetInnerHTML &&
      nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction, context);
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
    }

    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
      }
    } else if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        BackendIDOperations.updateInnerHTMLByID(
          this._rootNodeID,
          nextHtml
        );
      }
    } else if (nextChildren != null) {
      this.updateChildren(nextChildren, transaction, context);
    }
  },

  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function() {
    this.unmountChildren();
    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
    this._rootNodeID = null;
  }

};

ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
  mountComponent: 'mountComponent',
  updateComponent: 'updateComponent'
});

assign(
  ReactDOMComponent.prototype,
  ReactDOMComponent.Mixin,
  ReactMultiChild.Mixin
);

ReactDOMComponent.injection = {
  injectIDOperations: function(IDOperations) {
    ReactDOMComponent.BackendIDOperations = BackendIDOperations = IDOperations;
  }
};

module.exports = ReactDOMComponent;

}).call(this,require('_process'))
},{"./CSSPropertyOperations":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/CSSPropertyOperations.js","./DOMProperty":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/DOMProperty.js","./DOMPropertyOperations":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/DOMPropertyOperations.js","./Object.assign":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/Object.assign.js","./ReactBrowserEventEmitter":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactBrowserEventEmitter.js","./ReactComponentBrowserEnvironment":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactComponentBrowserEnvironment.js","./ReactMount":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactMount.js","./ReactMultiChild":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactMultiChild.js","./ReactPerf":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactPerf.js","./escapeTextContentForBrowser":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/escapeTextContentForBrowser.js","./invariant":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/invariant.js","./isEventSupported":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/isEventSupported.js","./keyOf":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/keyOf.js","./warning":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/warning.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactDOMForm.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMForm
 */

'use strict';

var EventConstants = require("./EventConstants");
var LocalEventTrapMixin = require("./LocalEventTrapMixin");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactClass = require("./ReactClass");
var ReactElement = require("./ReactElement");

var form = ReactElement.createFactory('form');

/**
 * Since onSubmit doesn't bubble OR capture on the top level in IE8, we need
 * to capture it on the <form> element itself. There are lots of hacks we could
 * do to accomplish this, but the most reliable is to make <form> a
 * composite component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMForm = ReactClass.createClass({
  displayName: 'ReactDOMForm',
  tagName: 'FORM',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    // TODO: Instead of using `ReactDOM` directly, we should use JSX. However,
    // `jshint` fails to parse JSX so in order for linting to work in the open
    // source repo, we need to just use `ReactDOM.form`.
    return form(this.props);
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset');
    this.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit');
  }
});

module.exports = ReactDOMForm;

},{"./EventConstants":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/EventConstants.js","./LocalEventTrapMixin":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/LocalEventTrapMixin.js","./ReactBrowserComponentMixin":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactBrowserComponentMixin.js","./ReactClass":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactClass.js","./ReactElement":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactElement.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactDOMIDOperations.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMIDOperations
 * @typechecks static-only
 */

/*jslint evil: true */

'use strict';

var CSSPropertyOperations = require("./CSSPropertyOperations");
var DOMChildrenOperations = require("./DOMChildrenOperations");
var DOMPropertyOperations = require("./DOMPropertyOperations");
var ReactMount = require("./ReactMount");
var ReactPerf = require("./ReactPerf");

var invariant = require("./invariant");
var setInnerHTML = require("./setInnerHTML");

/**
 * Errors for properties that should not be updated with `updatePropertyById()`.
 *
 * @type {object}
 * @private
 */
var INVALID_PROPERTY_ERRORS = {
  dangerouslySetInnerHTML:
    '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
  style: '`style` must be set using `updateStylesByID()`.'
};

/**
 * Operations used to process updates to DOM nodes. This is made injectable via
 * `ReactDOMComponent.BackendIDOperations`.
 */
var ReactDOMIDOperations = {

  /**
   * Updates a DOM node with new property values. This should only be used to
   * update DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A valid property name, see `DOMProperty`.
   * @param {*} value New value of the property.
   * @internal
   */
  updatePropertyByID: function(id, name, value) {
    var node = ReactMount.getNode(id);
    ("production" !== process.env.NODE_ENV ? invariant(
      !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
      'updatePropertyByID(...): %s',
      INVALID_PROPERTY_ERRORS[name]
    ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));

    // If we're updating to null or undefined, we should remove the property
    // from the DOM node instead of inadvertantly setting to a string. This
    // brings us in line with the same behavior we have on initial render.
    if (value != null) {
      DOMPropertyOperations.setValueForProperty(node, name, value);
    } else {
      DOMPropertyOperations.deleteValueForProperty(node, name);
    }
  },

  /**
   * Updates a DOM node to remove a property. This should only be used to remove
   * DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A property name to remove, see `DOMProperty`.
   * @internal
   */
  deletePropertyByID: function(id, name, value) {
    var node = ReactMount.getNode(id);
    ("production" !== process.env.NODE_ENV ? invariant(
      !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
      'updatePropertyByID(...): %s',
      INVALID_PROPERTY_ERRORS[name]
    ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));
    DOMPropertyOperations.deleteValueForProperty(node, name, value);
  },

  /**
   * Updates a DOM node with new style values. If a value is specified as '',
   * the corresponding style property will be unset.
   *
   * @param {string} id ID of the node to update.
   * @param {object} styles Mapping from styles to values.
   * @internal
   */
  updateStylesByID: function(id, styles) {
    var node = ReactMount.getNode(id);
    CSSPropertyOperations.setValueForStyles(node, styles);
  },

  /**
   * Updates a DOM node's innerHTML.
   *
   * @param {string} id ID of the node to update.
   * @param {string} html An HTML string.
   * @internal
   */
  updateInnerHTMLByID: function(id, html) {
    var node = ReactMount.getNode(id);
    setInnerHTML(node, html);
  },

  /**
   * Updates a DOM node's text content set by `props.content`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} content Text content.
   * @internal
   */
  updateTextContentByID: function(id, content) {
    var node = ReactMount.getNode(id);
    DOMChildrenOperations.updateTextContent(node, content);
  },

  /**
   * Replaces a DOM node that exists in the document with markup.
   *
   * @param {string} id ID of child to be replaced.
   * @param {string} markup Dangerous markup to inject in place of child.
   * @internal
   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
   */
  dangerouslyReplaceNodeWithMarkupByID: function(id, markup) {
    var node = ReactMount.getNode(id);
    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
  },

  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markup List of markup strings.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: function(updates, markup) {
    for (var i = 0; i < updates.length; i++) {
      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
    }
    DOMChildrenOperations.processUpdates(updates, markup);
  }
};

ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
  updatePropertyByID: 'updatePropertyByID',
  deletePropertyByID: 'deletePropertyByID',
  updateStylesByID: 'updateStylesByID',
  updateInnerHTMLByID: 'updateInnerHTMLByID',
  updateTextContentByID: 'updateTextContentByID',
  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
});

module.exports = ReactDOMIDOperations;

}).call(this,require('_process'))
},{"./CSSPropertyOperations":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/CSSPropertyOperations.js","./DOMChildrenOperations":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/DOMChildrenOperations.js","./DOMPropertyOperations":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/DOMPropertyOperations.js","./ReactMount":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactMount.js","./ReactPerf":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactPerf.js","./invariant":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/invariant.js","./setInnerHTML":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/setInnerHTML.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactDOMIframe.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMIframe
 */

'use strict';

var EventConstants = require("./EventConstants");
var LocalEventTrapMixin = require("./LocalEventTrapMixin");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactClass = require("./ReactClass");
var ReactElement = require("./ReactElement");

var iframe = ReactElement.createFactory('iframe');

/**
 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
 * capture it on the <iframe> element itself. There are lots of hacks we could
 * do to accomplish this, but the most reliable is to make <iframe> a composite
 * component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMIframe = ReactClass.createClass({
  displayName: 'ReactDOMIframe',
  tagName: 'IFRAME',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    return iframe(this.props);
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
  }
});

module.exports = ReactDOMIframe;

},{"./EventConstants":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/EventConstants.js","./LocalEventTrapMixin":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/LocalEventTrapMixin.js","./ReactBrowserComponentMixin":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactBrowserComponentMixin.js","./ReactClass":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactClass.js","./ReactElement":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactElement.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactDOMImg.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMImg
 */

'use strict';

var EventConstants = require("./EventConstants");
var LocalEventTrapMixin = require("./LocalEventTrapMixin");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactClass = require("./ReactClass");
var ReactElement = require("./ReactElement");

var img = ReactElement.createFactory('img');

/**
 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
 * capture it on the <img> element itself. There are lots of hacks we could do
 * to accomplish this, but the most reliable is to make <img> a composite
 * component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMImg = ReactClass.createClass({
  displayName: 'ReactDOMImg',
  tagName: 'IMG',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    return img(this.props);
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
    this.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error');
  }
});

module.exports = ReactDOMImg;

},{"./EventConstants":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/EventConstants.js","./LocalEventTrapMixin":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/LocalEventTrapMixin.js","./ReactBrowserComponentMixin":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactBrowserComponentMixin.js","./ReactClass":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactClass.js","./ReactElement":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactElement.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactDOMInput.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMInput
 */

'use strict';

var AutoFocusMixin = require("./AutoFocusMixin");
var DOMPropertyOperations = require("./DOMPropertyOperations");
var LinkedValueUtils = require("./LinkedValueUtils");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactClass = require("./ReactClass");
var ReactElement = require("./ReactElement");
var ReactMount = require("./ReactMount");
var ReactUpdates = require("./ReactUpdates");

var assign = require("./Object.assign");
var invariant = require("./invariant");

var input = ReactElement.createFactory('input');

var instancesByReactID = {};

function forceUpdateIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.forceUpdate();
  }
}

/**
 * Implements an <input> native component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = ReactClass.createClass({
  displayName: 'ReactDOMInput',
  tagName: 'INPUT',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  getInitialState: function() {
    var defaultValue = this.props.defaultValue;
    return {
      initialChecked: this.props.defaultChecked || false,
      initialValue: defaultValue != null ? defaultValue : null
    };
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    props.defaultChecked = null;
    props.defaultValue = null;

    var value = LinkedValueUtils.getValue(this);
    props.value = value != null ? value : this.state.initialValue;

    var checked = LinkedValueUtils.getChecked(this);
    props.checked = checked != null ? checked : this.state.initialChecked;

    props.onChange = this._handleChange;

    return input(props, this.props.children);
  },

  componentDidMount: function() {
    var id = ReactMount.getID(this.getDOMNode());
    instancesByReactID[id] = this;
  },

  componentWillUnmount: function() {
    var rootNode = this.getDOMNode();
    var id = ReactMount.getID(rootNode);
    delete instancesByReactID[id];
  },

  componentDidUpdate: function(prevProps, prevState, prevContext) {
    var rootNode = this.getDOMNode();
    if (this.props.checked != null) {
      DOMPropertyOperations.setValueForProperty(
        rootNode,
        'checked',
        this.props.checked || false
      );
    }

    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }
    // Here we use asap to wait until all updates have propagated, which
    // is important when using controlled components within layers:
    // https://github.com/facebook/react/issues/1698
    ReactUpdates.asap(forceUpdateIfMounted, this);

    var name = this.props.name;
    if (this.props.type === 'radio' && name != null) {
      var rootNode = this.getDOMNode();
      var queryRoot = rootNode;

      while (queryRoot.parentNode) {
        queryRoot = queryRoot.parentNode;
      }

      // If `rootNode.form` was non-null, then we could try `form.elements`,
      // but that sometimes behaves strangely in IE8. We could also try using
      // `form.getElementsByName`, but that will only return direct children
      // and won't include inputs that use the HTML5 `form=` attribute. Since
      // the input might not even be in a form, let's just use the global
      // `querySelectorAll` to ensure we don't miss anything.
      var group = queryRoot.querySelectorAll(
        'input[name=' + JSON.stringify('' + name) + '][type="radio"]');

      for (var i = 0, groupLen = group.length; i < groupLen; i++) {
        var otherNode = group[i];
        if (otherNode === rootNode ||
            otherNode.form !== rootNode.form) {
          continue;
        }
        var otherID = ReactMount.getID(otherNode);
        ("production" !== process.env.NODE_ENV ? invariant(
          otherID,
          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +
          'same `name` is not supported.'
        ) : invariant(otherID));
        var otherInstance = instancesByReactID[otherID];
        ("production" !== process.env.NODE_ENV ? invariant(
          otherInstance,
          'ReactDOMInput: Unknown radio button ID %s.',
          otherID
        ) : invariant(otherInstance));
        // If this is a controlled radio button group, forcing the input that
        // was previously checked to update will cause it to be come re-checked
        // as appropriate.
        ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
      }
    }

    return returnValue;
  }

});

module.exports = ReactDOMInput;

}).call(this,require('_process'))
},{"./AutoFocusMixin":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/AutoFocusMixin.js","./DOMPropertyOperations":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/DOMPropertyOperations.js","./LinkedValueUtils":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/LinkedValueUtils.js","./Object.assign":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/Object.assign.js","./ReactBrowserComponentMixin":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactBrowserComponentMixin.js","./ReactClass":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactClass.js","./ReactElement":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactElement.js","./ReactMount":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactMount.js","./ReactUpdates":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactUpdates.js","./invariant":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/invariant.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactDOMOption.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMOption
 */

'use strict';

var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactClass = require("./ReactClass");
var ReactElement = require("./ReactElement");

var warning = require("./warning");

var option = ReactElement.createFactory('option');

/**
 * Implements an <option> native component that warns when `selected` is set.
 */
var ReactDOMOption = ReactClass.createClass({
  displayName: 'ReactDOMOption',
  tagName: 'OPTION',

  mixins: [ReactBrowserComponentMixin],

  componentWillMount: function() {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if ("production" !== process.env.NODE_ENV) {
      ("production" !== process.env.NODE_ENV ? warning(
        this.props.selected == null,
        'Use the `defaultValue` or `value` props on <select> instead of ' +
        'setting `selected` on <option>.'
      ) : null);
    }
  },

  render: function() {
    return option(this.props, this.props.children);
  }

});

module.exports = ReactDOMOption;

}).call(this,require('_process'))
},{"./ReactBrowserComponentMixin":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactBrowserComponentMixin.js","./ReactClass":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactClass.js","./ReactElement":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactElement.js","./warning":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/warning.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactDOMSelect.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelect
 */

'use strict';

var AutoFocusMixin = require("./AutoFocusMixin");
var LinkedValueUtils = require("./LinkedValueUtils");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactClass = require("./ReactClass");
var ReactElement = require("./ReactElement");
var ReactUpdates = require("./ReactUpdates");

var assign = require("./Object.assign");

var select = ReactElement.createFactory('select');

function updateOptionsIfPendingUpdateAndMounted() {
  /*jshint validthis:true */
  if (this._pendingUpdate) {
    this._pendingUpdate = false;
    var value = LinkedValueUtils.getValue(this);
    if (value != null && this.isMounted()) {
      updateOptions(this, value);
    }
  }
}

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function selectValueType(props, propName, componentName) {
  if (props[propName] == null) {
    return null;
  }
  if (props.multiple) {
    if (!Array.isArray(props[propName])) {
      return new Error(
        ("The `" + propName + "` prop supplied to <select> must be an array if ") +
        ("`multiple` is true.")
      );
    }
  } else {
    if (Array.isArray(props[propName])) {
      return new Error(
        ("The `" + propName + "` prop supplied to <select> must be a scalar ") +
        ("value if `multiple` is false.")
      );
    }
  }
}

/**
 * @param {ReactComponent} component Instance of ReactDOMSelect
 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
 * @private
 */
function updateOptions(component, propValue) {
  var selectedValue, i, l;
  var options = component.getDOMNode().options;

  if (component.props.multiple) {
    selectedValue = {};
    for (i = 0, l = propValue.length; i < l; i++) {
      selectedValue['' + propValue[i]] = true;
    }
    for (i = 0, l = options.length; i < l; i++) {
      var selected = selectedValue.hasOwnProperty(options[i].value);
      if (options[i].selected !== selected) {
        options[i].selected = selected;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    selectedValue = '' + propValue;
    for (i = 0, l = options.length; i < l; i++) {
      if (options[i].value === selectedValue) {
        options[i].selected = true;
        return;
      }
    }
    if (options.length) {
      options[0].selected = true;
    }
  }
}

/**
 * Implements a <select> native component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = ReactClass.createClass({
  displayName: 'ReactDOMSelect',
  tagName: 'SELECT',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  propTypes: {
    defaultValue: selectValueType,
    value: selectValueType
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    props.onChange = this._handleChange;
    props.value = null;

    return select(props, this.props.children);
  },

  componentWillMount: function() {
    this._pendingUpdate = false;
  },

  componentDidMount: function() {
    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      updateOptions(this, value);
    } else if (this.props.defaultValue != null) {
      updateOptions(this, this.props.defaultValue);
    }
  },

  componentDidUpdate: function(prevProps) {
    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      this._pendingUpdate = false;
      updateOptions(this, value);
    } else if (!prevProps.multiple !== !this.props.multiple) {
      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
      if (this.props.defaultValue != null) {
        updateOptions(this, this.props.defaultValue);
      } else {
        // Revert the select back to its default unselected state.
        updateOptions(this, this.props.multiple ? [] : '');
      }
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }

    this._pendingUpdate = true;
    ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
    return returnValue;
  }

});

module.exports = ReactDOMSelect;

},{"./AutoFocusMixin":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/AutoFocusMixin.js","./LinkedValueUtils":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/LinkedValueUtils.js","./Object.assign":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/Object.assign.js","./ReactBrowserComponentMixin":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactBrowserComponentMixin.js","./ReactClass":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactClass.js","./ReactElement":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactElement.js","./ReactUpdates":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactUpdates.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactDOMSelection.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelection
 */

'use strict';

var ExecutionEnvironment = require("./ExecutionEnvironment");

var getNodeForCharacterOffset = require("./getNodeForCharacterOffset");
var getTextContentAccessor = require("./getTextContentAccessor");

/**
 * While `isCollapsed` is available on the Selection object and `collapsed`
 * is available on the Range object, IE11 sometimes gets them wrong.
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
 */
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
  return anchorNode === focusNode && anchorOffset === focusOffset;
}

/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return {
    start: startOffset,
    end: endOffset
  };
}

/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);

  // If the node and offset values are the same, the selection is collapsed.
  // `Selection.isCollapsed` is available natively, but IE sometimes gets
  // this value wrong.
  var isSelectionCollapsed = isCollapsed(
    selection.anchorNode,
    selection.anchorOffset,
    selection.focusNode,
    selection.focusOffset
  );

  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var isTempRangeCollapsed = isCollapsed(
    tempRange.startContainer,
    tempRange.startOffset,
    tempRange.endContainer,
    tempRange.endOffset
  );

  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;

  return {
    start: isBackward ? end : start,
    end: isBackward ? start : end
  };
}

/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (typeof offsets.end === 'undefined') {
    start = offsets.start;
    end = start;
  } else if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;
  } else {
    start = offsets.start;
    end = offsets.end;
  }

  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = typeof offsets.end === 'undefined' ?
            start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

var useIEOffsets = (
  ExecutionEnvironment.canUseDOM &&
  'selection' in document &&
  !('getSelection' in window)
);

var ReactDOMSelection = {
  /**
   * @param {DOMElement} node
   */
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
};

module.exports = ReactDOMSelection;

},{"./ExecutionEnvironment":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ExecutionEnvironment.js","./getNodeForCharacterOffset":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/getNodeForCharacterOffset.js","./getTextContentAccessor":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/getTextContentAccessor.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactDOMTextComponent.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTextComponent
 * @typechecks static-only
 */

'use strict';

var DOMPropertyOperations = require("./DOMPropertyOperations");
var ReactComponentBrowserEnvironment =
  require("./ReactComponentBrowserEnvironment");
var ReactDOMComponent = require("./ReactDOMComponent");

var assign = require("./Object.assign");
var escapeTextContentForBrowser = require("./escapeTextContentForBrowser");

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings in elements so that they can undergo
 * the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactDOMTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactDOMTextComponent = function(props) {
  // This constructor and its argument is currently used by mocks.
};

assign(ReactDOMTextComponent.prototype, {

  /**
   * @param {ReactText} text
   * @internal
   */
  construct: function(text) {
    // TODO: This is really a ReactText (ReactNode), not a ReactElement
    this._currentElement = text;
    this._stringText = '' + text;

    // Properties
    this._rootNodeID = null;
    this._mountIndex = 0;
  },

  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function(rootID, transaction, context) {
    this._rootNodeID = rootID;
    var escapedText = escapeTextContentForBrowser(this._stringText);

    if (transaction.renderToStaticMarkup) {
      // Normally we'd wrap this in a `span` for the reasons stated above, but
      // since this is a situation where React won't take over (static pages),
      // we can simply return the text as it is.
      return escapedText;
    }

    return (
      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +
        escapedText +
      '</span>'
    );
  },

  /**
   * Updates this component by updating the text content.
   *
   * @param {ReactText} nextText The next text content
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function(nextText, transaction) {
    if (nextText !== this._currentElement) {
      this._currentElement = nextText;
      var nextStringText = '' + nextText;
      if (nextStringText !== this._stringText) {
        // TODO: Save this as pending props and use performUpdateIfNecessary
        // and/or updateComponent to do the actual update for consistency with
        // other component types?
        this._stringText = nextStringText;
        ReactDOMComponent.BackendIDOperations.updateTextContentByID(
          this._rootNodeID,
          nextStringText
        );
      }
    }
  },

  unmountComponent: function() {
    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
  }

});

module.exports = ReactDOMTextComponent;

},{"./DOMPropertyOperations":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/DOMPropertyOperations.js","./Object.assign":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/Object.assign.js","./ReactComponentBrowserEnvironment":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactComponentBrowserEnvironment.js","./ReactDOMComponent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactDOMComponent.js","./escapeTextContentForBrowser":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/escapeTextContentForBrowser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactDOMTextarea.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTextarea
 */

'use strict';

var AutoFocusMixin = require("./AutoFocusMixin");
var DOMPropertyOperations = require("./DOMPropertyOperations");
var LinkedValueUtils = require("./LinkedValueUtils");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactClass = require("./ReactClass");
var ReactElement = require("./ReactElement");
var ReactUpdates = require("./ReactUpdates");

var assign = require("./Object.assign");
var invariant = require("./invariant");

var warning = require("./warning");

var textarea = ReactElement.createFactory('textarea');

function forceUpdateIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.forceUpdate();
  }
}

/**
 * Implements a <textarea> native component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = ReactClass.createClass({
  displayName: 'ReactDOMTextarea',
  tagName: 'TEXTAREA',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  getInitialState: function() {
    var defaultValue = this.props.defaultValue;
    // TODO (yungsters): Remove support for children content in <textarea>.
    var children = this.props.children;
    if (children != null) {
      if ("production" !== process.env.NODE_ENV) {
        ("production" !== process.env.NODE_ENV ? warning(
          false,
          'Use the `defaultValue` or `value` props instead of setting ' +
          'children on <textarea>.'
        ) : null);
      }
      ("production" !== process.env.NODE_ENV ? invariant(
        defaultValue == null,
        'If you supply `defaultValue` on a <textarea>, do not pass children.'
      ) : invariant(defaultValue == null));
      if (Array.isArray(children)) {
        ("production" !== process.env.NODE_ENV ? invariant(
          children.length <= 1,
          '<textarea> can only have at most one child.'
        ) : invariant(children.length <= 1));
        children = children[0];
      }

      defaultValue = '' + children;
    }
    if (defaultValue == null) {
      defaultValue = '';
    }
    var value = LinkedValueUtils.getValue(this);
    return {
      // We save the initial value so that `ReactDOMComponent` doesn't update
      // `textContent` (unnecessary since we update value).
      // The initial value can be a boolean or object so that's why it's
      // forced to be a string.
      initialValue: '' + (value != null ? value : defaultValue)
    };
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    ("production" !== process.env.NODE_ENV ? invariant(
      props.dangerouslySetInnerHTML == null,
      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'
    ) : invariant(props.dangerouslySetInnerHTML == null));

    props.defaultValue = null;
    props.value = null;
    props.onChange = this._handleChange;

    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.
    return textarea(props, this.state.initialValue);
  },

  componentDidUpdate: function(prevProps, prevState, prevContext) {
    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      var rootNode = this.getDOMNode();
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }
    ReactUpdates.asap(forceUpdateIfMounted, this);
    return returnValue;
  }

});

module.exports = ReactDOMTextarea;

}).call(this,require('_process'))
},{"./AutoFocusMixin":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/AutoFocusMixin.js","./DOMPropertyOperations":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/DOMPropertyOperations.js","./LinkedValueUtils":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/LinkedValueUtils.js","./Object.assign":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/Object.assign.js","./ReactBrowserComponentMixin":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactBrowserComponentMixin.js","./ReactClass":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactClass.js","./ReactElement":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactElement.js","./ReactUpdates":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactUpdates.js","./invariant":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/invariant.js","./warning":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/warning.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactDefaultBatchingStrategy.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultBatchingStrategy
 */

'use strict';

var ReactUpdates = require("./ReactUpdates");
var Transaction = require("./Transaction");

var assign = require("./Object.assign");
var emptyFunction = require("./emptyFunction");

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function() {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

assign(
  ReactDefaultBatchingStrategyTransaction.prototype,
  Transaction.Mixin,
  {
    getTransactionWrappers: function() {
      return TRANSACTION_WRAPPERS;
    }
  }
);

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function(callback, a, b, c, d) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      callback(a, b, c, d);
    } else {
      transaction.perform(callback, null, a, b, c, d);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;

},{"./Object.assign":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/Object.assign.js","./ReactUpdates":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactUpdates.js","./Transaction":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/Transaction.js","./emptyFunction":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/emptyFunction.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactDefaultInjection.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultInjection
 */

'use strict';

var BeforeInputEventPlugin = require("./BeforeInputEventPlugin");
var ChangeEventPlugin = require("./ChangeEventPlugin");
var ClientReactRootIndex = require("./ClientReactRootIndex");
var DefaultEventPluginOrder = require("./DefaultEventPluginOrder");
var EnterLeaveEventPlugin = require("./EnterLeaveEventPlugin");
var ExecutionEnvironment = require("./ExecutionEnvironment");
var HTMLDOMPropertyConfig = require("./HTMLDOMPropertyConfig");
var MobileSafariClickEventPlugin = require("./MobileSafariClickEventPlugin");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactClass = require("./ReactClass");
var ReactComponentBrowserEnvironment =
  require("./ReactComponentBrowserEnvironment");
var ReactDefaultBatchingStrategy = require("./ReactDefaultBatchingStrategy");
var ReactDOMComponent = require("./ReactDOMComponent");
var ReactDOMButton = require("./ReactDOMButton");
var ReactDOMForm = require("./ReactDOMForm");
var ReactDOMImg = require("./ReactDOMImg");
var ReactDOMIDOperations = require("./ReactDOMIDOperations");
var ReactDOMIframe = require("./ReactDOMIframe");
var ReactDOMInput = require("./ReactDOMInput");
var ReactDOMOption = require("./ReactDOMOption");
var ReactDOMSelect = require("./ReactDOMSelect");
var ReactDOMTextarea = require("./ReactDOMTextarea");
var ReactDOMTextComponent = require("./ReactDOMTextComponent");
var ReactElement = require("./ReactElement");
var ReactEventListener = require("./ReactEventListener");
var ReactInjection = require("./ReactInjection");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactMount = require("./ReactMount");
var ReactReconcileTransaction = require("./ReactReconcileTransaction");
var SelectEventPlugin = require("./SelectEventPlugin");
var ServerReactRootIndex = require("./ServerReactRootIndex");
var SimpleEventPlugin = require("./SimpleEventPlugin");
var SVGDOMPropertyConfig = require("./SVGDOMPropertyConfig");

var createFullPageComponent = require("./createFullPageComponent");

function autoGenerateWrapperClass(type) {
  return ReactClass.createClass({
    tagName: type.toUpperCase(),
    render: function() {
      return new ReactElement(
        type,
        null,
        null,
        null,
        null,
        this.props
      );
    }
  });
}

function inject() {
  ReactInjection.EventEmitter.injectReactEventListener(
    ReactEventListener
  );

  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
  ReactInjection.EventPluginHub.injectMount(ReactMount);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,
    SelectEventPlugin: SelectEventPlugin,
    BeforeInputEventPlugin: BeforeInputEventPlugin
  });

  ReactInjection.NativeComponent.injectGenericComponentClass(
    ReactDOMComponent
  );

  ReactInjection.NativeComponent.injectTextComponentClass(
    ReactDOMTextComponent
  );

  ReactInjection.NativeComponent.injectAutoWrapper(
    autoGenerateWrapperClass
  );

  // This needs to happen before createFullPageComponent() otherwise the mixin
  // won't be included.
  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);

  ReactInjection.NativeComponent.injectComponentClasses({
    'button': ReactDOMButton,
    'form': ReactDOMForm,
    'iframe': ReactDOMIframe,
    'img': ReactDOMImg,
    'input': ReactDOMInput,
    'option': ReactDOMOption,
    'select': ReactDOMSelect,
    'textarea': ReactDOMTextarea,

    'html': createFullPageComponent('html'),
    'head': createFullPageComponent('head'),
    'body': createFullPageComponent('body')
  });

  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

  ReactInjection.Updates.injectReconcileTransaction(
    ReactReconcileTransaction
  );
  ReactInjection.Updates.injectBatchingStrategy(
    ReactDefaultBatchingStrategy
  );

  ReactInjection.RootIndex.injectCreateReactRootIndex(
    ExecutionEnvironment.canUseDOM ?
      ClientReactRootIndex.createReactRootIndex :
      ServerReactRootIndex.createReactRootIndex
  );

  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
  ReactInjection.DOMComponent.injectIDOperations(ReactDOMIDOperations);

  if ("production" !== process.env.NODE_ENV) {
    var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';
    if ((/[?&]react_perf\b/).test(url)) {
      var ReactDefaultPerf = require("./ReactDefaultPerf");
      ReactDefaultPerf.start();
    }
  }
}

module.exports = {
  inject: inject
};

}).call(this,require('_process'))
},{"./BeforeInputEventPlugin":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/BeforeInputEventPlugin.js","./ChangeEventPlugin":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ChangeEventPlugin.js","./ClientReactRootIndex":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ClientReactRootIndex.js","./DefaultEventPluginOrder":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/DefaultEventPluginOrder.js","./EnterLeaveEventPlugin":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/EnterLeaveEventPlugin.js","./ExecutionEnvironment":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ExecutionEnvironment.js","./HTMLDOMPropertyConfig":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/HTMLDOMPropertyConfig.js","./MobileSafariClickEventPlugin":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/MobileSafariClickEventPlugin.js","./ReactBrowserComponentMixin":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactBrowserComponentMixin.js","./ReactClass":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactClass.js","./ReactComponentBrowserEnvironment":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactComponentBrowserEnvironment.js","./ReactDOMButton":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactDOMButton.js","./ReactDOMComponent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactDOMComponent.js","./ReactDOMForm":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactDOMForm.js","./ReactDOMIDOperations":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactDOMIDOperations.js","./ReactDOMIframe":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactDOMIframe.js","./ReactDOMImg":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactDOMImg.js","./ReactDOMInput":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactDOMInput.js","./ReactDOMOption":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactDOMOption.js","./ReactDOMSelect":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactDOMSelect.js","./ReactDOMTextComponent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactDOMTextComponent.js","./ReactDOMTextarea":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactDOMTextarea.js","./ReactDefaultBatchingStrategy":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactDefaultBatchingStrategy.js","./ReactDefaultPerf":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactDefaultPerf.js","./ReactElement":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactElement.js","./ReactEventListener":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactEventListener.js","./ReactInjection":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactInjection.js","./ReactInstanceHandles":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactInstanceHandles.js","./ReactMount":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactMount.js","./ReactReconcileTransaction":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactReconcileTransaction.js","./SVGDOMPropertyConfig":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/SVGDOMPropertyConfig.js","./SelectEventPlugin":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/SelectEventPlugin.js","./ServerReactRootIndex":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ServerReactRootIndex.js","./SimpleEventPlugin":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/SimpleEventPlugin.js","./createFullPageComponent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/createFullPageComponent.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactDefaultPerf.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerf
 * @typechecks static-only
 */

'use strict';

var DOMProperty = require("./DOMProperty");
var ReactDefaultPerfAnalysis = require("./ReactDefaultPerfAnalysis");
var ReactMount = require("./ReactMount");
var ReactPerf = require("./ReactPerf");

var performanceNow = require("./performanceNow");

function roundFloat(val) {
  return Math.floor(val * 100) / 100;
}

function addValue(obj, key, val) {
  obj[key] = (obj[key] || 0) + val;
}

var ReactDefaultPerf = {
  _allMeasurements: [], // last item in the list is the current one
  _mountStack: [0],
  _injected: false,

  start: function() {
    if (!ReactDefaultPerf._injected) {
      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
    }

    ReactDefaultPerf._allMeasurements.length = 0;
    ReactPerf.enableMeasure = true;
  },

  stop: function() {
    ReactPerf.enableMeasure = false;
  },

  getLastMeasurements: function() {
    return ReactDefaultPerf._allMeasurements;
  },

  printExclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Component class name': item.componentName,
        'Total inclusive time (ms)': roundFloat(item.inclusive),
        'Exclusive mount time (ms)': roundFloat(item.exclusive),
        'Exclusive render time (ms)': roundFloat(item.render),
        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
        'Render time per instance (ms)': roundFloat(item.render / item.count),
        'Instances': item.count
      };
    }));
    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
    // number.
  },

  printInclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Owner > component': item.componentName,
        'Inclusive time (ms)': roundFloat(item.time),
        'Instances': item.count
      };
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  getMeasurementsSummaryMap: function(measurements) {
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(
      measurements,
      true
    );
    return summary.map(function(item) {
      return {
        'Owner > component': item.componentName,
        'Wasted time (ms)': item.time,
        'Instances': item.count
      };
    });
  },

  printWasted: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  printDOM: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
    console.table(summary.map(function(item) {
      var result = {};
      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
      result['type'] = item.type;
      result['args'] = JSON.stringify(item.args);
      return result;
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  _recordWrite: function(id, fnName, totalTime, args) {
    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
    var writes =
      ReactDefaultPerf
        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]
        .writes;
    writes[id] = writes[id] || [];
    writes[id].push({
      type: fnName,
      time: totalTime,
      args: args
    });
  },

  measure: function(moduleName, fnName, func) {
    return function() {for (var args=[],$__0=0,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
      var totalTime;
      var rv;
      var start;

      if (fnName === '_renderNewRootComponent' ||
          fnName === 'flushBatchedUpdates') {
        // A "measurement" is a set of metrics recorded for each flush. We want
        // to group the metrics for a given flush together so we can look at the
        // components that rendered and the DOM operations that actually
        // happened to determine the amount of "wasted work" performed.
        ReactDefaultPerf._allMeasurements.push({
          exclusive: {},
          inclusive: {},
          render: {},
          counts: {},
          writes: {},
          displayNames: {},
          totalTime: 0
        });
        start = performanceNow();
        rv = func.apply(this, args);
        ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ].totalTime = performanceNow() - start;
        return rv;
      } else if (fnName === '_mountImageIntoNode' ||
          moduleName === 'ReactDOMIDOperations') {
        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (fnName === '_mountImageIntoNode') {
          var mountID = ReactMount.getID(args[1]);
          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
          // special format
          args[0].forEach(function(update) {
            var writeArgs = {};
            if (update.fromIndex !== null) {
              writeArgs.fromIndex = update.fromIndex;
            }
            if (update.toIndex !== null) {
              writeArgs.toIndex = update.toIndex;
            }
            if (update.textContent !== null) {
              writeArgs.textContent = update.textContent;
            }
            if (update.markupIndex !== null) {
              writeArgs.markup = args[1][update.markupIndex];
            }
            ReactDefaultPerf._recordWrite(
              update.parentID,
              update.type,
              totalTime,
              writeArgs
            );
          });
        } else {
          // basic format
          ReactDefaultPerf._recordWrite(
            args[0],
            fnName,
            totalTime,
            Array.prototype.slice.call(args, 1)
          );
        }
        return rv;
      } else if (moduleName === 'ReactCompositeComponent' && (
        (// TODO: receiveComponent()?
        (fnName === 'mountComponent' ||
        fnName === 'updateComponent' || fnName === '_renderValidatedComponent')))) {

        if (typeof this._currentElement.type === 'string') {
          return func.apply(this, args);
        }

        var rootNodeID = fnName === 'mountComponent' ?
          args[0] :
          this._rootNodeID;
        var isRender = fnName === '_renderValidatedComponent';
        var isMount = fnName === 'mountComponent';

        var mountStack = ReactDefaultPerf._mountStack;
        var entry = ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ];

        if (isRender) {
          addValue(entry.counts, rootNodeID, 1);
        } else if (isMount) {
          mountStack.push(0);
        }

        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (isRender) {
          addValue(entry.render, rootNodeID, totalTime);
        } else if (isMount) {
          var subMountTime = mountStack.pop();
          mountStack[mountStack.length - 1] += totalTime;
          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
          addValue(entry.inclusive, rootNodeID, totalTime);
        } else {
          addValue(entry.inclusive, rootNodeID, totalTime);
        }

        entry.displayNames[rootNodeID] = {
          current: this.getName(),
          owner: this._currentElement._owner ?
            this._currentElement._owner.getName() :
            '<root>'
        };

        return rv;
      } else {
        return func.apply(this, args);
      }
    };
  }
};

module.exports = ReactDefaultPerf;

},{"./DOMProperty":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/DOMProperty.js","./ReactDefaultPerfAnalysis":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactDefaultPerfAnalysis.js","./ReactMount":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactMount.js","./ReactPerf":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactPerf.js","./performanceNow":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/performanceNow.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactDefaultPerfAnalysis.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerfAnalysis
 */

var assign = require("./Object.assign");

// Don't try to save users less than 1.2ms (a number I made up)
var DONT_CARE_THRESHOLD = 1.2;
var DOM_OPERATION_TYPES = {
  '_mountImageIntoNode': 'set innerHTML',
  INSERT_MARKUP: 'set innerHTML',
  MOVE_EXISTING: 'move',
  REMOVE_NODE: 'remove',
  TEXT_CONTENT: 'set textContent',
  'updatePropertyByID': 'update attribute',
  'deletePropertyByID': 'delete attribute',
  'updateStylesByID': 'update styles',
  'updateInnerHTMLByID': 'set innerHTML',
  'dangerouslyReplaceNodeWithMarkupByID': 'replace'
};

function getTotalTime(measurements) {
  // TODO: return number of DOM ops? could be misleading.
  // TODO: measure dropped frames after reconcile?
  // TODO: log total time of each reconcile and the top-level component
  // class that triggered it.
  var totalTime = 0;
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    totalTime += measurement.totalTime;
  }
  return totalTime;
}

function getDOMSummary(measurements) {
  var items = [];
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var id;

    for (id in measurement.writes) {
      measurement.writes[id].forEach(function(write) {
        items.push({
          id: id,
          type: DOM_OPERATION_TYPES[write.type] || write.type,
          args: write.args
        });
      });
    }
  }
  return items;
}

function getExclusiveSummary(measurements) {
  var candidates = {};
  var displayName;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign(
      {},
      measurement.exclusive,
      measurement.inclusive
    );

    for (var id in allIDs) {
      displayName = measurement.displayNames[id].current;

      candidates[displayName] = candidates[displayName] || {
        componentName: displayName,
        inclusive: 0,
        exclusive: 0,
        render: 0,
        count: 0
      };
      if (measurement.render[id]) {
        candidates[displayName].render += measurement.render[id];
      }
      if (measurement.exclusive[id]) {
        candidates[displayName].exclusive += measurement.exclusive[id];
      }
      if (measurement.inclusive[id]) {
        candidates[displayName].inclusive += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[displayName].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (displayName in candidates) {
    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[displayName]);
    }
  }

  arr.sort(function(a, b) {
    return b.exclusive - a.exclusive;
  });

  return arr;
}

function getInclusiveSummary(measurements, onlyClean) {
  var candidates = {};
  var inclusiveKey;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign(
      {},
      measurement.exclusive,
      measurement.inclusive
    );
    var cleanComponents;

    if (onlyClean) {
      cleanComponents = getUnchangedComponents(measurement);
    }

    for (var id in allIDs) {
      if (onlyClean && !cleanComponents[id]) {
        continue;
      }

      var displayName = measurement.displayNames[id];

      // Inclusive time is not useful for many components without knowing where
      // they are instantiated. So we aggregate inclusive time with both the
      // owner and current displayName as the key.
      inclusiveKey = displayName.owner + ' > ' + displayName.current;

      candidates[inclusiveKey] = candidates[inclusiveKey] || {
        componentName: inclusiveKey,
        time: 0,
        count: 0
      };

      if (measurement.inclusive[id]) {
        candidates[inclusiveKey].time += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[inclusiveKey].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (inclusiveKey in candidates) {
    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[inclusiveKey]);
    }
  }

  arr.sort(function(a, b) {
    return b.time - a.time;
  });

  return arr;
}

function getUnchangedComponents(measurement) {
  // For a given reconcile, look at which components did not actually
  // render anything to the DOM and return a mapping of their ID to
  // the amount of time it took to render the entire subtree.
  var cleanComponents = {};
  var dirtyLeafIDs = Object.keys(measurement.writes);
  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

  for (var id in allIDs) {
    var isDirty = false;
    // For each component that rendered, see if a component that triggered
    // a DOM op is in its subtree.
    for (var i = 0; i < dirtyLeafIDs.length; i++) {
      if (dirtyLeafIDs[i].indexOf(id) === 0) {
        isDirty = true;
        break;
      }
    }
    if (!isDirty && measurement.counts[id] > 0) {
      cleanComponents[id] = true;
    }
  }
  return cleanComponents;
}

var ReactDefaultPerfAnalysis = {
  getExclusiveSummary: getExclusiveSummary,
  getInclusiveSummary: getInclusiveSummary,
  getDOMSummary: getDOMSummary,
  getTotalTime: getTotalTime
};

module.exports = ReactDefaultPerfAnalysis;

},{"./Object.assign":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/Object.assign.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactElement.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElement
 */

'use strict';

var ReactContext = require("./ReactContext");
var ReactCurrentOwner = require("./ReactCurrentOwner");

var assign = require("./Object.assign");
var warning = require("./warning");

var RESERVED_PROPS = {
  key: true,
  ref: true
};

/**
 * Warn for mutations.
 *
 * @internal
 * @param {object} object
 * @param {string} key
 */
function defineWarningProperty(object, key) {
  Object.defineProperty(object, key, {

    configurable: false,
    enumerable: true,

    get: function() {
      if (!this._store) {
        return null;
      }
      return this._store[key];
    },

    set: function(value) {
      ("production" !== process.env.NODE_ENV ? warning(
        false,
        'Don\'t set the %s property of the React element. Instead, ' +
        'specify the correct value when initially creating the element.',
        key
      ) : null);
      this._store[key] = value;
    }

  });
}

/**
 * This is updated to true if the membrane is successfully created.
 */
var useMutationMembrane = false;

/**
 * Warn for mutations.
 *
 * @internal
 * @param {object} element
 */
function defineMutationMembrane(prototype) {
  try {
    var pseudoFrozenProperties = {
      props: true
    };
    for (var key in pseudoFrozenProperties) {
      defineWarningProperty(prototype, key);
    }
    useMutationMembrane = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

/**
 * Base constructor for all React elements. This is only used to make this
 * work with a dynamic instanceof check. Nothing should live on this prototype.
 *
 * @param {*} type
 * @param {string|object} ref
 * @param {*} key
 * @param {*} props
 * @internal
 */
var ReactElement = function(type, key, ref, owner, context, props) {
  // Built-in properties that belong on the element
  this.type = type;
  this.key = key;
  this.ref = ref;

  // Record the component responsible for creating this element.
  this._owner = owner;

  // TODO: Deprecate withContext, and then the context becomes accessible
  // through the owner.
  this._context = context;

  if ("production" !== process.env.NODE_ENV) {
    // The validation flag and props are currently mutative. We put them on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    this._store = {props: props, originalProps: assign({}, props)};

    // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.
    try {
      Object.defineProperty(this._store, 'validated', {
        configurable: false,
        enumerable: false,
        writable: true
      });
    } catch (x) {
    }
    this._store.validated = false;

    // We're not allowed to set props directly on the object so we early
    // return and rely on the prototype membrane to forward to the backing
    // store.
    if (useMutationMembrane) {
      Object.freeze(this);
      return;
    }
  }

  this.props = props;
};

// We intentionally don't expose the function on the constructor property.
// ReactElement should be indistinguishable from a plain object.
ReactElement.prototype = {
  _isReactElement: true
};

if ("production" !== process.env.NODE_ENV) {
  defineMutationMembrane(ReactElement.prototype);
}

ReactElement.createElement = function(type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;

  if (config != null) {
    ref = config.ref === undefined ? null : config.ref;
    key = config.key === undefined ? null : '' + config.key;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (config.hasOwnProperty(propName) &&
          !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (typeof props[propName] === 'undefined') {
        props[propName] = defaultProps[propName];
      }
    }
  }

  return new ReactElement(
    type,
    key,
    ref,
    ReactCurrentOwner.current,
    ReactContext.current,
    props
  );
};

ReactElement.createFactory = function(type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. <Foo />.type === Foo.type.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  // Legacy hook TODO: Warn if this is accessed
  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceProps = function(oldElement, newProps) {
  var newElement = new ReactElement(
    oldElement.type,
    oldElement.key,
    oldElement.ref,
    oldElement._owner,
    oldElement._context,
    newProps
  );

  if ("production" !== process.env.NODE_ENV) {
    // If the key on the original is valid, then the clone is valid
    newElement._store.validated = oldElement._store.validated;
  }
  return newElement;
};

ReactElement.cloneElement = function(element, config, children) {
  var propName;

  // Original props are copied
  var props = assign({}, element.props);

  // Reserved names are extracted
  var key = element.key;
  var ref = element.ref;

  // Owner will be preserved, unless ref is overridden
  var owner = element._owner;

  if (config != null) {
    if (config.ref !== undefined) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }
    if (config.key !== undefined) {
      key = '' + config.key;
    }
    // Remaining properties override existing props
    for (propName in config) {
      if (config.hasOwnProperty(propName) &&
          !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  return new ReactElement(
    element.type,
    key,
    ref,
    owner,
    element._context,
    props
  );
};

/**
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function(object) {
  // ReactTestUtils is often used outside of beforeEach where as React is
  // within it. This leads to two different instances of React on the same
  // page. To identify a element from a different React instance we use
  // a flag instead of an instanceof check.
  var isElement = !!(object && object._isReactElement);
  // if (isElement && !(object instanceof ReactElement)) {
  // This is an indicator that you're using multiple versions of React at the
  // same time. This will screw with ownership and stuff. Fix it, please.
  // TODO: We could possibly warn here.
  // }
  return isElement;
};

module.exports = ReactElement;

}).call(this,require('_process'))
},{"./Object.assign":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/Object.assign.js","./ReactContext":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactContext.js","./ReactCurrentOwner":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactCurrentOwner.js","./warning":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/warning.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactElementValidator.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElementValidator
 */

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */

'use strict';

var ReactElement = require("./ReactElement");
var ReactFragment = require("./ReactFragment");
var ReactPropTypeLocations = require("./ReactPropTypeLocations");
var ReactPropTypeLocationNames = require("./ReactPropTypeLocationNames");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactNativeComponent = require("./ReactNativeComponent");

var getIteratorFn = require("./getIteratorFn");
var invariant = require("./invariant");
var warning = require("./warning");

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = ReactCurrentOwner.current.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {};

var loggedTypeFailures = {};

var NUMERIC_PROPERTY_REGEX = /^\d+$/;

/**
 * Gets the instance's name for use in warnings.
 *
 * @internal
 * @return {?string} Display name or undefined
 */
function getName(instance) {
  var publicInstance = instance && instance.getPublicInstance();
  if (!publicInstance) {
    return undefined;
  }
  var constructor = publicInstance.constructor;
  if (!constructor) {
    return undefined;
  }
  return constructor.displayName || constructor.name || undefined;
}

/**
 * Gets the current owner's displayName for use in warnings.
 *
 * @internal
 * @return {?string} Display name or undefined
 */
function getCurrentOwnerDisplayName() {
  var current = ReactCurrentOwner.current;
  return (
    current && getName(current) || undefined
  );
}

/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */
function validateExplicitKey(element, parentType) {
  if (element._store.validated || element.key != null) {
    return;
  }
  element._store.validated = true;

  warnAndMonitorForKeyUse(
    'Each child in an array or iterator should have a unique "key" prop.',
    element,
    parentType
  );
}

/**
 * Warn if the key is being defined as an object property but has an incorrect
 * value.
 *
 * @internal
 * @param {string} name Property name of the key.
 * @param {ReactElement} element Component that requires a key.
 * @param {*} parentType element's parent's type.
 */
function validatePropertyKey(name, element, parentType) {
  if (!NUMERIC_PROPERTY_REGEX.test(name)) {
    return;
  }
  warnAndMonitorForKeyUse(
    'Child objects should have non-numeric keys so ordering is preserved.',
    element,
    parentType
  );
}

/**
 * Shared warning and monitoring code for the key warnings.
 *
 * @internal
 * @param {string} message The base warning that gets output.
 * @param {ReactElement} element Component that requires a key.
 * @param {*} parentType element's parent's type.
 */
function warnAndMonitorForKeyUse(message, element, parentType) {
  var ownerName = getCurrentOwnerDisplayName();
  var parentName = typeof parentType === 'string' ?
    parentType : parentType.displayName || parentType.name;

  var useName = ownerName || parentName;
  var memoizer = ownerHasKeyUseWarning[message] || (
    (ownerHasKeyUseWarning[message] = {})
  );
  if (memoizer.hasOwnProperty(useName)) {
    return;
  }
  memoizer[useName] = true;

  var parentOrOwnerAddendum =
    ownerName ? (" Check the render method of " + ownerName + ".") :
    parentName ? (" Check the React.render call using <" + parentName + ">.") :
    '';

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  var childOwnerAddendum = '';
  if (element &&
      element._owner &&
      element._owner !== ReactCurrentOwner.current) {
    // Name of the component that originally created this child.
    var childOwnerName = getName(element._owner);

    childOwnerAddendum = (" It was passed a child from " + childOwnerName + ".");
  }

  ("production" !== process.env.NODE_ENV ? warning(
    false,
    message + '%s%s See https://fb.me/react-warning-keys for more information.',
    parentOrOwnerAddendum,
    childOwnerAddendum
  ) : null);
}

/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */
function validateChildKeys(node, parentType) {
  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(node)) {
    // This element was passed in a valid location.
    node._store.validated = true;
  } else if (node) {
    var iteratorFn = getIteratorFn(node);
    // Entry iterators provide implicit keys.
    if (iteratorFn) {
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;
        while (!(step = iterator.next()).done) {
          if (ReactElement.isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    } else if (typeof node === 'object') {
      var fragment = ReactFragment.extractIfFragment(node);
      for (var key in fragment) {
        if (fragment.hasOwnProperty(key)) {
          validatePropertyKey(key, fragment[key], parentType);
        }
      }
    }
  }
}

/**
 * Assert that the props are valid
 *
 * @param {string} componentName Name of the component for error messages.
 * @param {object} propTypes Map of prop name to a ReactPropType
 * @param {object} props
 * @param {string} location e.g. "prop", "context", "child context"
 * @private
 */
function checkPropTypes(componentName, propTypes, props, location) {
  for (var propName in propTypes) {
    if (propTypes.hasOwnProperty(propName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        // This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        ("production" !== process.env.NODE_ENV ? invariant(
          typeof propTypes[propName] === 'function',
          '%s: %s type `%s` is invalid; it must be a function, usually from ' +
          'React.PropTypes.',
          componentName || 'React class',
          ReactPropTypeLocationNames[location],
          propName
        ) : invariant(typeof propTypes[propName] === 'function'));
        error = propTypes[propName](props, propName, componentName, location);
      } catch (ex) {
        error = ex;
      }
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var addendum = getDeclarationErrorAddendum(this);
        ("production" !== process.env.NODE_ENV ? warning(false, 'Failed propType: %s%s', error.message, addendum) : null);
      }
    }
  }
}

var warnedPropsMutations = {};

/**
 * Warn about mutating props when setting `propName` on `element`.
 *
 * @param {string} propName The string key within props that was set
 * @param {ReactElement} element
 */
function warnForPropsMutation(propName, element) {
  var type = element.type;
  var elementName = typeof type === 'string' ? type : type.displayName;
  var ownerName = element._owner ?
    element._owner.getPublicInstance().constructor.displayName : null;

  var warningKey = propName + '|' + elementName + '|' + ownerName;
  if (warnedPropsMutations.hasOwnProperty(warningKey)) {
    return;
  }
  warnedPropsMutations[warningKey] = true;

  var elementInfo = '';
  if (elementName) {
    elementInfo = ' <' + elementName + ' />';
  }
  var ownerInfo = '';
  if (ownerName) {
    ownerInfo = ' The element was created by ' + ownerName + '.';
  }

  ("production" !== process.env.NODE_ENV ? warning(
    false,
    'Don\'t set .props.%s of the React component%s. Instead, specify the ' +
    'correct value when initially creating the element or use ' +
    'React.cloneElement to make a new element with updated props.%s',
    propName,
    elementInfo,
    ownerInfo
  ) : null);
}

// Inline Object.is polyfill
function is(a, b) {
  if (a !== a) {
    // NaN
    return b !== b;
  }
  if (a === 0 && b === 0) {
    // +-0
    return 1 / a === 1 / b;
  }
  return a === b;
}

/**
 * Given an element, check if its props have been mutated since element
 * creation (or the last call to this function). In particular, check if any
 * new props have been added, which we can't directly catch by defining warning
 * properties on the props object.
 *
 * @param {ReactElement} element
 */
function checkAndWarnForMutatedProps(element) {
  if (!element._store) {
    // Element was created using `new ReactElement` directly or with
    // `ReactElement.createElement`; skip mutation checking
    return;
  }

  var originalProps = element._store.originalProps;
  var props = element.props;

  for (var propName in props) {
    if (props.hasOwnProperty(propName)) {
      if (!originalProps.hasOwnProperty(propName) ||
          !is(originalProps[propName], props[propName])) {
        warnForPropsMutation(propName, element);

        // Copy over the new value so that the two props objects match again
        originalProps[propName] = props[propName];
      }
    }
  }
}

/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */
function validatePropTypes(element) {
  if (element.type == null) {
    // This has already warned. Don't throw.
    return;
  }
  // Extract the component class from the element. Converts string types
  // to a composite class which may have propTypes.
  // TODO: Validating a string's propTypes is not decoupled from the
  // rendering target which is problematic.
  var componentClass = ReactNativeComponent.getComponentClassForElement(
    element
  );
  var name = componentClass.displayName || componentClass.name;
  if (componentClass.propTypes) {
    checkPropTypes(
      name,
      componentClass.propTypes,
      element.props,
      ReactPropTypeLocations.prop
    );
  }
  if (typeof componentClass.getDefaultProps === 'function') {
    ("production" !== process.env.NODE_ENV ? warning(
      componentClass.getDefaultProps.isReactClassApproved,
      'getDefaultProps is only used on classic React.createClass ' +
      'definitions. Use a static property named `defaultProps` instead.'
    ) : null);
  }
}

var ReactElementValidator = {

  checkAndWarnForMutatedProps: checkAndWarnForMutatedProps,

  createElement: function(type, props, children) {
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    ("production" !== process.env.NODE_ENV ? warning(
      type != null,
      'React.createElement: type should not be null or undefined. It should ' +
        'be a string (for DOM elements) or a ReactClass (for composite ' +
        'components).'
    ) : null);

    var element = ReactElement.createElement.apply(this, arguments);

    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;
    }

    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], type);
    }

    validatePropTypes(element);

    return element;
  },

  createFactory: function(type) {
    var validatedFactory = ReactElementValidator.createElement.bind(
      null,
      type
    );
    // Legacy hook TODO: Warn if this is accessed
    validatedFactory.type = type;

    if ("production" !== process.env.NODE_ENV) {
      try {
        Object.defineProperty(
          validatedFactory,
          'type',
          {
            enumerable: false,
            get: function() {
              ("production" !== process.env.NODE_ENV ? warning(
                false,
                'Factory.type is deprecated. Access the class directly ' +
                'before passing it to createFactory.'
              ) : null);
              Object.defineProperty(this, 'type', {
                value: type
              });
              return type;
            }
          }
        );
      } catch (x) {
        // IE will fail on defineProperty (es5-shim/sham too)
      }
    }


    return validatedFactory;
  },

  cloneElement: function(element, props, children) {
    var newElement = ReactElement.cloneElement.apply(this, arguments);
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], newElement.type);
    }
    validatePropTypes(newElement);
    return newElement;
  }

};

module.exports = ReactElementValidator;

}).call(this,require('_process'))
},{"./ReactCurrentOwner":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactCurrentOwner.js","./ReactElement":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactElement.js","./ReactFragment":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactFragment.js","./ReactNativeComponent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactNativeComponent.js","./ReactPropTypeLocationNames":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactPropTypeLocationNames.js","./ReactPropTypeLocations":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactPropTypeLocations.js","./getIteratorFn":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/getIteratorFn.js","./invariant":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/invariant.js","./warning":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/warning.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactEmptyComponent.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEmptyComponent
 */

'use strict';

var ReactElement = require("./ReactElement");
var ReactInstanceMap = require("./ReactInstanceMap");

var invariant = require("./invariant");

var component;
// This registry keeps track of the React IDs of the components that rendered to
// `null` (in reality a placeholder such as `noscript`)
var nullComponentIDsRegistry = {};

var ReactEmptyComponentInjection = {
  injectEmptyComponent: function(emptyComponent) {
    component = ReactElement.createFactory(emptyComponent);
  }
};

var ReactEmptyComponentType = function() {};
ReactEmptyComponentType.prototype.componentDidMount = function() {
  var internalInstance = ReactInstanceMap.get(this);
  // TODO: Make sure we run these methods in the correct order, we shouldn't
  // need this check. We're going to assume if we're here it means we ran
  // componentWillUnmount already so there is no internal instance (it gets
  // removed as part of the unmounting process).
  if (!internalInstance) {
    return;
  }
  registerNullComponentID(internalInstance._rootNodeID);
};
ReactEmptyComponentType.prototype.componentWillUnmount = function() {
  var internalInstance = ReactInstanceMap.get(this);
  // TODO: Get rid of this check. See TODO in componentDidMount.
  if (!internalInstance) {
    return;
  }
  deregisterNullComponentID(internalInstance._rootNodeID);
};
ReactEmptyComponentType.prototype.render = function() {
  ("production" !== process.env.NODE_ENV ? invariant(
    component,
    'Trying to return null from a render, but no null placeholder component ' +
    'was injected.'
  ) : invariant(component));
  return component();
};

var emptyElement = ReactElement.createElement(ReactEmptyComponentType);

/**
 * Mark the component as having rendered to null.
 * @param {string} id Component's `_rootNodeID`.
 */
function registerNullComponentID(id) {
  nullComponentIDsRegistry[id] = true;
}

/**
 * Unmark the component as having rendered to null: it renders to something now.
 * @param {string} id Component's `_rootNodeID`.
 */
function deregisterNullComponentID(id) {
  delete nullComponentIDsRegistry[id];
}

/**
 * @param {string} id Component's `_rootNodeID`.
 * @return {boolean} True if the component is rendered to null.
 */
function isNullComponentID(id) {
  return !!nullComponentIDsRegistry[id];
}

var ReactEmptyComponent = {
  emptyElement: emptyElement,
  injection: ReactEmptyComponentInjection,
  isNullComponentID: isNullComponentID
};

module.exports = ReactEmptyComponent;

}).call(this,require('_process'))
},{"./ReactElement":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactElement.js","./ReactInstanceMap":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactInstanceMap.js","./invariant":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/invariant.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactErrorUtils.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactErrorUtils
 * @typechecks
 */

"use strict";

var ReactErrorUtils = {
  /**
   * Creates a guarded version of a function. This is supposed to make debugging
   * of event handlers easier. To aid debugging with the browser's debugger,
   * this currently simply returns the original function.
   *
   * @param {function} func Function to be executed
   * @param {string} name The name of the guard
   * @return {function}
   */
  guard: function(func, name) {
    return func;
  }
};

module.exports = ReactErrorUtils;

},{}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactEventEmitterMixin.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventEmitterMixin
 */

'use strict';

var EventPluginHub = require("./EventPluginHub");

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue();
}

var ReactEventEmitterMixin = {

  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {object} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native environment event.
   */
  handleTopLevel: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var events = EventPluginHub.extractEvents(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent
    );

    runEventQueueInBatch(events);
  }
};

module.exports = ReactEventEmitterMixin;

},{"./EventPluginHub":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/EventPluginHub.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactEventListener.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventListener
 * @typechecks static-only
 */

'use strict';

var EventListener = require("./EventListener");
var ExecutionEnvironment = require("./ExecutionEnvironment");
var PooledClass = require("./PooledClass");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactMount = require("./ReactMount");
var ReactUpdates = require("./ReactUpdates");

var assign = require("./Object.assign");
var getEventTarget = require("./getEventTarget");
var getUnboundedScrollPosition = require("./getUnboundedScrollPosition");

/**
 * Finds the parent React component of `node`.
 *
 * @param {*} node
 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
 *                           is not nested.
 */
function findParent(node) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  var nodeID = ReactMount.getID(node);
  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
  var container = ReactMount.findReactContainerForID(rootID);
  var parent = ReactMount.getFirstReactDOM(container);
  return parent;
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
  this.topLevelType = topLevelType;
  this.nativeEvent = nativeEvent;
  this.ancestors = [];
}
assign(TopLevelCallbackBookKeeping.prototype, {
  destructor: function() {
    this.topLevelType = null;
    this.nativeEvent = null;
    this.ancestors.length = 0;
  }
});
PooledClass.addPoolingTo(
  TopLevelCallbackBookKeeping,
  PooledClass.twoArgumentPooler
);

function handleTopLevelImpl(bookKeeping) {
  var topLevelTarget = ReactMount.getFirstReactDOM(
    getEventTarget(bookKeeping.nativeEvent)
  ) || window;

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = topLevelTarget;
  while (ancestor) {
    bookKeeping.ancestors.push(ancestor);
    ancestor = findParent(ancestor);
  }

  for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {
    topLevelTarget = bookKeeping.ancestors[i];
    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
    ReactEventListener._handleTopLevel(
      bookKeeping.topLevelType,
      topLevelTarget,
      topLevelTargetID,
      bookKeeping.nativeEvent
    );
  }
}

function scrollValueMonitor(cb) {
  var scrollPosition = getUnboundedScrollPosition(window);
  cb(scrollPosition);
}

var ReactEventListener = {
  _enabled: true,
  _handleTopLevel: null,

  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

  setHandleTopLevel: function(handleTopLevel) {
    ReactEventListener._handleTopLevel = handleTopLevel;
  },

  setEnabled: function(enabled) {
    ReactEventListener._enabled = !!enabled;
  },

  isEnabled: function() {
    return ReactEventListener._enabled;
  },


  /**
   * Traps top-level events by using event bubbling.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return null;
    }
    return EventListener.listen(
      element,
      handlerBaseName,
      ReactEventListener.dispatchEvent.bind(null, topLevelType)
    );
  },

  /**
   * Traps a top-level event by using event capturing.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return null;
    }
    return EventListener.capture(
      element,
      handlerBaseName,
      ReactEventListener.dispatchEvent.bind(null, topLevelType)
    );
  },

  monitorScrollValue: function(refresh) {
    var callback = scrollValueMonitor.bind(null, refresh);
    EventListener.listen(window, 'scroll', callback);
  },

  dispatchEvent: function(topLevelType, nativeEvent) {
    if (!ReactEventListener._enabled) {
      return;
    }

    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(
      topLevelType,
      nativeEvent
    );
    try {
      // Event queue being processed in the same cycle allows
      // `preventDefault`.
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
    } finally {
      TopLevelCallbackBookKeeping.release(bookKeeping);
    }
  }
};

module.exports = ReactEventListener;

},{"./EventListener":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/EventListener.js","./ExecutionEnvironment":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ExecutionEnvironment.js","./Object.assign":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/Object.assign.js","./PooledClass":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/PooledClass.js","./ReactInstanceHandles":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactInstanceHandles.js","./ReactMount":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactMount.js","./ReactUpdates":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactUpdates.js","./getEventTarget":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/getEventTarget.js","./getUnboundedScrollPosition":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/getUnboundedScrollPosition.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactFragment.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
* @providesModule ReactFragment
*/

'use strict';

var ReactElement = require("./ReactElement");

var warning = require("./warning");

/**
 * We used to allow keyed objects to serve as a collection of ReactElements,
 * or nested sets. This allowed us a way to explicitly key a set a fragment of
 * components. This is now being replaced with an opaque data structure.
 * The upgrade path is to call React.addons.createFragment({ key: value }) to
 * create a keyed fragment. The resulting data structure is opaque, for now.
 */

if ("production" !== process.env.NODE_ENV) {
  var fragmentKey = '_reactFragment';
  var didWarnKey = '_reactDidWarn';
  var canWarnForReactFragment = false;

  try {
    // Feature test. Don't even try to issue this warning if we can't use
    // enumerable: false.

    var dummy = function() {
      return 1;
    };

    Object.defineProperty(
      {},
      fragmentKey,
      {enumerable: false, value: true}
    );

    Object.defineProperty(
      {},
      'key',
      {enumerable: true, get: dummy}
    );

    canWarnForReactFragment = true;
  } catch (x) { }

  var proxyPropertyAccessWithWarning = function(obj, key) {
    Object.defineProperty(obj, key, {
      enumerable: true,
      get: function() {
        ("production" !== process.env.NODE_ENV ? warning(
          this[didWarnKey],
          'A ReactFragment is an opaque type. Accessing any of its ' +
          'properties is deprecated. Pass it to one of the React.Children ' +
          'helpers.'
        ) : null);
        this[didWarnKey] = true;
        return this[fragmentKey][key];
      },
      set: function(value) {
        ("production" !== process.env.NODE_ENV ? warning(
          this[didWarnKey],
          'A ReactFragment is an immutable opaque type. Mutating its ' +
          'properties is deprecated.'
        ) : null);
        this[didWarnKey] = true;
        this[fragmentKey][key] = value;
      }
    });
  };

  var issuedWarnings = {};

  var didWarnForFragment = function(fragment) {
    // We use the keys and the type of the value as a heuristic to dedupe the
    // warning to avoid spamming too much.
    var fragmentCacheKey = '';
    for (var key in fragment) {
      fragmentCacheKey += key + ':' + (typeof fragment[key]) + ',';
    }
    var alreadyWarnedOnce = !!issuedWarnings[fragmentCacheKey];
    issuedWarnings[fragmentCacheKey] = true;
    return alreadyWarnedOnce;
  };
}

var ReactFragment = {
  // Wrap a keyed object in an opaque proxy that warns you if you access any
  // of its properties.
  create: function(object) {
    if ("production" !== process.env.NODE_ENV) {
      if (typeof object !== 'object' || !object || Array.isArray(object)) {
        ("production" !== process.env.NODE_ENV ? warning(
          false,
          'React.addons.createFragment only accepts a single object.',
          object
        ) : null);
        return object;
      }
      if (ReactElement.isValidElement(object)) {
        ("production" !== process.env.NODE_ENV ? warning(
          false,
          'React.addons.createFragment does not accept a ReactElement ' +
          'without a wrapper object.'
        ) : null);
        return object;
      }
      if (canWarnForReactFragment) {
        var proxy = {};
        Object.defineProperty(proxy, fragmentKey, {
          enumerable: false,
          value: object
        });
        Object.defineProperty(proxy, didWarnKey, {
          writable: true,
          enumerable: false,
          value: false
        });
        for (var key in object) {
          proxyPropertyAccessWithWarning(proxy, key);
        }
        Object.preventExtensions(proxy);
        return proxy;
      }
    }
    return object;
  },
  // Extract the original keyed object from the fragment opaque type. Warn if
  // a plain object is passed here.
  extract: function(fragment) {
    if ("production" !== process.env.NODE_ENV) {
      if (canWarnForReactFragment) {
        if (!fragment[fragmentKey]) {
          ("production" !== process.env.NODE_ENV ? warning(
            didWarnForFragment(fragment),
            'Any use of a keyed object should be wrapped in ' +
            'React.addons.createFragment(object) before being passed as a ' +
            'child.'
          ) : null);
          return fragment;
        }
        return fragment[fragmentKey];
      }
    }
    return fragment;
  },
  // Check if this is a fragment and if so, extract the keyed object. If it
  // is a fragment-like object, warn that it should be wrapped. Ignore if we
  // can't determine what kind of object this is.
  extractIfFragment: function(fragment) {
    if ("production" !== process.env.NODE_ENV) {
      if (canWarnForReactFragment) {
        // If it is the opaque type, return the keyed object.
        if (fragment[fragmentKey]) {
          return fragment[fragmentKey];
        }
        // Otherwise, check each property if it has an element, if it does
        // it is probably meant as a fragment, so we can warn early. Defer,
        // the warning to extract.
        for (var key in fragment) {
          if (fragment.hasOwnProperty(key) &&
              ReactElement.isValidElement(fragment[key])) {
            // This looks like a fragment object, we should provide an
            // early warning.
            return ReactFragment.extract(fragment);
          }
        }
      }
    }
    return fragment;
  }
};

module.exports = ReactFragment;

}).call(this,require('_process'))
},{"./ReactElement":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactElement.js","./warning":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/warning.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactInjection.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInjection
 */

'use strict';

var DOMProperty = require("./DOMProperty");
var EventPluginHub = require("./EventPluginHub");
var ReactComponentEnvironment = require("./ReactComponentEnvironment");
var ReactClass = require("./ReactClass");
var ReactEmptyComponent = require("./ReactEmptyComponent");
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");
var ReactNativeComponent = require("./ReactNativeComponent");
var ReactDOMComponent = require("./ReactDOMComponent");
var ReactPerf = require("./ReactPerf");
var ReactRootIndex = require("./ReactRootIndex");
var ReactUpdates = require("./ReactUpdates");

var ReactInjection = {
  Component: ReactComponentEnvironment.injection,
  Class: ReactClass.injection,
  DOMComponent: ReactDOMComponent.injection,
  DOMProperty: DOMProperty.injection,
  EmptyComponent: ReactEmptyComponent.injection,
  EventPluginHub: EventPluginHub.injection,
  EventEmitter: ReactBrowserEventEmitter.injection,
  NativeComponent: ReactNativeComponent.injection,
  Perf: ReactPerf.injection,
  RootIndex: ReactRootIndex.injection,
  Updates: ReactUpdates.injection
};

module.exports = ReactInjection;

},{"./DOMProperty":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/DOMProperty.js","./EventPluginHub":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/EventPluginHub.js","./ReactBrowserEventEmitter":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactBrowserEventEmitter.js","./ReactClass":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactClass.js","./ReactComponentEnvironment":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactComponentEnvironment.js","./ReactDOMComponent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactDOMComponent.js","./ReactEmptyComponent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactEmptyComponent.js","./ReactNativeComponent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactNativeComponent.js","./ReactPerf":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactPerf.js","./ReactRootIndex":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactRootIndex.js","./ReactUpdates":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactUpdates.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactInputSelection.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInputSelection
 */

'use strict';

var ReactDOMSelection = require("./ReactDOMSelection");

var containsNode = require("./containsNode");
var focusNode = require("./focusNode");
var getActiveElement = require("./getActiveElement");

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = {

  hasSelectionCapabilities: function(elem) {
    return elem && (
      ((elem.nodeName === 'INPUT' && elem.type === 'text') ||
      elem.nodeName === 'TEXTAREA' || elem.contentEditable === 'true')
    );
  },

  getSelectionInformation: function() {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange:
          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?
          ReactInputSelection.getSelection(focusedElem) :
          null
    };
  },

  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function(priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem &&
        isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(
          priorFocusedElem,
          priorSelectionRange
        );
      }
      focusNode(priorFocusedElem);
    }
  },

  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function(input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else if (document.selection && input.nodeName === 'INPUT') {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = {
          start: -range.moveStart('character', -input.value.length),
          end: -range.moveEnd('character', -input.value.length)
        };
      }
    } else {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);
    }

    return selection || {start: 0, end: 0};
  },

  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function(input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (typeof end === 'undefined') {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else if (document.selection && input.nodeName === 'INPUT') {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();
    } else {
      ReactDOMSelection.setOffsets(input, offsets);
    }
  }
};

module.exports = ReactInputSelection;

},{"./ReactDOMSelection":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactDOMSelection.js","./containsNode":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/containsNode.js","./focusNode":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/focusNode.js","./getActiveElement":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/getActiveElement.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactInstanceHandles.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInstanceHandles
 * @typechecks static-only
 */

'use strict';

var ReactRootIndex = require("./ReactRootIndex");

var invariant = require("./invariant");

var SEPARATOR = '.';
var SEPARATOR_LENGTH = SEPARATOR.length;

/**
 * Maximum depth of traversals before we consider the possibility of a bad ID.
 */
var MAX_TREE_DEPTH = 100;

/**
 * Creates a DOM ID prefix to use when mounting React components.
 *
 * @param {number} index A unique integer
 * @return {string} React root ID.
 * @internal
 */
function getReactRootIDString(index) {
  return SEPARATOR + index.toString(36);
}

/**
 * Checks if a character in the supplied ID is a separator or the end.
 *
 * @param {string} id A React DOM ID.
 * @param {number} index Index of the character to check.
 * @return {boolean} True if the character is a separator or end of the ID.
 * @private
 */
function isBoundary(id, index) {
  return id.charAt(index) === SEPARATOR || index === id.length;
}

/**
 * Checks if the supplied string is a valid React DOM ID.
 *
 * @param {string} id A React DOM ID, maybe.
 * @return {boolean} True if the string is a valid React DOM ID.
 * @private
 */
function isValidID(id) {
  return id === '' || (
    id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR
  );
}

/**
 * Checks if the first ID is an ancestor of or equal to the second ID.
 *
 * @param {string} ancestorID
 * @param {string} descendantID
 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
 * @internal
 */
function isAncestorIDOf(ancestorID, descendantID) {
  return (
    descendantID.indexOf(ancestorID) === 0 &&
    isBoundary(descendantID, ancestorID.length)
  );
}

/**
 * Gets the parent ID of the supplied React DOM ID, `id`.
 *
 * @param {string} id ID of a component.
 * @return {string} ID of the parent, or an empty string.
 * @private
 */
function getParentID(id) {
  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
}

/**
 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
 * supplied `destinationID`. If they are equal, the ID is returned.
 *
 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
 * @param {string} destinationID ID of the destination node.
 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
 * @private
 */
function getNextDescendantID(ancestorID, destinationID) {
  ("production" !== process.env.NODE_ENV ? invariant(
    isValidID(ancestorID) && isValidID(destinationID),
    'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',
    ancestorID,
    destinationID
  ) : invariant(isValidID(ancestorID) && isValidID(destinationID)));
  ("production" !== process.env.NODE_ENV ? invariant(
    isAncestorIDOf(ancestorID, destinationID),
    'getNextDescendantID(...): React has made an invalid assumption about ' +
    'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',
    ancestorID,
    destinationID
  ) : invariant(isAncestorIDOf(ancestorID, destinationID)));
  if (ancestorID === destinationID) {
    return ancestorID;
  }
  // Skip over the ancestor and the immediate separator. Traverse until we hit
  // another separator or we reach the end of `destinationID`.
  var start = ancestorID.length + SEPARATOR_LENGTH;
  var i;
  for (i = start; i < destinationID.length; i++) {
    if (isBoundary(destinationID, i)) {
      break;
    }
  }
  return destinationID.substr(0, i);
}

/**
 * Gets the nearest common ancestor ID of two IDs.
 *
 * Using this ID scheme, the nearest common ancestor ID is the longest common
 * prefix of the two IDs that immediately preceded a "marker" in both strings.
 *
 * @param {string} oneID
 * @param {string} twoID
 * @return {string} Nearest common ancestor ID, or the empty string if none.
 * @private
 */
function getFirstCommonAncestorID(oneID, twoID) {
  var minLength = Math.min(oneID.length, twoID.length);
  if (minLength === 0) {
    return '';
  }
  var lastCommonMarkerIndex = 0;
  // Use `<=` to traverse until the "EOL" of the shorter string.
  for (var i = 0; i <= minLength; i++) {
    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
      lastCommonMarkerIndex = i;
    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
      break;
    }
  }
  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
  ("production" !== process.env.NODE_ENV ? invariant(
    isValidID(longestCommonID),
    'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',
    oneID,
    twoID,
    longestCommonID
  ) : invariant(isValidID(longestCommonID)));
  return longestCommonID;
}

/**
 * Traverses the parent path between two IDs (either up or down). The IDs must
 * not be the same, and there must exist a parent path between them. If the
 * callback returns `false`, traversal is stopped.
 *
 * @param {?string} start ID at which to start traversal.
 * @param {?string} stop ID at which to end traversal.
 * @param {function} cb Callback to invoke each ID with.
 * @param {?boolean} skipFirst Whether or not to skip the first node.
 * @param {?boolean} skipLast Whether or not to skip the last node.
 * @private
 */
function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
  start = start || '';
  stop = stop || '';
  ("production" !== process.env.NODE_ENV ? invariant(
    start !== stop,
    'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',
    start
  ) : invariant(start !== stop));
  var traverseUp = isAncestorIDOf(stop, start);
  ("production" !== process.env.NODE_ENV ? invariant(
    traverseUp || isAncestorIDOf(start, stop),
    'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +
    'not have a parent path.',
    start,
    stop
  ) : invariant(traverseUp || isAncestorIDOf(start, stop)));
  // Traverse from `start` to `stop` one depth at a time.
  var depth = 0;
  var traverse = traverseUp ? getParentID : getNextDescendantID;
  for (var id = start; /* until break */; id = traverse(id, stop)) {
    var ret;
    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
      ret = cb(id, traverseUp, arg);
    }
    if (ret === false || id === stop) {
      // Only break //after// visiting `stop`.
      break;
    }
    ("production" !== process.env.NODE_ENV ? invariant(
      depth++ < MAX_TREE_DEPTH,
      'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +
      'traversing the React DOM ID tree. This may be due to malformed IDs: %s',
      start, stop
    ) : invariant(depth++ < MAX_TREE_DEPTH));
  }
}

/**
 * Manages the IDs assigned to DOM representations of React components. This
 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
 * order to simulate events).
 *
 * @internal
 */
var ReactInstanceHandles = {

  /**
   * Constructs a React root ID
   * @return {string} A React root ID.
   */
  createReactRootID: function() {
    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
  },

  /**
   * Constructs a React ID by joining a root ID with a name.
   *
   * @param {string} rootID Root ID of a parent component.
   * @param {string} name A component's name (as flattened children).
   * @return {string} A React ID.
   * @internal
   */
  createReactID: function(rootID, name) {
    return rootID + name;
  },

  /**
   * Gets the DOM ID of the React component that is the root of the tree that
   * contains the React component with the supplied DOM ID.
   *
   * @param {string} id DOM ID of a React component.
   * @return {?string} DOM ID of the React component that is the root.
   * @internal
   */
  getReactRootIDFromNodeID: function(id) {
    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
      var index = id.indexOf(SEPARATOR, 1);
      return index > -1 ? id.substr(0, index) : id;
    }
    return null;
  },

  /**
   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
   * should would receive a `mouseEnter` or `mouseLeave` event.
   *
   * NOTE: Does not invoke the callback on the nearest common ancestor because
   * nothing "entered" or "left" that element.
   *
   * @param {string} leaveID ID being left.
   * @param {string} enterID ID being entered.
   * @param {function} cb Callback to invoke on each entered/left ID.
   * @param {*} upArg Argument to invoke the callback with on left IDs.
   * @param {*} downArg Argument to invoke the callback with on entered IDs.
   * @internal
   */
  traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {
    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
    if (ancestorID !== leaveID) {
      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
    }
    if (ancestorID !== enterID) {
      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
    }
  },

  /**
   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseTwoPhase: function(targetID, cb, arg) {
    if (targetID) {
      traverseParentPath('', targetID, cb, arg, true, false);
      traverseParentPath(targetID, '', cb, arg, false, true);
    }
  },

  /**
   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
   * example, passing `.0.$row-0.1` would result in `cb` getting called
   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseAncestors: function(targetID, cb, arg) {
    traverseParentPath('', targetID, cb, arg, true, false);
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _getFirstCommonAncestorID: getFirstCommonAncestorID,

  /**
   * Exposed for unit testing.
   * @private
   */
  _getNextDescendantID: getNextDescendantID,

  isAncestorIDOf: isAncestorIDOf,

  SEPARATOR: SEPARATOR

};

module.exports = ReactInstanceHandles;

}).call(this,require('_process'))
},{"./ReactRootIndex":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactRootIndex.js","./invariant":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/invariant.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactInstanceMap.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInstanceMap
 */

'use strict';

/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 */

// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
var ReactInstanceMap = {

  /**
   * This API should be called `delete` but we'd have to make sure to always
   * transform these to strings for IE support. When this transform is fully
   * supported we can rename it.
   */
  remove: function(key) {
    key._reactInternalInstance = undefined;
  },

  get: function(key) {
    return key._reactInternalInstance;
  },

  has: function(key) {
    return key._reactInternalInstance !== undefined;
  },

  set: function(key, value) {
    key._reactInternalInstance = value;
  }

};

module.exports = ReactInstanceMap;

},{}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactLifeCycle.js":[function(require,module,exports){
/**
 * Copyright 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactLifeCycle
 */

'use strict';

/**
 * This module manages the bookkeeping when a component is in the process
 * of being mounted or being unmounted. This is used as a way to enforce
 * invariants (or warnings) when it is not recommended to call
 * setState/forceUpdate.
 *
 * currentlyMountingInstance: During the construction phase, it is not possible
 * to trigger an update since the instance is not fully mounted yet. However, we
 * currently allow this as a convenience for mutating the initial state.
 *
 * currentlyUnmountingInstance: During the unmounting phase, the instance is
 * still mounted and can therefore schedule an update. However, this is not
 * recommended and probably an error since it's about to be unmounted.
 * Therefore we still want to trigger in an error for that case.
 */

var ReactLifeCycle = {
  currentlyMountingInstance: null,
  currentlyUnmountingInstance: null
};

module.exports = ReactLifeCycle;

},{}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactMarkupChecksum.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMarkupChecksum
 */

'use strict';

var adler32 = require("./adler32");

var ReactMarkupChecksum = {
  CHECKSUM_ATTR_NAME: 'data-react-checksum',

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function(markup) {
    var checksum = adler32(markup);
    return markup.replace(
      '>',
      ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '">'
    );
  },

  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function(markup, element) {
    var existingChecksum = element.getAttribute(
      ReactMarkupChecksum.CHECKSUM_ATTR_NAME
    );
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;
  }
};

module.exports = ReactMarkupChecksum;

},{"./adler32":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/adler32.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactMount.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMount
 */

'use strict';

var DOMProperty = require("./DOMProperty");
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactElement = require("./ReactElement");
var ReactElementValidator = require("./ReactElementValidator");
var ReactEmptyComponent = require("./ReactEmptyComponent");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactInstanceMap = require("./ReactInstanceMap");
var ReactMarkupChecksum = require("./ReactMarkupChecksum");
var ReactPerf = require("./ReactPerf");
var ReactReconciler = require("./ReactReconciler");
var ReactUpdateQueue = require("./ReactUpdateQueue");
var ReactUpdates = require("./ReactUpdates");

var emptyObject = require("./emptyObject");
var containsNode = require("./containsNode");
var getReactRootElementInContainer = require("./getReactRootElementInContainer");
var instantiateReactComponent = require("./instantiateReactComponent");
var invariant = require("./invariant");
var setInnerHTML = require("./setInnerHTML");
var shouldUpdateReactComponent = require("./shouldUpdateReactComponent");
var warning = require("./warning");

var SEPARATOR = ReactInstanceHandles.SEPARATOR;

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var nodeCache = {};

var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;

/** Mapping from reactRootID to React component instance. */
var instancesByReactRootID = {};

/** Mapping from reactRootID to `container` nodes. */
var containersByReactRootID = {};

if ("production" !== process.env.NODE_ENV) {
  /** __DEV__-only mapping from reactRootID to root elements. */
  var rootElementsByReactRootID = {};
}

// Used to store breadth-first search state in findComponentRoot.
var findComponentRootReusableArray = [];

/**
 * Finds the index of the first character
 * that's not common between the two given strings.
 *
 * @return {number} the index of the character where the strings diverge
 */
function firstDifferenceIndex(string1, string2) {
  var minLen = Math.min(string1.length, string2.length);
  for (var i = 0; i < minLen; i++) {
    if (string1.charAt(i) !== string2.charAt(i)) {
      return i;
    }
  }
  return string1.length === string2.length ? -1 : minLen;
}

/**
 * @param {DOMElement} container DOM element that may contain a React component.
 * @return {?string} A "reactRoot" ID, if a React component is rendered.
 */
function getReactRootID(container) {
  var rootElement = getReactRootElementInContainer(container);
  return rootElement && ReactMount.getID(rootElement);
}

/**
 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
 * element can return its control whose name or ID equals ATTR_NAME. All
 * DOM nodes support `getAttributeNode` but this can also get called on
 * other objects so just return '' if we're given something other than a
 * DOM node (such as window).
 *
 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
 * @return {string} ID of the supplied `domNode`.
 */
function getID(node) {
  var id = internalGetID(node);
  if (id) {
    if (nodeCache.hasOwnProperty(id)) {
      var cached = nodeCache[id];
      if (cached !== node) {
        ("production" !== process.env.NODE_ENV ? invariant(
          !isValid(cached, id),
          'ReactMount: Two valid but unequal nodes with the same `%s`: %s',
          ATTR_NAME, id
        ) : invariant(!isValid(cached, id)));

        nodeCache[id] = node;
      }
    } else {
      nodeCache[id] = node;
    }
  }

  return id;
}

function internalGetID(node) {
  // If node is something like a window, document, or text node, none of
  // which support attributes or a .getAttribute method, gracefully return
  // the empty string, as if the attribute were missing.
  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
}

/**
 * Sets the React-specific ID of the given node.
 *
 * @param {DOMElement} node The DOM node whose ID will be set.
 * @param {string} id The value of the ID attribute.
 */
function setID(node, id) {
  var oldID = internalGetID(node);
  if (oldID !== id) {
    delete nodeCache[oldID];
  }
  node.setAttribute(ATTR_NAME, id);
  nodeCache[id] = node;
}

/**
 * Finds the node with the supplied React-generated DOM ID.
 *
 * @param {string} id A React-generated DOM ID.
 * @return {DOMElement} DOM node with the suppled `id`.
 * @internal
 */
function getNode(id) {
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
    nodeCache[id] = ReactMount.findReactNodeByID(id);
  }
  return nodeCache[id];
}

/**
 * Finds the node with the supplied public React instance.
 *
 * @param {*} instance A public React instance.
 * @return {?DOMElement} DOM node with the suppled `id`.
 * @internal
 */
function getNodeFromInstance(instance) {
  var id = ReactInstanceMap.get(instance)._rootNodeID;
  if (ReactEmptyComponent.isNullComponentID(id)) {
    return null;
  }
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
    nodeCache[id] = ReactMount.findReactNodeByID(id);
  }
  return nodeCache[id];
}

/**
 * A node is "valid" if it is contained by a currently mounted container.
 *
 * This means that the node does not have to be contained by a document in
 * order to be considered valid.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @param {string} id The expected ID of the node.
 * @return {boolean} Whether the node is contained by a mounted container.
 */
function isValid(node, id) {
  if (node) {
    ("production" !== process.env.NODE_ENV ? invariant(
      internalGetID(node) === id,
      'ReactMount: Unexpected modification of `%s`',
      ATTR_NAME
    ) : invariant(internalGetID(node) === id));

    var container = ReactMount.findReactContainerForID(id);
    if (container && containsNode(container, node)) {
      return true;
    }
  }

  return false;
}

/**
 * Causes the cache to forget about one React-specific ID.
 *
 * @param {string} id The ID to forget.
 */
function purgeID(id) {
  delete nodeCache[id];
}

var deepestNodeSoFar = null;
function findDeepestCachedAncestorImpl(ancestorID) {
  var ancestor = nodeCache[ancestorID];
  if (ancestor && isValid(ancestor, ancestorID)) {
    deepestNodeSoFar = ancestor;
  } else {
    // This node isn't populated in the cache, so presumably none of its
    // descendants are. Break out of the loop.
    return false;
  }
}

/**
 * Return the deepest cached node whose ID is a prefix of `targetID`.
 */
function findDeepestCachedAncestor(targetID) {
  deepestNodeSoFar = null;
  ReactInstanceHandles.traverseAncestors(
    targetID,
    findDeepestCachedAncestorImpl
  );

  var foundNode = deepestNodeSoFar;
  deepestNodeSoFar = null;
  return foundNode;
}

/**
 * Mounts this component and inserts it into the DOM.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {string} rootID DOM ID of the root node.
 * @param {DOMElement} container DOM element to mount into.
 * @param {ReactReconcileTransaction} transaction
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function mountComponentIntoNode(
    componentInstance,
    rootID,
    container,
    transaction,
    shouldReuseMarkup) {
  var markup = ReactReconciler.mountComponent(
    componentInstance, rootID, transaction, emptyObject
  );
  componentInstance._isTopLevel = true;
  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup);
}

/**
 * Batched mount.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {string} rootID DOM ID of the root node.
 * @param {DOMElement} container DOM element to mount into.
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function batchedMountComponentIntoNode(
    componentInstance,
    rootID,
    container,
    shouldReuseMarkup) {
  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
  transaction.perform(
    mountComponentIntoNode,
    null,
    componentInstance,
    rootID,
    container,
    transaction,
    shouldReuseMarkup
  );
  ReactUpdates.ReactReconcileTransaction.release(transaction);
}

/**
 * Mounting is the process of initializing a React component by creating its
 * representative DOM elements and inserting them into a supplied `container`.
 * Any prior content inside `container` is destroyed in the process.
 *
 *   ReactMount.render(
 *     component,
 *     document.getElementById('container')
 *   );
 *
 *   <div id="container">                   <-- Supplied `container`.
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
 *       // ...                                 component.
 *     </div>
 *   </div>
 *
 * Inside of `container`, the first element rendered is the "reactRoot".
 */
var ReactMount = {
  /** Exposed for debugging purposes **/
  _instancesByReactRootID: instancesByReactRootID,

  /**
   * This is a hook provided to support rendering React components while
   * ensuring that the apparent scroll position of its `container` does not
   * change.
   *
   * @param {DOMElement} container The `container` being rendered into.
   * @param {function} renderCallback This must be called once to do the render.
   */
  scrollMonitor: function(container, renderCallback) {
    renderCallback();
  },

  /**
   * Take a component that's already mounted into the DOM and replace its props
   * @param {ReactComponent} prevComponent component instance already in the DOM
   * @param {ReactElement} nextElement component instance to render
   * @param {DOMElement} container container to render into
   * @param {?function} callback function triggered on completion
   */
  _updateRootComponent: function(
      prevComponent,
      nextElement,
      container,
      callback) {
    if ("production" !== process.env.NODE_ENV) {
      ReactElementValidator.checkAndWarnForMutatedProps(nextElement);
    }

    ReactMount.scrollMonitor(container, function() {
      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
      if (callback) {
        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
      }
    });

    if ("production" !== process.env.NODE_ENV) {
      // Record the root element in case it later gets transplanted.
      rootElementsByReactRootID[getReactRootID(container)] =
        getReactRootElementInContainer(container);
    }

    return prevComponent;
  },

  /**
   * Register a component into the instance map and starts scroll value
   * monitoring
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @return {string} reactRoot ID prefix
   */
  _registerComponent: function(nextComponent, container) {
    ("production" !== process.env.NODE_ENV ? invariant(
      container && (
        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
      ),
      '_registerComponent(...): Target container is not a DOM element.'
    ) : invariant(container && (
      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
    )));

    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

    var reactRootID = ReactMount.registerContainer(container);
    instancesByReactRootID[reactRootID] = nextComponent;
    return reactRootID;
  },

  /**
   * Render a new component into the DOM.
   * @param {ReactElement} nextElement element to render
   * @param {DOMElement} container container to render into
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
   * @return {ReactComponent} nextComponent
   */
  _renderNewRootComponent: function(
    nextElement,
    container,
    shouldReuseMarkup
  ) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case.
    ("production" !== process.env.NODE_ENV ? warning(
      ReactCurrentOwner.current == null,
      '_renderNewRootComponent(): Render methods should be a pure function ' +
      'of props and state; triggering nested component updates from ' +
      'render is not allowed. If necessary, trigger nested updates in ' +
      'componentDidUpdate.'
    ) : null);

    var componentInstance = instantiateReactComponent(nextElement, null);
    var reactRootID = ReactMount._registerComponent(
      componentInstance,
      container
    );

    // The initial render is synchronous but any updates that happen during
    // rendering, in componentWillMount or componentDidMount, will be batched
    // according to the current batching strategy.

    ReactUpdates.batchedUpdates(
      batchedMountComponentIntoNode,
      componentInstance,
      reactRootID,
      container,
      shouldReuseMarkup
    );

    if ("production" !== process.env.NODE_ENV) {
      // Record the root element in case it later gets transplanted.
      rootElementsByReactRootID[reactRootID] =
        getReactRootElementInContainer(container);
    }

    return componentInstance;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  render: function(nextElement, container, callback) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ReactElement.isValidElement(nextElement),
      'React.render(): Invalid component element.%s',
      (
        typeof nextElement === 'string' ?
          ' Instead of passing an element string, make sure to instantiate ' +
          'it by passing it to React.createElement.' :
        typeof nextElement === 'function' ?
          ' Instead of passing a component class, make sure to instantiate ' +
          'it by passing it to React.createElement.' :
        // Check if it quacks like an element
        nextElement != null && nextElement.props !== undefined ?
          ' This may be caused by unintentionally loading two independent ' +
          'copies of React.' :
          ''
      )
    ) : invariant(ReactElement.isValidElement(nextElement)));

    var prevComponent = instancesByReactRootID[getReactRootID(container)];

    if (prevComponent) {
      var prevElement = prevComponent._currentElement;
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        return ReactMount._updateRootComponent(
          prevComponent,
          nextElement,
          container,
          callback
        ).getPublicInstance();
      } else {
        ReactMount.unmountComponentAtNode(container);
      }
    }

    var reactRootElement = getReactRootElementInContainer(container);
    var containerHasReactMarkup =
      reactRootElement && ReactMount.isRenderedByReact(reactRootElement);

    if ("production" !== process.env.NODE_ENV) {
      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
        var rootElementSibling = reactRootElement;
        while (rootElementSibling) {
          if (ReactMount.isRenderedByReact(rootElementSibling)) {
            ("production" !== process.env.NODE_ENV ? warning(
              false,
              'render(): Target node has markup rendered by React, but there ' +
              'are unrelated nodes as well. This is most commonly caused by ' +
              'white-space inserted around server-rendered markup.'
            ) : null);
            break;
          }

          rootElementSibling = rootElementSibling.nextSibling;
        }
      }
    }

    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;

    var component = ReactMount._renderNewRootComponent(
      nextElement,
      container,
      shouldReuseMarkup
    ).getPublicInstance();
    if (callback) {
      callback.call(component);
    }
    return component;
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into the supplied `container`.
   *
   * @param {function} constructor React component constructor.
   * @param {?object} props Initial props of the component instance.
   * @param {DOMElement} container DOM element to render into.
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  constructAndRenderComponent: function(constructor, props, container) {
    var element = ReactElement.createElement(constructor, props);
    return ReactMount.render(element, container);
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into a container node identified by supplied `id`.
   *
   * @param {function} componentConstructor React component constructor
   * @param {?object} props Initial props of the component instance.
   * @param {string} id ID of the DOM element to render into.
   * @return {ReactComponent} Component instance rendered in the container node.
   */
  constructAndRenderComponentByID: function(constructor, props, id) {
    var domNode = document.getElementById(id);
    ("production" !== process.env.NODE_ENV ? invariant(
      domNode,
      'Tried to get element with id of "%s" but it is not present on the page.',
      id
    ) : invariant(domNode));
    return ReactMount.constructAndRenderComponent(constructor, props, domNode);
  },

  /**
   * Registers a container node into which React components will be rendered.
   * This also creates the "reactRoot" ID that will be assigned to the element
   * rendered within.
   *
   * @param {DOMElement} container DOM element to register as a container.
   * @return {string} The "reactRoot" ID of elements rendered within.
   */
  registerContainer: function(container) {
    var reactRootID = getReactRootID(container);
    if (reactRootID) {
      // If one exists, make sure it is a valid "reactRoot" ID.
      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
    }
    if (!reactRootID) {
      // No valid "reactRoot" ID found, create one.
      reactRootID = ReactInstanceHandles.createReactRootID();
    }
    containersByReactRootID[reactRootID] = container;
    return reactRootID;
  },

  /**
   * Unmounts and destroys the React component rendered in the `container`.
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
  unmountComponentAtNode: function(container) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (Strictly speaking, unmounting won't cause a
    // render but we still don't expect to be in a render call here.)
    ("production" !== process.env.NODE_ENV ? warning(
      ReactCurrentOwner.current == null,
      'unmountComponentAtNode(): Render methods should be a pure function of ' +
      'props and state; triggering nested component updates from render is ' +
      'not allowed. If necessary, trigger nested updates in ' +
      'componentDidUpdate.'
    ) : null);

    ("production" !== process.env.NODE_ENV ? invariant(
      container && (
        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
      ),
      'unmountComponentAtNode(...): Target container is not a DOM element.'
    ) : invariant(container && (
      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
    )));

    var reactRootID = getReactRootID(container);
    var component = instancesByReactRootID[reactRootID];
    if (!component) {
      return false;
    }
    ReactMount.unmountComponentFromNode(component, container);
    delete instancesByReactRootID[reactRootID];
    delete containersByReactRootID[reactRootID];
    if ("production" !== process.env.NODE_ENV) {
      delete rootElementsByReactRootID[reactRootID];
    }
    return true;
  },

  /**
   * Unmounts a component and removes it from the DOM.
   *
   * @param {ReactComponent} instance React component instance.
   * @param {DOMElement} container DOM element to unmount from.
   * @final
   * @internal
   * @see {ReactMount.unmountComponentAtNode}
   */
  unmountComponentFromNode: function(instance, container) {
    ReactReconciler.unmountComponent(instance);

    if (container.nodeType === DOC_NODE_TYPE) {
      container = container.documentElement;
    }

    // http://jsperf.com/emptying-a-node
    while (container.lastChild) {
      container.removeChild(container.lastChild);
    }
  },

  /**
   * Finds the container DOM element that contains React component to which the
   * supplied DOM `id` belongs.
   *
   * @param {string} id The ID of an element rendered by a React component.
   * @return {?DOMElement} DOM element that contains the `id`.
   */
  findReactContainerForID: function(id) {
    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
    var container = containersByReactRootID[reactRootID];

    if ("production" !== process.env.NODE_ENV) {
      var rootElement = rootElementsByReactRootID[reactRootID];
      if (rootElement && rootElement.parentNode !== container) {
        ("production" !== process.env.NODE_ENV ? invariant(
          // Call internalGetID here because getID calls isValid which calls
          // findReactContainerForID (this function).
          internalGetID(rootElement) === reactRootID,
          'ReactMount: Root element ID differed from reactRootID.'
        ) : invariant(// Call internalGetID here because getID calls isValid which calls
        // findReactContainerForID (this function).
        internalGetID(rootElement) === reactRootID));

        var containerChild = container.firstChild;
        if (containerChild &&
            reactRootID === internalGetID(containerChild)) {
          // If the container has a new child with the same ID as the old
          // root element, then rootElementsByReactRootID[reactRootID] is
          // just stale and needs to be updated. The case that deserves a
          // warning is when the container is empty.
          rootElementsByReactRootID[reactRootID] = containerChild;
        } else {
          ("production" !== process.env.NODE_ENV ? warning(
            false,
            'ReactMount: Root element has been removed from its original ' +
            'container. New container:', rootElement.parentNode
          ) : null);
        }
      }
    }

    return container;
  },

  /**
   * Finds an element rendered by React with the supplied ID.
   *
   * @param {string} id ID of a DOM node in the React component.
   * @return {DOMElement} Root DOM node of the React component.
   */
  findReactNodeByID: function(id) {
    var reactRoot = ReactMount.findReactContainerForID(id);
    return ReactMount.findComponentRoot(reactRoot, id);
  },

  /**
   * True if the supplied `node` is rendered by React.
   *
   * @param {*} node DOM Element to check.
   * @return {boolean} True if the DOM Element appears to be rendered by React.
   * @internal
   */
  isRenderedByReact: function(node) {
    if (node.nodeType !== 1) {
      // Not a DOMElement, therefore not a React component
      return false;
    }
    var id = ReactMount.getID(node);
    return id ? id.charAt(0) === SEPARATOR : false;
  },

  /**
   * Traverses up the ancestors of the supplied node to find a node that is a
   * DOM representation of a React component.
   *
   * @param {*} node
   * @return {?DOMEventTarget}
   * @internal
   */
  getFirstReactDOM: function(node) {
    var current = node;
    while (current && current.parentNode !== current) {
      if (ReactMount.isRenderedByReact(current)) {
        return current;
      }
      current = current.parentNode;
    }
    return null;
  },

  /**
   * Finds a node with the supplied `targetID` inside of the supplied
   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
   * quickly.
   *
   * @param {DOMEventTarget} ancestorNode Search from this root.
   * @pararm {string} targetID ID of the DOM representation of the component.
   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
   * @internal
   */
  findComponentRoot: function(ancestorNode, targetID) {
    var firstChildren = findComponentRootReusableArray;
    var childIndex = 0;

    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

    firstChildren[0] = deepestAncestor.firstChild;
    firstChildren.length = 1;

    while (childIndex < firstChildren.length) {
      var child = firstChildren[childIndex++];
      var targetChild;

      while (child) {
        var childID = ReactMount.getID(child);
        if (childID) {
          // Even if we find the node we're looking for, we finish looping
          // through its siblings to ensure they're cached so that we don't have
          // to revisit this node again. Otherwise, we make n^2 calls to getID
          // when visiting the many children of a single node in order.

          if (targetID === childID) {
            targetChild = child;
          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
            // If we find a child whose ID is an ancestor of the given ID,
            // then we can be sure that we only want to search the subtree
            // rooted at this child, so we can throw out the rest of the
            // search state.
            firstChildren.length = childIndex = 0;
            firstChildren.push(child.firstChild);
          }

        } else {
          // If this child had no ID, then there's a chance that it was
          // injected automatically by the browser, as when a `<table>`
          // element sprouts an extra `<tbody>` child as a side effect of
          // `.innerHTML` parsing. Optimistically continue down this
          // branch, but not before examining the other siblings.
          firstChildren.push(child.firstChild);
        }

        child = child.nextSibling;
      }

      if (targetChild) {
        // Emptying firstChildren/findComponentRootReusableArray is
        // not necessary for correctness, but it helps the GC reclaim
        // any nodes that were left at the end of the search.
        firstChildren.length = 0;

        return targetChild;
      }
    }

    firstChildren.length = 0;

    ("production" !== process.env.NODE_ENV ? invariant(
      false,
      'findComponentRoot(..., %s): Unable to find element. This probably ' +
      'means the DOM was unexpectedly mutated (e.g., by the browser), ' +
      'usually due to forgetting a <tbody> when using tables, nesting tags ' +
      'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' +
      'parent. ' +
      'Try inspecting the child nodes of the element with React ID `%s`.',
      targetID,
      ReactMount.getID(ancestorNode)
    ) : invariant(false));
  },

  _mountImageIntoNode: function(markup, container, shouldReuseMarkup) {
    ("production" !== process.env.NODE_ENV ? invariant(
      container && (
        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
      ),
      'mountComponentIntoNode(...): Target container is not valid.'
    ) : invariant(container && (
      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
    )));

    if (shouldReuseMarkup) {
      var rootElement = getReactRootElementInContainer(container);
      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
        return;
      } else {
        var checksum = rootElement.getAttribute(
          ReactMarkupChecksum.CHECKSUM_ATTR_NAME
        );
        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

        var rootMarkup = rootElement.outerHTML;
        rootElement.setAttribute(
          ReactMarkupChecksum.CHECKSUM_ATTR_NAME,
          checksum
        );

        var diffIndex = firstDifferenceIndex(markup, rootMarkup);
        var difference = ' (client) ' +
          markup.substring(diffIndex - 20, diffIndex + 20) +
          '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

        ("production" !== process.env.NODE_ENV ? invariant(
          container.nodeType !== DOC_NODE_TYPE,
          'You\'re trying to render a component to the document using ' +
          'server rendering but the checksum was invalid. This usually ' +
          'means you rendered a different component type or props on ' +
          'the client from the one on the server, or your render() ' +
          'methods are impure. React cannot handle this case due to ' +
          'cross-browser quirks by rendering at the document root. You ' +
          'should look for environment dependent code in your components ' +
          'and ensure the props are the same client and server side:\n%s',
          difference
        ) : invariant(container.nodeType !== DOC_NODE_TYPE));

        if ("production" !== process.env.NODE_ENV) {
          ("production" !== process.env.NODE_ENV ? warning(
            false,
            'React attempted to reuse markup in a container but the ' +
            'checksum was invalid. This generally means that you are ' +
            'using server rendering and the markup generated on the ' +
            'server was not what the client was expecting. React injected ' +
            'new markup to compensate which works but you have lost many ' +
            'of the benefits of server rendering. Instead, figure out ' +
            'why the markup being generated is different on the client ' +
            'or server:\n%s',
            difference
          ) : null);
        }
      }
    }

    ("production" !== process.env.NODE_ENV ? invariant(
      container.nodeType !== DOC_NODE_TYPE,
      'You\'re trying to render a component to the document but ' +
        'you didn\'t use server rendering. We can\'t do this ' +
        'without using server rendering due to cross-browser quirks. ' +
        'See React.renderToString() for server rendering.'
    ) : invariant(container.nodeType !== DOC_NODE_TYPE));

    setInnerHTML(container, markup);
  },

  /**
   * React ID utilities.
   */

  getReactRootID: getReactRootID,

  getID: getID,

  setID: setID,

  getNode: getNode,

  getNodeFromInstance: getNodeFromInstance,

  purgeID: purgeID
};

ReactPerf.measureMethods(ReactMount, 'ReactMount', {
  _renderNewRootComponent: '_renderNewRootComponent',
  _mountImageIntoNode: '_mountImageIntoNode'
});

module.exports = ReactMount;

}).call(this,require('_process'))
},{"./DOMProperty":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/DOMProperty.js","./ReactBrowserEventEmitter":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactBrowserEventEmitter.js","./ReactCurrentOwner":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactCurrentOwner.js","./ReactElement":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactElement.js","./ReactElementValidator":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactElementValidator.js","./ReactEmptyComponent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactEmptyComponent.js","./ReactInstanceHandles":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactInstanceHandles.js","./ReactInstanceMap":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactInstanceMap.js","./ReactMarkupChecksum":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactMarkupChecksum.js","./ReactPerf":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactPerf.js","./ReactReconciler":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactReconciler.js","./ReactUpdateQueue":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactUpdateQueue.js","./ReactUpdates":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactUpdates.js","./containsNode":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/containsNode.js","./emptyObject":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/emptyObject.js","./getReactRootElementInContainer":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/getReactRootElementInContainer.js","./instantiateReactComponent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/instantiateReactComponent.js","./invariant":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/invariant.js","./setInnerHTML":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/setInnerHTML.js","./shouldUpdateReactComponent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/shouldUpdateReactComponent.js","./warning":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/warning.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactMultiChild.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChild
 * @typechecks static-only
 */

'use strict';

var ReactComponentEnvironment = require("./ReactComponentEnvironment");
var ReactMultiChildUpdateTypes = require("./ReactMultiChildUpdateTypes");

var ReactReconciler = require("./ReactReconciler");
var ReactChildReconciler = require("./ReactChildReconciler");

/**
 * Updating children of a component may trigger recursive updates. The depth is
 * used to batch recursive updates to render markup more efficiently.
 *
 * @type {number}
 * @private
 */
var updateDepth = 0;

/**
 * Queue of update configuration objects.
 *
 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
 *
 * @type {array<object>}
 * @private
 */
var updateQueue = [];

/**
 * Queue of markup to be rendered.
 *
 * @type {array<string>}
 * @private
 */
var markupQueue = [];

/**
 * Enqueues markup to be rendered and inserted at a supplied index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function enqueueMarkup(parentID, markup, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
    markupIndex: markupQueue.push(markup) - 1,
    textContent: null,
    fromIndex: null,
    toIndex: toIndex
  });
}

/**
 * Enqueues moving an existing element to another index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function enqueueMove(parentID, fromIndex, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
    markupIndex: null,
    textContent: null,
    fromIndex: fromIndex,
    toIndex: toIndex
  });
}

/**
 * Enqueues removing an element at an index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function enqueueRemove(parentID, fromIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
    markupIndex: null,
    textContent: null,
    fromIndex: fromIndex,
    toIndex: null
  });
}

/**
 * Enqueues setting the text content.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} textContent Text content to set.
 * @private
 */
function enqueueTextContent(parentID, textContent) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
    markupIndex: null,
    textContent: textContent,
    fromIndex: null,
    toIndex: null
  });
}

/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue() {
  if (updateQueue.length) {
    ReactComponentEnvironment.processChildrenUpdates(
      updateQueue,
      markupQueue
    );
    clearQueue();
  }
}

/**
 * Clears any enqueued updates.
 *
 * @private
 */
function clearQueue() {
  updateQueue.length = 0;
  markupQueue.length = 0;
}

/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = {

  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: {

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function(nestedChildren, transaction, context) {
      var children = ReactChildReconciler.instantiateChildren(
        nestedChildren, transaction, context
      );
      this._renderedChildren = children;
      var mountImages = [];
      var index = 0;
      for (var name in children) {
        if (children.hasOwnProperty(name)) {
          var child = children[name];
          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
          var rootID = this._rootNodeID + name;
          var mountImage = ReactReconciler.mountComponent(
            child,
            rootID,
            transaction,
            context
          );
          child._mountIndex = index;
          mountImages.push(mountImage);
          index++;
        }
      }
      return mountImages;
    },

    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function(nextContent) {
      updateDepth++;
      var errorThrown = true;
      try {
        var prevChildren = this._renderedChildren;
        // Remove any rendered children.
        ReactChildReconciler.unmountChildren(prevChildren);
        // TODO: The setTextContent operation should be enough
        for (var name in prevChildren) {
          if (prevChildren.hasOwnProperty(name)) {
            this._unmountChildByName(prevChildren[name], name);
          }
        }
        // Set new text content.
        this.setTextContent(nextContent);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          if (errorThrown) {
            clearQueue();
          } else {
            processQueue();
          }
        }
      }
    },

    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildren Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function(nextNestedChildren, transaction, context) {
      updateDepth++;
      var errorThrown = true;
      try {
        this._updateChildren(nextNestedChildren, transaction, context);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          if (errorThrown) {
            clearQueue();
          } else {
            processQueue();
          }
        }

      }
    },

    /**
     * Improve performance by isolating this hot code path from the try/catch
     * block in `updateChildren`.
     *
     * @param {?object} nextNestedChildren Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function(nextNestedChildren, transaction, context) {
      var prevChildren = this._renderedChildren;
      var nextChildren = ReactChildReconciler.updateChildren(
        prevChildren, nextNestedChildren, transaction, context
      );
      this._renderedChildren = nextChildren;
      if (!nextChildren && !prevChildren) {
        return;
      }
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var lastIndex = 0;
      var nextIndex = 0;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var nextChild = nextChildren[name];
        if (prevChild === nextChild) {
          this.moveChild(prevChild, nextIndex, lastIndex);
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild._mountIndex = nextIndex;
        } else {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            this._unmountChildByName(prevChild, name);
          }
          // The child must be instantiated before it's mounted.
          this._mountChildByNameAtIndex(
            nextChild, name, nextIndex, transaction, context
          );
        }
        nextIndex++;
      }
      // Remove children that are no longer present.
      for (name in prevChildren) {
        if (prevChildren.hasOwnProperty(name) &&
            !(nextChildren && nextChildren.hasOwnProperty(name))) {
          this._unmountChildByName(prevChildren[name], name);
        }
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted.
     *
     * @internal
     */
    unmountChildren: function() {
      var renderedChildren = this._renderedChildren;
      ReactChildReconciler.unmountChildren(renderedChildren);
      this._renderedChildren = null;
    },

    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function(child, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
      }
    },

    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function(child, mountImage) {
      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);
    },

    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function(child) {
      enqueueRemove(this._rootNodeID, child._mountIndex);
    },

    /**
     * Sets this text content string.
     *
     * @param {string} textContent Text content to set.
     * @protected
     */
    setTextContent: function(textContent) {
      enqueueTextContent(this._rootNodeID, textContent);
    },

    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildByNameAtIndex: function(
      child,
      name,
      index,
      transaction,
      context) {
      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
      var rootID = this._rootNodeID + name;
      var mountImage = ReactReconciler.mountComponent(
        child,
        rootID,
        transaction,
        context
      );
      child._mountIndex = index;
      this.createChild(child, mountImage);
    },

    /**
     * Unmounts a rendered child by name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @param {string} name Name of the child in `this._renderedChildren`.
     * @private
     */
    _unmountChildByName: function(child, name) {
      this.removeChild(child);
      child._mountIndex = null;
    }

  }

};

module.exports = ReactMultiChild;

},{"./ReactChildReconciler":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactChildReconciler.js","./ReactComponentEnvironment":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactComponentEnvironment.js","./ReactMultiChildUpdateTypes":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactMultiChildUpdateTypes.js","./ReactReconciler":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactReconciler.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactMultiChildUpdateTypes.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChildUpdateTypes
 */

'use strict';

var keyMirror = require("./keyMirror");

/**
 * When a component's children are updated, a series of update configuration
 * objects are created in order to batch and serialize the required changes.
 *
 * Enumerates all the possible types of update configurations.
 *
 * @internal
 */
var ReactMultiChildUpdateTypes = keyMirror({
  INSERT_MARKUP: null,
  MOVE_EXISTING: null,
  REMOVE_NODE: null,
  TEXT_CONTENT: null
});

module.exports = ReactMultiChildUpdateTypes;

},{"./keyMirror":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/keyMirror.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactNativeComponent.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNativeComponent
 */

'use strict';

var assign = require("./Object.assign");
var invariant = require("./invariant");

var autoGenerateWrapperClass = null;
var genericComponentClass = null;
// This registry keeps track of wrapper classes around native tags
var tagToComponentClass = {};
var textComponentClass = null;

var ReactNativeComponentInjection = {
  // This accepts a class that receives the tag string. This is a catch all
  // that can render any kind of tag.
  injectGenericComponentClass: function(componentClass) {
    genericComponentClass = componentClass;
  },
  // This accepts a text component class that takes the text string to be
  // rendered as props.
  injectTextComponentClass: function(componentClass) {
    textComponentClass = componentClass;
  },
  // This accepts a keyed object with classes as values. Each key represents a
  // tag. That particular tag will use this class instead of the generic one.
  injectComponentClasses: function(componentClasses) {
    assign(tagToComponentClass, componentClasses);
  },
  // Temporary hack since we expect DOM refs to behave like composites,
  // for this release.
  injectAutoWrapper: function(wrapperFactory) {
    autoGenerateWrapperClass = wrapperFactory;
  }
};

/**
 * Get a composite component wrapper class for a specific tag.
 *
 * @param {ReactElement} element The tag for which to get the class.
 * @return {function} The React class constructor function.
 */
function getComponentClassForElement(element) {
  if (typeof element.type === 'function') {
    return element.type;
  }
  var tag = element.type;
  var componentClass = tagToComponentClass[tag];
  if (componentClass == null) {
    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
  }
  return componentClass;
}

/**
 * Get a native internal component class for a specific tag.
 *
 * @param {ReactElement} element The element to create.
 * @return {function} The internal class constructor function.
 */
function createInternalComponent(element) {
  ("production" !== process.env.NODE_ENV ? invariant(
    genericComponentClass,
    'There is no registered component for the tag %s',
    element.type
  ) : invariant(genericComponentClass));
  return new genericComponentClass(element.type, element.props);
}

/**
 * @param {ReactText} text
 * @return {ReactComponent}
 */
function createInstanceForText(text) {
  return new textComponentClass(text);
}

/**
 * @param {ReactComponent} component
 * @return {boolean}
 */
function isTextComponent(component) {
  return component instanceof textComponentClass;
}

var ReactNativeComponent = {
  getComponentClassForElement: getComponentClassForElement,
  createInternalComponent: createInternalComponent,
  createInstanceForText: createInstanceForText,
  isTextComponent: isTextComponent,
  injection: ReactNativeComponentInjection
};

module.exports = ReactNativeComponent;

}).call(this,require('_process'))
},{"./Object.assign":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/Object.assign.js","./invariant":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/invariant.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactOwner.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactOwner
 */

'use strict';

var invariant = require("./invariant");

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = {

  /**
   * @param {?object} object
   * @return {boolean} True if `object` is a valid owner.
   * @final
   */
  isValidOwner: function(object) {
    return !!(
      (object &&
      typeof object.attachRef === 'function' && typeof object.detachRef === 'function')
    );
  },

  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function(component, ref, owner) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ReactOwner.isValidOwner(owner),
      'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' +
      'usually means that you\'re trying to add a ref to a component that ' +
      'doesn\'t have an owner (that is, was not created inside of another ' +
      'component\'s `render` method). Try rendering this component inside of ' +
      'a new top-level component which will hold the ref.'
    ) : invariant(ReactOwner.isValidOwner(owner)));
    owner.attachRef(ref, component);
  },

  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function(component, ref, owner) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ReactOwner.isValidOwner(owner),
      'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' +
      'usually means that you\'re trying to remove a ref to a component that ' +
      'doesn\'t have an owner (that is, was not created inside of another ' +
      'component\'s `render` method). Try rendering this component inside of ' +
      'a new top-level component which will hold the ref.'
    ) : invariant(ReactOwner.isValidOwner(owner)));
    // Check that `component` is still the current ref because we do not want to
    // detach the ref if another component stole it.
    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
      owner.detachRef(ref);
    }
  }

};

module.exports = ReactOwner;

}).call(this,require('_process'))
},{"./invariant":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/invariant.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactPerf.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPerf
 * @typechecks static-only
 */

'use strict';

/**
 * ReactPerf is a general AOP system designed to measure performance. This
 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
 */
var ReactPerf = {
  /**
   * Boolean to enable/disable measurement. Set to false by default to prevent
   * accidental logging and perf loss.
   */
  enableMeasure: false,

  /**
   * Holds onto the measure function in use. By default, don't measure
   * anything, but we'll override this if we inject a measure function.
   */
  storedMeasure: _noMeasure,

  /**
   * @param {object} object
   * @param {string} objectName
   * @param {object<string>} methodNames
   */
  measureMethods: function(object, objectName, methodNames) {
    if ("production" !== process.env.NODE_ENV) {
      for (var key in methodNames) {
        if (!methodNames.hasOwnProperty(key)) {
          continue;
        }
        object[key] = ReactPerf.measure(
          objectName,
          methodNames[key],
          object[key]
        );
      }
    }
  },

  /**
   * Use this to wrap methods you want to measure. Zero overhead in production.
   *
   * @param {string} objName
   * @param {string} fnName
   * @param {function} func
   * @return {function}
   */
  measure: function(objName, fnName, func) {
    if ("production" !== process.env.NODE_ENV) {
      var measuredFunc = null;
      var wrapper = function() {
        if (ReactPerf.enableMeasure) {
          if (!measuredFunc) {
            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
          }
          return measuredFunc.apply(this, arguments);
        }
        return func.apply(this, arguments);
      };
      wrapper.displayName = objName + '_' + fnName;
      return wrapper;
    }
    return func;
  },

  injection: {
    /**
     * @param {function} measure
     */
    injectMeasure: function(measure) {
      ReactPerf.storedMeasure = measure;
    }
  }
};

/**
 * Simply passes through the measured function, without measuring it.
 *
 * @param {string} objName
 * @param {string} fnName
 * @param {function} func
 * @return {function}
 */
function _noMeasure(objName, fnName, func) {
  return func;
}

module.exports = ReactPerf;

}).call(this,require('_process'))
},{"_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactPropTypeLocationNames.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocationNames
 */

'use strict';

var ReactPropTypeLocationNames = {};

if ("production" !== process.env.NODE_ENV) {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;

}).call(this,require('_process'))
},{"_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactPropTypeLocations.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocations
 */

'use strict';

var keyMirror = require("./keyMirror");

var ReactPropTypeLocations = keyMirror({
  prop: null,
  context: null,
  childContext: null
});

module.exports = ReactPropTypeLocations;

},{"./keyMirror":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/keyMirror.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactPropTypes.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypes
 */

'use strict';

var ReactElement = require("./ReactElement");
var ReactFragment = require("./ReactFragment");
var ReactPropTypeLocationNames = require("./ReactPropTypeLocationNames");

var emptyFunction = require("./emptyFunction");

/**
 * Collection of methods that allow declaration and validation of props that are
 * supplied to React components. Example usage:
 *
 *   var Props = require('ReactPropTypes');
 *   var MyArticle = React.createClass({
 *     propTypes: {
 *       // An optional string prop named "description".
 *       description: Props.string,
 *
 *       // A required enum prop named "category".
 *       category: Props.oneOf(['News','Photos']).isRequired,
 *
 *       // A prop named "dialog" that requires an instance of Dialog.
 *       dialog: Props.instanceOf(Dialog).isRequired
 *     },
 *     render: function() { ... }
 *   });
 *
 * A more formal specification of how these methods are used:
 *
 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
 *   decl := ReactPropTypes.{type}(.isRequired)?
 *
 * Each and every declaration produces a function with the same signature. This
 * allows the creation of custom validation functions. For example:
 *
 *  var MyLink = React.createClass({
 *    propTypes: {
 *      // An optional string or URI prop named "href".
 *      href: function(props, propName, componentName) {
 *        var propValue = props[propName];
 *        if (propValue != null && typeof propValue !== 'string' &&
 *            !(propValue instanceof URI)) {
 *          return new Error(
 *            'Expected a string or an URI for ' + propName + ' in ' +
 *            componentName
 *          );
 *        }
 *      }
 *    },
 *    render: function() {...}
 *  });
 *
 * @internal
 */

var ANONYMOUS = '<<anonymous>>';

var elementTypeChecker = createElementTypeChecker();
var nodeTypeChecker = createNodeChecker();

var ReactPropTypes = {
  array: createPrimitiveTypeChecker('array'),
  bool: createPrimitiveTypeChecker('boolean'),
  func: createPrimitiveTypeChecker('function'),
  number: createPrimitiveTypeChecker('number'),
  object: createPrimitiveTypeChecker('object'),
  string: createPrimitiveTypeChecker('string'),

  any: createAnyTypeChecker(),
  arrayOf: createArrayOfTypeChecker,
  element: elementTypeChecker,
  instanceOf: createInstanceTypeChecker,
  node: nodeTypeChecker,
  objectOf: createObjectOfTypeChecker,
  oneOf: createEnumTypeChecker,
  oneOfType: createUnionTypeChecker,
  shape: createShapeTypeChecker
};

function createChainableTypeChecker(validate) {
  function checkType(isRequired, props, propName, componentName, location) {
    componentName = componentName || ANONYMOUS;
    if (props[propName] == null) {
      var locationName = ReactPropTypeLocationNames[location];
      if (isRequired) {
        return new Error(
          ("Required " + locationName + " `" + propName + "` was not specified in ") +
          ("`" + componentName + "`.")
        );
      }
      return null;
    } else {
      return validate(props, propName, componentName, location);
    }
  }

  var chainedCheckType = checkType.bind(null, false);
  chainedCheckType.isRequired = checkType.bind(null, true);

  return chainedCheckType;
}

function createPrimitiveTypeChecker(expectedType) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== expectedType) {
      var locationName = ReactPropTypeLocationNames[location];
      // `propValue` being instance of, say, date/regexp, pass the 'object'
      // check, but we can offer a more precise error message here rather than
      // 'of type `object`'.
      var preciseType = getPreciseType(propValue);

      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type `" + preciseType + "` ") +
        ("supplied to `" + componentName + "`, expected `" + expectedType + "`.")
      );
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createAnyTypeChecker() {
  return createChainableTypeChecker(emptyFunction.thatReturns(null));
}

function createArrayOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    if (!Array.isArray(propValue)) {
      var locationName = ReactPropTypeLocationNames[location];
      var propType = getPropType(propValue);
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type ") +
        ("`" + propType + "` supplied to `" + componentName + "`, expected an array.")
      );
    }
    for (var i = 0; i < propValue.length; i++) {
      var error = typeChecker(propValue, i, componentName, location);
      if (error instanceof Error) {
        return error;
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createElementTypeChecker() {
  function validate(props, propName, componentName, location) {
    if (!ReactElement.isValidElement(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected a ReactElement.")
      );
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createInstanceTypeChecker(expectedClass) {
  function validate(props, propName, componentName, location) {
    if (!(props[propName] instanceof expectedClass)) {
      var locationName = ReactPropTypeLocationNames[location];
      var expectedClassName = expectedClass.name || ANONYMOUS;
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected instance of `" + expectedClassName + "`.")
      );
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createEnumTypeChecker(expectedValues) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    for (var i = 0; i < expectedValues.length; i++) {
      if (propValue === expectedValues[i]) {
        return null;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    var valuesString = JSON.stringify(expectedValues);
    return new Error(
      ("Invalid " + locationName + " `" + propName + "` of value `" + propValue + "` ") +
      ("supplied to `" + componentName + "`, expected one of " + valuesString + ".")
    );
  }
  return createChainableTypeChecker(validate);
}

function createObjectOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type ") +
        ("`" + propType + "` supplied to `" + componentName + "`, expected an object.")
      );
    }
    for (var key in propValue) {
      if (propValue.hasOwnProperty(key)) {
        var error = typeChecker(propValue, key, componentName, location);
        if (error instanceof Error) {
          return error;
        }
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createUnionTypeChecker(arrayOfTypeCheckers) {
  function validate(props, propName, componentName, location) {
    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (checker(props, propName, componentName, location) == null) {
        return null;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    return new Error(
      ("Invalid " + locationName + " `" + propName + "` supplied to ") +
      ("`" + componentName + "`.")
    );
  }
  return createChainableTypeChecker(validate);
}

function createNodeChecker() {
  function validate(props, propName, componentName, location) {
    if (!isNode(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected a ReactNode.")
      );
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createShapeTypeChecker(shapeTypes) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type `" + propType + "` ") +
        ("supplied to `" + componentName + "`, expected `object`.")
      );
    }
    for (var key in shapeTypes) {
      var checker = shapeTypes[key];
      if (!checker) {
        continue;
      }
      var error = checker(propValue, key, componentName, location);
      if (error) {
        return error;
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function isNode(propValue) {
  switch (typeof propValue) {
    case 'number':
    case 'string':
    case 'undefined':
      return true;
    case 'boolean':
      return !propValue;
    case 'object':
      if (Array.isArray(propValue)) {
        return propValue.every(isNode);
      }
      if (propValue === null || ReactElement.isValidElement(propValue)) {
        return true;
      }
      propValue = ReactFragment.extractIfFragment(propValue);
      for (var k in propValue) {
        if (!isNode(propValue[k])) {
          return false;
        }
      }
      return true;
    default:
      return false;
  }
}

// Equivalent of `typeof` but with special handling for array and regexp.
function getPropType(propValue) {
  var propType = typeof propValue;
  if (Array.isArray(propValue)) {
    return 'array';
  }
  if (propValue instanceof RegExp) {
    // Old webkits (at least until Android 4.0) return 'function' rather than
    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    // passes PropTypes.object.
    return 'object';
  }
  return propType;
}

// This handles more types than `getPropType`. Only used for error messages.
// See `createPrimitiveTypeChecker`.
function getPreciseType(propValue) {
  var propType = getPropType(propValue);
  if (propType === 'object') {
    if (propValue instanceof Date) {
      return 'date';
    } else if (propValue instanceof RegExp) {
      return 'regexp';
    }
  }
  return propType;
}

module.exports = ReactPropTypes;

},{"./ReactElement":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactElement.js","./ReactFragment":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactFragment.js","./ReactPropTypeLocationNames":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactPropTypeLocationNames.js","./emptyFunction":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/emptyFunction.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactPutListenerQueue.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPutListenerQueue
 */

'use strict';

var PooledClass = require("./PooledClass");
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");

var assign = require("./Object.assign");

function ReactPutListenerQueue() {
  this.listenersToPut = [];
}

assign(ReactPutListenerQueue.prototype, {
  enqueuePutListener: function(rootNodeID, propKey, propValue) {
    this.listenersToPut.push({
      rootNodeID: rootNodeID,
      propKey: propKey,
      propValue: propValue
    });
  },

  putListeners: function() {
    for (var i = 0; i < this.listenersToPut.length; i++) {
      var listenerToPut = this.listenersToPut[i];
      ReactBrowserEventEmitter.putListener(
        listenerToPut.rootNodeID,
        listenerToPut.propKey,
        listenerToPut.propValue
      );
    }
  },

  reset: function() {
    this.listenersToPut.length = 0;
  },

  destructor: function() {
    this.reset();
  }
});

PooledClass.addPoolingTo(ReactPutListenerQueue);

module.exports = ReactPutListenerQueue;

},{"./Object.assign":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/Object.assign.js","./PooledClass":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/PooledClass.js","./ReactBrowserEventEmitter":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactBrowserEventEmitter.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactReconcileTransaction.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReconcileTransaction
 * @typechecks static-only
 */

'use strict';

var CallbackQueue = require("./CallbackQueue");
var PooledClass = require("./PooledClass");
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");
var ReactInputSelection = require("./ReactInputSelection");
var ReactPutListenerQueue = require("./ReactPutListenerQueue");
var Transaction = require("./Transaction");

var assign = require("./Object.assign");

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
  initialize: function() {
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
    ReactBrowserEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occured. `close`
   *   restores the previous value.
   */
  close: function(previouslyEnabled) {
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function() {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function() {
    this.reactMountReady.notifyAll();
  }
};

var PUT_LISTENER_QUEUEING = {
  initialize: function() {
    this.putListenerQueue.reset();
  },

  close: function() {
    this.putListenerQueue.putListeners();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [
  PUT_LISTENER_QUEUEING,
  SELECTION_RESTORATION,
  EVENT_SUPPRESSION,
  ON_DOM_READY_QUEUEING
];

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction() {
  this.reinitializeTransaction();
  // Only server-side rendering really needs this option (see
  // `ReactServerRendering`), but server-side uses
  // `ReactServerRenderingTransaction` instead. This option is here so that it's
  // accessible and defaults to false when `ReactDOMComponent` and
  // `ReactTextComponent` checks it in `mountComponent`.`
  this.renderToStaticMarkup = false;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.putListenerQueue = ReactPutListenerQueue.getPooled();
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap proceedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function() {
    return this.reactMountReady;
  },

  getPutListenerQueue: function() {
    return this.putListenerQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be resused.
   */
  destructor: function() {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;

    ReactPutListenerQueue.release(this.putListenerQueue);
    this.putListenerQueue = null;
  }
};


assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;

},{"./CallbackQueue":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/CallbackQueue.js","./Object.assign":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/Object.assign.js","./PooledClass":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/PooledClass.js","./ReactBrowserEventEmitter":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactBrowserEventEmitter.js","./ReactInputSelection":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactInputSelection.js","./ReactPutListenerQueue":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactPutListenerQueue.js","./Transaction":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/Transaction.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactReconciler.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReconciler
 */

'use strict';

var ReactRef = require("./ReactRef");
var ReactElementValidator = require("./ReactElementValidator");

/**
 * Helper to call ReactRef.attachRefs with this composite component, split out
 * to avoid allocations in the transaction mount-ready queue.
 */
function attachRefs() {
  ReactRef.attachRefs(this, this._currentElement);
}

var ReactReconciler = {

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactComponent} internalInstance
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function(internalInstance, rootID, transaction, context) {
    var markup = internalInstance.mountComponent(rootID, transaction, context);
    if ("production" !== process.env.NODE_ENV) {
      ReactElementValidator.checkAndWarnForMutatedProps(
        internalInstance._currentElement
      );
    }
    transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    return markup;
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function(internalInstance) {
    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
    internalInstance.unmountComponent();
  },

  /**
   * Update a component using a new element.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @internal
   */
  receiveComponent: function(
    internalInstance, nextElement, transaction, context
  ) {
    var prevElement = internalInstance._currentElement;

    if (nextElement === prevElement && nextElement._owner != null) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for an element created outside a composite to be
      // deeply mutated and reused.
      return;
    }

    if ("production" !== process.env.NODE_ENV) {
      ReactElementValidator.checkAndWarnForMutatedProps(nextElement);
    }

    var refsChanged = ReactRef.shouldUpdateRefs(
      prevElement,
      nextElement
    );

    if (refsChanged) {
      ReactRef.detachRefs(internalInstance, prevElement);
    }

    internalInstance.receiveComponent(nextElement, transaction, context);

    if (refsChanged) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }
  },

  /**
   * Flush any dirty changes in a component.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function(
    internalInstance,
    transaction
  ) {
    internalInstance.performUpdateIfNecessary(transaction);
  }

};

module.exports = ReactReconciler;

}).call(this,require('_process'))
},{"./ReactElementValidator":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactElementValidator.js","./ReactRef":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactRef.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactRef.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactRef
 */

'use strict';

var ReactOwner = require("./ReactOwner");

var ReactRef = {};

function attachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(component.getPublicInstance());
  } else {
    // Legacy ref
    ReactOwner.addComponentAsRefTo(component, ref, owner);
  }
}

function detachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(null);
  } else {
    // Legacy ref
    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
  }
}

ReactRef.attachRefs = function(instance, element) {
  var ref = element.ref;
  if (ref != null) {
    attachRef(ref, instance, element._owner);
  }
};

ReactRef.shouldUpdateRefs = function(prevElement, nextElement) {
  // If either the owner or a `ref` has changed, make sure the newest owner
  // has stored a reference to `this`, and the previous owner (if different)
  // has forgotten the reference to `this`. We use the element instead
  // of the public this.props because the post processing cannot determine
  // a ref. The ref conceptually lives on the element.

  // TODO: Should this even be possible? The owner cannot change because
  // it's forbidden by shouldUpdateReactComponent. The ref can change
  // if you swap the keys of but not the refs. Reconsider where this check
  // is made. It probably belongs where the key checking and
  // instantiateReactComponent is done.

  return (
    nextElement._owner !== prevElement._owner ||
    nextElement.ref !== prevElement.ref
  );
};

ReactRef.detachRefs = function(instance, element) {
  var ref = element.ref;
  if (ref != null) {
    detachRef(ref, instance, element._owner);
  }
};

module.exports = ReactRef;

},{"./ReactOwner":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactOwner.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactRootIndex.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactRootIndex
 * @typechecks
 */

'use strict';

var ReactRootIndexInjection = {
  /**
   * @param {function} _createReactRootIndex
   */
  injectCreateReactRootIndex: function(_createReactRootIndex) {
    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
  }
};

var ReactRootIndex = {
  createReactRootIndex: null,
  injection: ReactRootIndexInjection
};

module.exports = ReactRootIndex;

},{}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactServerRendering.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks static-only
 * @providesModule ReactServerRendering
 */
'use strict';

var ReactElement = require("./ReactElement");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactMarkupChecksum = require("./ReactMarkupChecksum");
var ReactServerRenderingTransaction =
  require("./ReactServerRenderingTransaction");

var emptyObject = require("./emptyObject");
var instantiateReactComponent = require("./instantiateReactComponent");
var invariant = require("./invariant");

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup
 */
function renderToString(element) {
  ("production" !== process.env.NODE_ENV ? invariant(
    ReactElement.isValidElement(element),
    'renderToString(): You must pass a valid ReactElement.'
  ) : invariant(ReactElement.isValidElement(element)));

  var transaction;
  try {
    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(false);

    return transaction.perform(function() {
      var componentInstance = instantiateReactComponent(element, null);
      var markup =
        componentInstance.mountComponent(id, transaction, emptyObject);
      return ReactMarkupChecksum.addChecksumToMarkup(markup);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
  }
}

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup, without the extra React ID and checksum
 * (for generating static pages)
 */
function renderToStaticMarkup(element) {
  ("production" !== process.env.NODE_ENV ? invariant(
    ReactElement.isValidElement(element),
    'renderToStaticMarkup(): You must pass a valid ReactElement.'
  ) : invariant(ReactElement.isValidElement(element)));

  var transaction;
  try {
    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(true);

    return transaction.perform(function() {
      var componentInstance = instantiateReactComponent(element, null);
      return componentInstance.mountComponent(id, transaction, emptyObject);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
  }
}

module.exports = {
  renderToString: renderToString,
  renderToStaticMarkup: renderToStaticMarkup
};

}).call(this,require('_process'))
},{"./ReactElement":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactElement.js","./ReactInstanceHandles":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactInstanceHandles.js","./ReactMarkupChecksum":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactMarkupChecksum.js","./ReactServerRenderingTransaction":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactServerRenderingTransaction.js","./emptyObject":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/emptyObject.js","./instantiateReactComponent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/instantiateReactComponent.js","./invariant":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/invariant.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactServerRenderingTransaction.js":[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactServerRenderingTransaction
 * @typechecks
 */

'use strict';

var PooledClass = require("./PooledClass");
var CallbackQueue = require("./CallbackQueue");
var ReactPutListenerQueue = require("./ReactPutListenerQueue");
var Transaction = require("./Transaction");

var assign = require("./Object.assign");
var emptyFunction = require("./emptyFunction");

/**
 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
 * during the performing of the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function() {
    this.reactMountReady.reset();
  },

  close: emptyFunction
};

var PUT_LISTENER_QUEUEING = {
  initialize: function() {
    this.putListenerQueue.reset();
  },

  close: emptyFunction
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [
  PUT_LISTENER_QUEUEING,
  ON_DOM_READY_QUEUEING
];

/**
 * @class ReactServerRenderingTransaction
 * @param {boolean} renderToStaticMarkup
 */
function ReactServerRenderingTransaction(renderToStaticMarkup) {
  this.reinitializeTransaction();
  this.renderToStaticMarkup = renderToStaticMarkup;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.putListenerQueue = ReactPutListenerQueue.getPooled();
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap proceedures.
   */
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function() {
    return this.reactMountReady;
  },

  getPutListenerQueue: function() {
    return this.putListenerQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be resused.
   */
  destructor: function() {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;

    ReactPutListenerQueue.release(this.putListenerQueue);
    this.putListenerQueue = null;
  }
};


assign(
  ReactServerRenderingTransaction.prototype,
  Transaction.Mixin,
  Mixin
);

PooledClass.addPoolingTo(ReactServerRenderingTransaction);

module.exports = ReactServerRenderingTransaction;

},{"./CallbackQueue":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/CallbackQueue.js","./Object.assign":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/Object.assign.js","./PooledClass":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/PooledClass.js","./ReactPutListenerQueue":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactPutListenerQueue.js","./Transaction":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/Transaction.js","./emptyFunction":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/emptyFunction.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactUpdateQueue.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactUpdateQueue
 */

'use strict';

var ReactLifeCycle = require("./ReactLifeCycle");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactElement = require("./ReactElement");
var ReactInstanceMap = require("./ReactInstanceMap");
var ReactUpdates = require("./ReactUpdates");

var assign = require("./Object.assign");
var invariant = require("./invariant");
var warning = require("./warning");

function enqueueUpdate(internalInstance) {
  if (internalInstance !== ReactLifeCycle.currentlyMountingInstance) {
    // If we're in a componentWillMount handler, don't enqueue a rerender
    // because ReactUpdates assumes we're in a browser context (which is
    // wrong for server rendering) and we're about to do a render anyway.
    // See bug in #1740.
    ReactUpdates.enqueueUpdate(internalInstance);
  }
}

function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
  ("production" !== process.env.NODE_ENV ? invariant(
    ReactCurrentOwner.current == null,
    '%s(...): Cannot update during an existing state transition ' +
    '(such as within `render`). Render methods should be a pure function ' +
    'of props and state.',
    callerName
  ) : invariant(ReactCurrentOwner.current == null));

  var internalInstance = ReactInstanceMap.get(publicInstance);
  if (!internalInstance) {
    if ("production" !== process.env.NODE_ENV) {
      // Only warn when we have a callerName. Otherwise we should be silent.
      // We're probably calling from enqueueCallback. We don't want to warn
      // there because we already warned for the corresponding lifecycle method.
      ("production" !== process.env.NODE_ENV ? warning(
        !callerName,
        '%s(...): Can only update a mounted or mounting component. ' +
        'This usually means you called %s() on an unmounted ' +
        'component. This is a no-op.',
        callerName,
        callerName
      ) : null);
    }
    return null;
  }

  if (internalInstance === ReactLifeCycle.currentlyUnmountingInstance) {
    return null;
  }

  return internalInstance;
}

/**
 * ReactUpdateQueue allows for state updates to be scheduled into a later
 * reconciliation step.
 */
var ReactUpdateQueue = {

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */
  enqueueCallback: function(publicInstance, callback) {
    ("production" !== process.env.NODE_ENV ? invariant(
      typeof callback === 'function',
      'enqueueCallback(...): You called `setProps`, `replaceProps`, ' +
      '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
      'isn\'t callable.'
    ) : invariant(typeof callback === 'function'));
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

    // Previously we would throw an error if we didn't have an internal
    // instance. Since we want to make it a no-op instead, we mirror the same
    // behavior we have in other enqueue* methods.
    // We also need to ignore callbacks in componentWillMount. See
    // enqueueUpdates.
    if (!internalInstance ||
        internalInstance === ReactLifeCycle.currentlyMountingInstance) {
      return null;
    }

    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    // TODO: The callback here is ignored when setState is called from
    // componentWillMount. Either fix it or disallow doing so completely in
    // favor of getInitialState. Alternatively, we can disallow
    // componentWillMount during server-side rendering.
    enqueueUpdate(internalInstance);
  },

  enqueueCallbackInternal: function(internalInstance, callback) {
    ("production" !== process.env.NODE_ENV ? invariant(
      typeof callback === 'function',
      'enqueueCallback(...): You called `setProps`, `replaceProps`, ' +
      '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
      'isn\'t callable.'
    ) : invariant(typeof callback === 'function'));
    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    enqueueUpdate(internalInstance);
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldUpdateComponent`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function(publicInstance) {
    var internalInstance = getInternalInstanceReadyForUpdate(
      publicInstance,
      'forceUpdate'
    );

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingForceUpdate = true;

    enqueueUpdate(internalInstance);
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function(publicInstance, completeState) {
    var internalInstance = getInternalInstanceReadyForUpdate(
      publicInstance,
      'replaceState'
    );

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingStateQueue = [completeState];
    internalInstance._pendingReplaceState = true;

    enqueueUpdate(internalInstance);
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function(publicInstance, partialState) {
    var internalInstance = getInternalInstanceReadyForUpdate(
      publicInstance,
      'setState'
    );

    if (!internalInstance) {
      return;
    }

    var queue =
      internalInstance._pendingStateQueue ||
      (internalInstance._pendingStateQueue = []);
    queue.push(partialState);

    enqueueUpdate(internalInstance);
  },

  /**
   * Sets a subset of the props.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialProps Subset of the next props.
   * @internal
   */
  enqueueSetProps: function(publicInstance, partialProps) {
    var internalInstance = getInternalInstanceReadyForUpdate(
      publicInstance,
      'setProps'
    );

    if (!internalInstance) {
      return;
    }

    ("production" !== process.env.NODE_ENV ? invariant(
      internalInstance._isTopLevel,
      'setProps(...): You called `setProps` on a ' +
      'component with a parent. This is an anti-pattern since props will ' +
      'get reactively updated when rendered. Instead, change the owner\'s ' +
      '`render` method to pass the correct value as props to the component ' +
      'where it is created.'
    ) : invariant(internalInstance._isTopLevel));

    // Merge with the pending element if it exists, otherwise with existing
    // element props.
    var element = internalInstance._pendingElement ||
                  internalInstance._currentElement;
    var props = assign({}, element.props, partialProps);
    internalInstance._pendingElement = ReactElement.cloneAndReplaceProps(
      element,
      props
    );

    enqueueUpdate(internalInstance);
  },

  /**
   * Replaces all of the props.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} props New props.
   * @internal
   */
  enqueueReplaceProps: function(publicInstance, props) {
    var internalInstance = getInternalInstanceReadyForUpdate(
      publicInstance,
      'replaceProps'
    );

    if (!internalInstance) {
      return;
    }

    ("production" !== process.env.NODE_ENV ? invariant(
      internalInstance._isTopLevel,
      'replaceProps(...): You called `replaceProps` on a ' +
      'component with a parent. This is an anti-pattern since props will ' +
      'get reactively updated when rendered. Instead, change the owner\'s ' +
      '`render` method to pass the correct value as props to the component ' +
      'where it is created.'
    ) : invariant(internalInstance._isTopLevel));

    // Merge with the pending element if it exists, otherwise with existing
    // element props.
    var element = internalInstance._pendingElement ||
                  internalInstance._currentElement;
    internalInstance._pendingElement = ReactElement.cloneAndReplaceProps(
      element,
      props
    );

    enqueueUpdate(internalInstance);
  },

  enqueueElementInternal: function(internalInstance, newElement) {
    internalInstance._pendingElement = newElement;
    enqueueUpdate(internalInstance);
  }

};

module.exports = ReactUpdateQueue;

}).call(this,require('_process'))
},{"./Object.assign":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/Object.assign.js","./ReactCurrentOwner":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactCurrentOwner.js","./ReactElement":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactElement.js","./ReactInstanceMap":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactInstanceMap.js","./ReactLifeCycle":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactLifeCycle.js","./ReactUpdates":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactUpdates.js","./invariant":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/invariant.js","./warning":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/warning.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactUpdates.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactUpdates
 */

'use strict';

var CallbackQueue = require("./CallbackQueue");
var PooledClass = require("./PooledClass");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactPerf = require("./ReactPerf");
var ReactReconciler = require("./ReactReconciler");
var Transaction = require("./Transaction");

var assign = require("./Object.assign");
var invariant = require("./invariant");
var warning = require("./warning");

var dirtyComponents = [];
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
  ("production" !== process.env.NODE_ENV ? invariant(
    ReactUpdates.ReactReconcileTransaction && batchingStrategy,
    'ReactUpdates: must inject a reconcile transaction class and batching ' +
    'strategy'
  ) : invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy));
}

var NESTED_UPDATES = {
  initialize: function() {
    this.dirtyComponentsLength = dirtyComponents.length;
  },
  close: function() {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      // Additional updates were enqueued by componentDidUpdate handlers or
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
      // these new updates so that if A's componentDidUpdate calls setState on
      // B, B will update before the callback A's updater provided when calling
      // setState.
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();
    } else {
      dirtyComponents.length = 0;
    }
  }
};

var UPDATE_QUEUEING = {
  initialize: function() {
    this.callbackQueue.reset();
  },
  close: function() {
    this.callbackQueue.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled();
  this.reconcileTransaction =
    ReactUpdates.ReactReconcileTransaction.getPooled();
}

assign(
  ReactUpdatesFlushTransaction.prototype,
  Transaction.Mixin, {
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  destructor: function() {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;
  },

  perform: function(method, scope, a) {
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
    // with this transaction's wrappers around it.
    return Transaction.Mixin.perform.call(
      this,
      this.reconcileTransaction.perform,
      this.reconcileTransaction,
      method,
      scope,
      a
    );
  }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b, c, d) {
  ensureInjected();
  batchingStrategy.batchedUpdates(callback, a, b, c, d);
}

/**
 * Array comparator for ReactComponents by mount ordering.
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountOrderComparator(c1, c2) {
  return c1._mountOrder - c2._mountOrder;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  ("production" !== process.env.NODE_ENV ? invariant(
    len === dirtyComponents.length,
    'Expected flush transaction\'s stored dirty-components length (%s) to ' +
    'match dirty-components array length (%s).',
    len,
    dirtyComponents.length
  ) : invariant(len === dirtyComponents.length));

  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.
  dirtyComponents.sort(mountOrderComparator);

  for (var i = 0; i < len; i++) {
    // If a component is unmounted before pending changes apply, it will still
    // be here, but we assume that it has cleared its _pendingCallbacks and
    // that performUpdateIfNecessary is a noop.
    var component = dirtyComponents[i];

    // If performUpdateIfNecessary happens to enqueue any new updates, we
    // shouldn't execute the callbacks until the next render happens, so
    // stash the callbacks first
    var callbacks = component._pendingCallbacks;
    component._pendingCallbacks = null;

    ReactReconciler.performUpdateIfNecessary(
      component,
      transaction.reconcileTransaction
    );

    if (callbacks) {
      for (var j = 0; j < callbacks.length; j++) {
        transaction.callbackQueue.enqueue(
          callbacks[j],
          component.getPublicInstance()
        );
      }
    }
  }
}

var flushBatchedUpdates = function() {
  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
  // array and perform any updates enqueued by mount-ready handlers (i.e.,
  // componentDidUpdate) but we need to check here too in order to catch
  // updates enqueued by setState callbacks and asap calls.
  while (dirtyComponents.length || asapEnqueued) {
    if (dirtyComponents.length) {
      var transaction = ReactUpdatesFlushTransaction.getPooled();
      transaction.perform(runBatchedUpdates, null, transaction);
      ReactUpdatesFlushTransaction.release(transaction);
    }

    if (asapEnqueued) {
      asapEnqueued = false;
      var queue = asapCallbackQueue;
      asapCallbackQueue = CallbackQueue.getPooled();
      queue.notifyAll();
      CallbackQueue.release(queue);
    }
  }
};
flushBatchedUpdates = ReactPerf.measure(
  'ReactUpdates',
  'flushBatchedUpdates',
  flushBatchedUpdates
);

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component) {
  ensureInjected();

  // Various parts of our code (such as ReactCompositeComponent's
  // _renderValidatedComponent) assume that calls to render aren't nested;
  // verify that that's the case. (This is called by each top-level update
  // function, like setProps, setState, forceUpdate, etc.; creation and
  // destruction of top-level components is guarded in ReactMount.)
  ("production" !== process.env.NODE_ENV ? warning(
    ReactCurrentOwner.current == null,
    'enqueueUpdate(): Render methods should be a pure function of props ' +
    'and state; triggering nested component updates from render is not ' +
    'allowed. If necessary, trigger nested updates in ' +
    'componentDidUpdate.'
  ) : null);

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component);
    return;
  }

  dirtyComponents.push(component);
}

/**
 * Enqueue a callback to be run at the end of the current batching cycle. Throws
 * if no updates are currently being performed.
 */
function asap(callback, context) {
  ("production" !== process.env.NODE_ENV ? invariant(
    batchingStrategy.isBatchingUpdates,
    'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' +
    'updates are not being batched.'
  ) : invariant(batchingStrategy.isBatchingUpdates));
  asapCallbackQueue.enqueue(callback, context);
  asapEnqueued = true;
}

var ReactUpdatesInjection = {
  injectReconcileTransaction: function(ReconcileTransaction) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ReconcileTransaction,
      'ReactUpdates: must provide a reconcile transaction class'
    ) : invariant(ReconcileTransaction));
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
  },

  injectBatchingStrategy: function(_batchingStrategy) {
    ("production" !== process.env.NODE_ENV ? invariant(
      _batchingStrategy,
      'ReactUpdates: must provide a batching strategy'
    ) : invariant(_batchingStrategy));
    ("production" !== process.env.NODE_ENV ? invariant(
      typeof _batchingStrategy.batchedUpdates === 'function',
      'ReactUpdates: must provide a batchedUpdates() function'
    ) : invariant(typeof _batchingStrategy.batchedUpdates === 'function'));
    ("production" !== process.env.NODE_ENV ? invariant(
      typeof _batchingStrategy.isBatchingUpdates === 'boolean',
      'ReactUpdates: must provide an isBatchingUpdates boolean attribute'
    ) : invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));
    batchingStrategy = _batchingStrategy;
  }
};

var ReactUpdates = {
  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction: null,

  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection,
  asap: asap
};

module.exports = ReactUpdates;

}).call(this,require('_process'))
},{"./CallbackQueue":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/CallbackQueue.js","./Object.assign":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/Object.assign.js","./PooledClass":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/PooledClass.js","./ReactCurrentOwner":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactCurrentOwner.js","./ReactPerf":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactPerf.js","./ReactReconciler":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactReconciler.js","./Transaction":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/Transaction.js","./invariant":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/invariant.js","./warning":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/warning.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/SVGDOMPropertyConfig.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SVGDOMPropertyConfig
 */

/*jslint bitwise: true*/

'use strict';

var DOMProperty = require("./DOMProperty");

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

var SVGDOMPropertyConfig = {
  Properties: {
    clipPath: MUST_USE_ATTRIBUTE,
    cx: MUST_USE_ATTRIBUTE,
    cy: MUST_USE_ATTRIBUTE,
    d: MUST_USE_ATTRIBUTE,
    dx: MUST_USE_ATTRIBUTE,
    dy: MUST_USE_ATTRIBUTE,
    fill: MUST_USE_ATTRIBUTE,
    fillOpacity: MUST_USE_ATTRIBUTE,
    fontFamily: MUST_USE_ATTRIBUTE,
    fontSize: MUST_USE_ATTRIBUTE,
    fx: MUST_USE_ATTRIBUTE,
    fy: MUST_USE_ATTRIBUTE,
    gradientTransform: MUST_USE_ATTRIBUTE,
    gradientUnits: MUST_USE_ATTRIBUTE,
    markerEnd: MUST_USE_ATTRIBUTE,
    markerMid: MUST_USE_ATTRIBUTE,
    markerStart: MUST_USE_ATTRIBUTE,
    offset: MUST_USE_ATTRIBUTE,
    opacity: MUST_USE_ATTRIBUTE,
    patternContentUnits: MUST_USE_ATTRIBUTE,
    patternUnits: MUST_USE_ATTRIBUTE,
    points: MUST_USE_ATTRIBUTE,
    preserveAspectRatio: MUST_USE_ATTRIBUTE,
    r: MUST_USE_ATTRIBUTE,
    rx: MUST_USE_ATTRIBUTE,
    ry: MUST_USE_ATTRIBUTE,
    spreadMethod: MUST_USE_ATTRIBUTE,
    stopColor: MUST_USE_ATTRIBUTE,
    stopOpacity: MUST_USE_ATTRIBUTE,
    stroke: MUST_USE_ATTRIBUTE,
    strokeDasharray: MUST_USE_ATTRIBUTE,
    strokeLinecap: MUST_USE_ATTRIBUTE,
    strokeOpacity: MUST_USE_ATTRIBUTE,
    strokeWidth: MUST_USE_ATTRIBUTE,
    textAnchor: MUST_USE_ATTRIBUTE,
    transform: MUST_USE_ATTRIBUTE,
    version: MUST_USE_ATTRIBUTE,
    viewBox: MUST_USE_ATTRIBUTE,
    x1: MUST_USE_ATTRIBUTE,
    x2: MUST_USE_ATTRIBUTE,
    x: MUST_USE_ATTRIBUTE,
    y1: MUST_USE_ATTRIBUTE,
    y2: MUST_USE_ATTRIBUTE,
    y: MUST_USE_ATTRIBUTE
  },
  DOMAttributeNames: {
    clipPath: 'clip-path',
    fillOpacity: 'fill-opacity',
    fontFamily: 'font-family',
    fontSize: 'font-size',
    gradientTransform: 'gradientTransform',
    gradientUnits: 'gradientUnits',
    markerEnd: 'marker-end',
    markerMid: 'marker-mid',
    markerStart: 'marker-start',
    patternContentUnits: 'patternContentUnits',
    patternUnits: 'patternUnits',
    preserveAspectRatio: 'preserveAspectRatio',
    spreadMethod: 'spreadMethod',
    stopColor: 'stop-color',
    stopOpacity: 'stop-opacity',
    strokeDasharray: 'stroke-dasharray',
    strokeLinecap: 'stroke-linecap',
    strokeOpacity: 'stroke-opacity',
    strokeWidth: 'stroke-width',
    textAnchor: 'text-anchor',
    viewBox: 'viewBox'
  }
};

module.exports = SVGDOMPropertyConfig;

},{"./DOMProperty":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/DOMProperty.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/SelectEventPlugin.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SelectEventPlugin
 */

'use strict';

var EventConstants = require("./EventConstants");
var EventPropagators = require("./EventPropagators");
var ReactInputSelection = require("./ReactInputSelection");
var SyntheticEvent = require("./SyntheticEvent");

var getActiveElement = require("./getActiveElement");
var isTextInputElement = require("./isTextInputElement");
var keyOf = require("./keyOf");
var shallowEqual = require("./shallowEqual");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  select: {
    phasedRegistrationNames: {
      bubbled: keyOf({onSelect: null}),
      captured: keyOf({onSelectCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topContextMenu,
      topLevelTypes.topFocus,
      topLevelTypes.topKeyDown,
      topLevelTypes.topMouseDown,
      topLevelTypes.topMouseUp,
      topLevelTypes.topSelectionChange
    ]
  }
};

var activeElement = null;
var activeElementID = null;
var lastSelection = null;
var mouseDown = false;

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @param {object}
 */
function getSelection(node) {
  if ('selectionStart' in node &&
      ReactInputSelection.hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  } else if (document.selection) {
    var range = document.selection.createRange();
    return {
      parentElement: range.parentElement(),
      text: range.text,
      top: range.boundingTop,
      left: range.boundingLeft
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown ||
      activeElement == null ||
      activeElement !== getActiveElement()) {
    return null;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(
      eventTypes.select,
      activeElementID,
      nativeEvent
    );

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    switch (topLevelType) {
      // Track the input node that has focus.
      case topLevelTypes.topFocus:
        if (isTextInputElement(topLevelTarget) ||
            topLevelTarget.contentEditable === 'true') {
          activeElement = topLevelTarget;
          activeElementID = topLevelTargetID;
          lastSelection = null;
        }
        break;
      case topLevelTypes.topBlur:
        activeElement = null;
        activeElementID = null;
        lastSelection = null;
        break;

      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case topLevelTypes.topMouseDown:
        mouseDown = true;
        break;
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topMouseUp:
        mouseDown = false;
        return constructSelectEvent(nativeEvent);

      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't).
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      case topLevelTypes.topSelectionChange:
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        return constructSelectEvent(nativeEvent);
    }
  }
};

module.exports = SelectEventPlugin;

},{"./EventConstants":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/EventConstants.js","./EventPropagators":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/EventPropagators.js","./ReactInputSelection":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactInputSelection.js","./SyntheticEvent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/SyntheticEvent.js","./getActiveElement":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/getActiveElement.js","./isTextInputElement":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/isTextInputElement.js","./keyOf":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/keyOf.js","./shallowEqual":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/shallowEqual.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ServerReactRootIndex.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ServerReactRootIndex
 * @typechecks
 */

'use strict';

/**
 * Size of the reactRoot ID space. We generate random numbers for React root
 * IDs and if there's a collision the events and DOM update system will
 * get confused. In the future we need a way to generate GUIDs but for
 * now this will work on a smaller scale.
 */
var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

var ServerReactRootIndex = {
  createReactRootIndex: function() {
    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
  }
};

module.exports = ServerReactRootIndex;

},{}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/SimpleEventPlugin.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SimpleEventPlugin
 */

'use strict';

var EventConstants = require("./EventConstants");
var EventPluginUtils = require("./EventPluginUtils");
var EventPropagators = require("./EventPropagators");
var SyntheticClipboardEvent = require("./SyntheticClipboardEvent");
var SyntheticEvent = require("./SyntheticEvent");
var SyntheticFocusEvent = require("./SyntheticFocusEvent");
var SyntheticKeyboardEvent = require("./SyntheticKeyboardEvent");
var SyntheticMouseEvent = require("./SyntheticMouseEvent");
var SyntheticDragEvent = require("./SyntheticDragEvent");
var SyntheticTouchEvent = require("./SyntheticTouchEvent");
var SyntheticUIEvent = require("./SyntheticUIEvent");
var SyntheticWheelEvent = require("./SyntheticWheelEvent");

var getEventCharCode = require("./getEventCharCode");

var invariant = require("./invariant");
var keyOf = require("./keyOf");
var warning = require("./warning");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  blur: {
    phasedRegistrationNames: {
      bubbled: keyOf({onBlur: true}),
      captured: keyOf({onBlurCapture: true})
    }
  },
  click: {
    phasedRegistrationNames: {
      bubbled: keyOf({onClick: true}),
      captured: keyOf({onClickCapture: true})
    }
  },
  contextMenu: {
    phasedRegistrationNames: {
      bubbled: keyOf({onContextMenu: true}),
      captured: keyOf({onContextMenuCapture: true})
    }
  },
  copy: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCopy: true}),
      captured: keyOf({onCopyCapture: true})
    }
  },
  cut: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCut: true}),
      captured: keyOf({onCutCapture: true})
    }
  },
  doubleClick: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDoubleClick: true}),
      captured: keyOf({onDoubleClickCapture: true})
    }
  },
  drag: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDrag: true}),
      captured: keyOf({onDragCapture: true})
    }
  },
  dragEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragEnd: true}),
      captured: keyOf({onDragEndCapture: true})
    }
  },
  dragEnter: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragEnter: true}),
      captured: keyOf({onDragEnterCapture: true})
    }
  },
  dragExit: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragExit: true}),
      captured: keyOf({onDragExitCapture: true})
    }
  },
  dragLeave: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragLeave: true}),
      captured: keyOf({onDragLeaveCapture: true})
    }
  },
  dragOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragOver: true}),
      captured: keyOf({onDragOverCapture: true})
    }
  },
  dragStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragStart: true}),
      captured: keyOf({onDragStartCapture: true})
    }
  },
  drop: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDrop: true}),
      captured: keyOf({onDropCapture: true})
    }
  },
  focus: {
    phasedRegistrationNames: {
      bubbled: keyOf({onFocus: true}),
      captured: keyOf({onFocusCapture: true})
    }
  },
  input: {
    phasedRegistrationNames: {
      bubbled: keyOf({onInput: true}),
      captured: keyOf({onInputCapture: true})
    }
  },
  keyDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyDown: true}),
      captured: keyOf({onKeyDownCapture: true})
    }
  },
  keyPress: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyPress: true}),
      captured: keyOf({onKeyPressCapture: true})
    }
  },
  keyUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyUp: true}),
      captured: keyOf({onKeyUpCapture: true})
    }
  },
  load: {
    phasedRegistrationNames: {
      bubbled: keyOf({onLoad: true}),
      captured: keyOf({onLoadCapture: true})
    }
  },
  error: {
    phasedRegistrationNames: {
      bubbled: keyOf({onError: true}),
      captured: keyOf({onErrorCapture: true})
    }
  },
  // Note: We do not allow listening to mouseOver events. Instead, use the
  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
  mouseDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseDown: true}),
      captured: keyOf({onMouseDownCapture: true})
    }
  },
  mouseMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseMove: true}),
      captured: keyOf({onMouseMoveCapture: true})
    }
  },
  mouseOut: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseOut: true}),
      captured: keyOf({onMouseOutCapture: true})
    }
  },
  mouseOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseOver: true}),
      captured: keyOf({onMouseOverCapture: true})
    }
  },
  mouseUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseUp: true}),
      captured: keyOf({onMouseUpCapture: true})
    }
  },
  paste: {
    phasedRegistrationNames: {
      bubbled: keyOf({onPaste: true}),
      captured: keyOf({onPasteCapture: true})
    }
  },
  reset: {
    phasedRegistrationNames: {
      bubbled: keyOf({onReset: true}),
      captured: keyOf({onResetCapture: true})
    }
  },
  scroll: {
    phasedRegistrationNames: {
      bubbled: keyOf({onScroll: true}),
      captured: keyOf({onScrollCapture: true})
    }
  },
  submit: {
    phasedRegistrationNames: {
      bubbled: keyOf({onSubmit: true}),
      captured: keyOf({onSubmitCapture: true})
    }
  },
  touchCancel: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchCancel: true}),
      captured: keyOf({onTouchCancelCapture: true})
    }
  },
  touchEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchEnd: true}),
      captured: keyOf({onTouchEndCapture: true})
    }
  },
  touchMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchMove: true}),
      captured: keyOf({onTouchMoveCapture: true})
    }
  },
  touchStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchStart: true}),
      captured: keyOf({onTouchStartCapture: true})
    }
  },
  wheel: {
    phasedRegistrationNames: {
      bubbled: keyOf({onWheel: true}),
      captured: keyOf({onWheelCapture: true})
    }
  }
};

var topLevelEventsToDispatchConfig = {
  topBlur:        eventTypes.blur,
  topClick:       eventTypes.click,
  topContextMenu: eventTypes.contextMenu,
  topCopy:        eventTypes.copy,
  topCut:         eventTypes.cut,
  topDoubleClick: eventTypes.doubleClick,
  topDrag:        eventTypes.drag,
  topDragEnd:     eventTypes.dragEnd,
  topDragEnter:   eventTypes.dragEnter,
  topDragExit:    eventTypes.dragExit,
  topDragLeave:   eventTypes.dragLeave,
  topDragOver:    eventTypes.dragOver,
  topDragStart:   eventTypes.dragStart,
  topDrop:        eventTypes.drop,
  topError:       eventTypes.error,
  topFocus:       eventTypes.focus,
  topInput:       eventTypes.input,
  topKeyDown:     eventTypes.keyDown,
  topKeyPress:    eventTypes.keyPress,
  topKeyUp:       eventTypes.keyUp,
  topLoad:        eventTypes.load,
  topMouseDown:   eventTypes.mouseDown,
  topMouseMove:   eventTypes.mouseMove,
  topMouseOut:    eventTypes.mouseOut,
  topMouseOver:   eventTypes.mouseOver,
  topMouseUp:     eventTypes.mouseUp,
  topPaste:       eventTypes.paste,
  topReset:       eventTypes.reset,
  topScroll:      eventTypes.scroll,
  topSubmit:      eventTypes.submit,
  topTouchCancel: eventTypes.touchCancel,
  topTouchEnd:    eventTypes.touchEnd,
  topTouchMove:   eventTypes.touchMove,
  topTouchStart:  eventTypes.touchStart,
  topWheel:       eventTypes.wheel
};

for (var type in topLevelEventsToDispatchConfig) {
  topLevelEventsToDispatchConfig[type].dependencies = [type];
}

var SimpleEventPlugin = {

  eventTypes: eventTypes,

  /**
   * Same as the default implementation, except cancels the event when return
   * value is false. This behavior will be disabled in a future release.
   *
   * @param {object} Event to be dispatched.
   * @param {function} Application-level callback.
   * @param {string} domID DOM ID to pass to the callback.
   */
  executeDispatch: function(event, listener, domID) {
    var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);

    ("production" !== process.env.NODE_ENV ? warning(
      typeof returnValue !== 'boolean',
      'Returning `false` from an event handler is deprecated and will be ' +
      'ignored in a future release. Instead, manually call ' +
      'e.stopPropagation() or e.preventDefault(), as appropriate.'
    ) : null);

    if (returnValue === false) {
      event.stopPropagation();
      event.preventDefault();
    }
  },

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case topLevelTypes.topInput:
      case topLevelTypes.topLoad:
      case topLevelTypes.topError:
      case topLevelTypes.topReset:
      case topLevelTypes.topSubmit:
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case topLevelTypes.topKeyPress:
        // FireFox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
        /* falls through */
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case topLevelTypes.topBlur:
      case topLevelTypes.topFocus:
        EventConstructor = SyntheticFocusEvent;
        break;
      case topLevelTypes.topClick:
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
        /* falls through */
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topDoubleClick:
      case topLevelTypes.topMouseDown:
      case topLevelTypes.topMouseMove:
      case topLevelTypes.topMouseOut:
      case topLevelTypes.topMouseOver:
      case topLevelTypes.topMouseUp:
        EventConstructor = SyntheticMouseEvent;
        break;
      case topLevelTypes.topDrag:
      case topLevelTypes.topDragEnd:
      case topLevelTypes.topDragEnter:
      case topLevelTypes.topDragExit:
      case topLevelTypes.topDragLeave:
      case topLevelTypes.topDragOver:
      case topLevelTypes.topDragStart:
      case topLevelTypes.topDrop:
        EventConstructor = SyntheticDragEvent;
        break;
      case topLevelTypes.topTouchCancel:
      case topLevelTypes.topTouchEnd:
      case topLevelTypes.topTouchMove:
      case topLevelTypes.topTouchStart:
        EventConstructor = SyntheticTouchEvent;
        break;
      case topLevelTypes.topScroll:
        EventConstructor = SyntheticUIEvent;
        break;
      case topLevelTypes.topWheel:
        EventConstructor = SyntheticWheelEvent;
        break;
      case topLevelTypes.topCopy:
      case topLevelTypes.topCut:
      case topLevelTypes.topPaste:
        EventConstructor = SyntheticClipboardEvent;
        break;
    }
    ("production" !== process.env.NODE_ENV ? invariant(
      EventConstructor,
      'SimpleEventPlugin: Unhandled event type, `%s`.',
      topLevelType
    ) : invariant(EventConstructor));
    var event = EventConstructor.getPooled(
      dispatchConfig,
      topLevelTargetID,
      nativeEvent
    );
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }

};

module.exports = SimpleEventPlugin;

}).call(this,require('_process'))
},{"./EventConstants":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/EventConstants.js","./EventPluginUtils":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/EventPluginUtils.js","./EventPropagators":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/EventPropagators.js","./SyntheticClipboardEvent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/SyntheticClipboardEvent.js","./SyntheticDragEvent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/SyntheticDragEvent.js","./SyntheticEvent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/SyntheticEvent.js","./SyntheticFocusEvent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/SyntheticFocusEvent.js","./SyntheticKeyboardEvent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/SyntheticKeyboardEvent.js","./SyntheticMouseEvent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/SyntheticMouseEvent.js","./SyntheticTouchEvent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/SyntheticTouchEvent.js","./SyntheticUIEvent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/SyntheticUIEvent.js","./SyntheticWheelEvent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/SyntheticWheelEvent.js","./getEventCharCode":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/getEventCharCode.js","./invariant":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/invariant.js","./keyOf":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/keyOf.js","./warning":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/warning.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/SyntheticClipboardEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticClipboardEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function(event) {
    return (
      'clipboardData' in event ?
        event.clipboardData :
        window.clipboardData
    );
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;

},{"./SyntheticEvent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/SyntheticEvent.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/SyntheticCompositionEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticCompositionEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(
  dispatchConfig,
  dispatchMarker,
  nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(
  SyntheticCompositionEvent,
  CompositionEventInterface
);

module.exports = SyntheticCompositionEvent;

},{"./SyntheticEvent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/SyntheticEvent.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/SyntheticDragEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticDragEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticMouseEvent = require("./SyntheticMouseEvent");

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;

},{"./SyntheticMouseEvent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/SyntheticMouseEvent.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/SyntheticEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticEvent
 * @typechecks static-only
 */

'use strict';

var PooledClass = require("./PooledClass");

var assign = require("./Object.assign");
var emptyFunction = require("./emptyFunction");
var getEventTarget = require("./getEventTarget");

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: getEventTarget,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function(event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 */
function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  this.dispatchConfig = dispatchConfig;
  this.dispatchMarker = dispatchMarker;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      this[propName] = nativeEvent[propName];
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ?
    nativeEvent.defaultPrevented :
    nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
}

assign(SyntheticEvent.prototype, {

  preventDefault: function() {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    if (event.preventDefault) {
      event.preventDefault();
    } else {
      event.returnValue = false;
    }
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function() {
    var event = this.nativeEvent;
    if (event.stopPropagation) {
      event.stopPropagation();
    } else {
      event.cancelBubble = true;
    }
    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function() {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function() {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      this[propName] = null;
    }
    this.dispatchConfig = null;
    this.dispatchMarker = null;
    this.nativeEvent = null;
  }

});

SyntheticEvent.Interface = EventInterface;

/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function(Class, Interface) {
  var Super = this;

  var prototype = Object.create(Super.prototype);
  assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);

module.exports = SyntheticEvent;

},{"./Object.assign":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/Object.assign.js","./PooledClass":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/PooledClass.js","./emptyFunction":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/emptyFunction.js","./getEventTarget":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/getEventTarget.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/SyntheticFocusEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticFocusEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require("./SyntheticUIEvent");

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;

},{"./SyntheticUIEvent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/SyntheticUIEvent.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/SyntheticInputEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticInputEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticInputEvent(
  dispatchConfig,
  dispatchMarker,
  nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(
  SyntheticInputEvent,
  InputEventInterface
);

module.exports = SyntheticInputEvent;

},{"./SyntheticEvent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/SyntheticEvent.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/SyntheticKeyboardEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticKeyboardEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require("./SyntheticUIEvent");

var getEventCharCode = require("./getEventCharCode");
var getEventKey = require("./getEventKey");
var getEventModifierState = require("./getEventModifierState");

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function(event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function(event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function(event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;

},{"./SyntheticUIEvent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/SyntheticUIEvent.js","./getEventCharCode":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/getEventCharCode.js","./getEventKey":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/getEventKey.js","./getEventModifierState":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/getEventModifierState.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/SyntheticMouseEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticMouseEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require("./SyntheticUIEvent");
var ViewportMetrics = require("./ViewportMetrics");

var getEventModifierState = require("./getEventModifierState");

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: function(event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function(event) {
    return event.relatedTarget || (
      ((event.fromElement === event.srcElement ? event.toElement : event.fromElement))
    );
  },
  // "Proprietary" Interface.
  pageX: function(event) {
    return 'pageX' in event ?
      event.pageX :
      event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function(event) {
    return 'pageY' in event ?
      event.pageY :
      event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;

},{"./SyntheticUIEvent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/SyntheticUIEvent.js","./ViewportMetrics":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ViewportMetrics.js","./getEventModifierState":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/getEventModifierState.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/SyntheticTouchEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticTouchEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require("./SyntheticUIEvent");

var getEventModifierState = require("./getEventModifierState");

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;

},{"./SyntheticUIEvent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/SyntheticUIEvent.js","./getEventModifierState":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/getEventModifierState.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/SyntheticUIEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticUIEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require("./SyntheticEvent");

var getEventTarget = require("./getEventTarget");

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: function(event) {
    if (event.view) {
      return event.view;
    }

    var target = getEventTarget(event);
    if (target != null && target.window === target) {
      // target is a window object
      return target;
    }

    var doc = target.ownerDocument;
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    if (doc) {
      return doc.defaultView || doc.parentWindow;
    } else {
      return window;
    }
  },
  detail: function(event) {
    return event.detail || 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;

},{"./SyntheticEvent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/SyntheticEvent.js","./getEventTarget":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/getEventTarget.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/SyntheticWheelEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticWheelEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticMouseEvent = require("./SyntheticMouseEvent");

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function(event) {
    return (
      'deltaX' in event ? event.deltaX :
      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
      'wheelDeltaX' in event ? -event.wheelDeltaX : 0
    );
  },
  deltaY: function(event) {
    return (
      'deltaY' in event ? event.deltaY :
      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
      'wheelDeltaY' in event ? -event.wheelDeltaY :
      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
      'wheelDelta' in event ? -event.wheelDelta : 0
    );
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;

},{"./SyntheticMouseEvent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/SyntheticMouseEvent.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/Transaction.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Transaction
 */

'use strict';

var invariant = require("./invariant");

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM updates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var Mixin = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function() {
    this.transactionWrappers = this.getTransactionWrappers();
    if (!this.wrapperInitData) {
      this.wrapperInitData = [];
    } else {
      this.wrapperInitData.length = 0;
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function() {
    return !!this._isInTransaction;
  },

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} args... Arguments to pass to the method (optional).
   *                           Helps prevent need to bind in many cases.
   * @return Return value from `method`.
   */
  perform: function(method, scope, a, b, c, d, e, f) {
    ("production" !== process.env.NODE_ENV ? invariant(
      !this.isInTransaction(),
      'Transaction.perform(...): Cannot initialize a transaction when there ' +
      'is already an outstanding transaction.'
    ) : invariant(!this.isInTransaction()));
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);
          } catch (err) {
          }
        } else {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function(startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ?
          wrapper.initialize.call(this) :
          null;
      } finally {
        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);
          } catch (err) {
          }
        }
      }
    }
  },

  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function(startIndex) {
    ("production" !== process.env.NODE_ENV ? invariant(
      this.isInTransaction(),
      'Transaction.closeAll(): Cannot close transaction when none are open.'
    ) : invariant(this.isInTransaction()));
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
          wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);
          } catch (e) {
          }
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

var Transaction = {

  Mixin: Mixin,

  /**
   * Token to look for to determine if an error occured.
   */
  OBSERVED_ERROR: {}

};

module.exports = Transaction;

}).call(this,require('_process'))
},{"./invariant":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/invariant.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ViewportMetrics.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ViewportMetrics
 */

'use strict';

var ViewportMetrics = {

  currentScrollLeft: 0,

  currentScrollTop: 0,

  refreshScrollValues: function(scrollPosition) {
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;
  }

};

module.exports = ViewportMetrics;

},{}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/accumulateInto.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule accumulateInto
 */

'use strict';

var invariant = require("./invariant");

/**
 *
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  ("production" !== process.env.NODE_ENV ? invariant(
    next != null,
    'accumulateInto(...): Accumulated items must not be null or undefined.'
  ) : invariant(next != null));
  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  var currentIsArray = Array.isArray(current);
  var nextIsArray = Array.isArray(next);

  if (currentIsArray && nextIsArray) {
    current.push.apply(current, next);
    return current;
  }

  if (currentIsArray) {
    current.push(next);
    return current;
  }

  if (nextIsArray) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulateInto;

}).call(this,require('_process'))
},{"./invariant":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/invariant.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/adler32.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule adler32
 */

/* jslint bitwise:true */

'use strict';

var MOD = 65521;

// This is a clean-room implementation of adler32 designed for detecting
// if markup is not what we expect it to be. It does not need to be
// cryptographically strong, only reasonably good at detecting if markup
// generated on the server is different than that on the client.
function adler32(data) {
  var a = 1;
  var b = 0;
  for (var i = 0; i < data.length; i++) {
    a = (a + data.charCodeAt(i)) % MOD;
    b = (b + a) % MOD;
  }
  return a | (b << 16);
}

module.exports = adler32;

},{}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/camelize.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelize
 * @typechecks
 */

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function(_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;

},{}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/camelizeStyleName.js":[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelizeStyleName
 * @typechecks
 */

"use strict";

var camelize = require("./camelize");

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;

},{"./camelize":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/camelize.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/containsNode.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule containsNode
 * @typechecks
 */

var isTextNode = require("./isTextNode");

/*jslint bitwise:true */

/**
 * Checks if a given DOM node contains or is another DOM node.
 *
 * @param {?DOMNode} outerNode Outer DOM node.
 * @param {?DOMNode} innerNode Inner DOM node.
 * @return {boolean} True if `outerNode` contains or is `innerNode`.
 */
function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if (outerNode.contains) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

module.exports = containsNode;

},{"./isTextNode":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/isTextNode.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/createArrayFromMixed.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createArrayFromMixed
 * @typechecks
 */

var toArray = require("./toArray");

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return (
    // not null/false
    !!obj &&
    // arrays are objects, NodeLists are functions in Safari
    (typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    ('length' in obj) &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    (typeof obj.nodeType != 'number') &&
    (
      // a real array
      (// HTMLCollection/NodeList
      (Array.isArray(obj) ||
      // arguments
      ('callee' in obj) || 'item' in obj))
    )
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFromMixed = require('createArrayFromMixed');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFromMixed(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFromMixed(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFromMixed;

},{"./toArray":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/toArray.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/createFullPageComponent.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createFullPageComponent
 * @typechecks
 */

'use strict';

// Defeat circular references by requiring this directly.
var ReactClass = require("./ReactClass");
var ReactElement = require("./ReactElement");

var invariant = require("./invariant");

/**
 * Create a component that will throw an exception when unmounted.
 *
 * Components like <html> <head> and <body> can't be removed or added
 * easily in a cross-browser way, however it's valuable to be able to
 * take advantage of React's reconciliation for styling and <title>
 * management. So we just document it and throw in dangerous cases.
 *
 * @param {string} tag The tag to wrap
 * @return {function} convenience constructor of new component
 */
function createFullPageComponent(tag) {
  var elementFactory = ReactElement.createFactory(tag);

  var FullPageComponent = ReactClass.createClass({
    tagName: tag.toUpperCase(),
    displayName: 'ReactFullPageComponent' + tag,

    componentWillUnmount: function() {
      ("production" !== process.env.NODE_ENV ? invariant(
        false,
        '%s tried to unmount. Because of cross-browser quirks it is ' +
        'impossible to unmount some top-level components (eg <html>, <head>, ' +
        'and <body>) reliably and efficiently. To fix this, have a single ' +
        'top-level component that never unmounts render these elements.',
        this.constructor.displayName
      ) : invariant(false));
    },

    render: function() {
      return elementFactory(this.props);
    }
  });

  return FullPageComponent;
}

module.exports = createFullPageComponent;

}).call(this,require('_process'))
},{"./ReactClass":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactClass.js","./ReactElement":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactElement.js","./invariant":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/invariant.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/createNodesFromMarkup.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createNodesFromMarkup
 * @typechecks
 */

/*jslint evil: true, sub: true */

var ExecutionEnvironment = require("./ExecutionEnvironment");

var createArrayFromMixed = require("./createArrayFromMixed");
var getMarkupWrap = require("./getMarkupWrap");
var invariant = require("./invariant");

/**
 * Dummy container used to render all markup.
 */
var dummyNode =
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  ("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    ("production" !== process.env.NODE_ENV ? invariant(
      handleScript,
      'createNodesFromMarkup(...): Unexpected <script> element rendered.'
    ) : invariant(handleScript));
    createArrayFromMixed(scripts).forEach(handleScript);
  }

  var nodes = createArrayFromMixed(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;

}).call(this,require('_process'))
},{"./ExecutionEnvironment":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ExecutionEnvironment.js","./createArrayFromMixed":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/createArrayFromMixed.js","./getMarkupWrap":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/getMarkupWrap.js","./invariant":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/invariant.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/dangerousStyleValue.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule dangerousStyleValue
 * @typechecks static-only
 */

'use strict';

var CSSProperty = require("./CSSProperty");

var isUnitlessNumber = CSSProperty.isUnitlessNumber;

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isNonNumeric || value === 0 ||
      isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    value = value.trim();
  }
  return value + 'px';
}

module.exports = dangerousStyleValue;

},{"./CSSProperty":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/CSSProperty.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/emptyFunction.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyFunction
 */

function makeEmptyFunction(arg) {
  return function() {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
function emptyFunction() {}

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function() { return this; };
emptyFunction.thatReturnsArgument = function(arg) { return arg; };

module.exports = emptyFunction;

},{}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/emptyObject.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyObject
 */

"use strict";

var emptyObject = {};

if ("production" !== process.env.NODE_ENV) {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;

}).call(this,require('_process'))
},{"_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/escapeTextContentForBrowser.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule escapeTextContentForBrowser
 */

'use strict';

var ESCAPE_LOOKUP = {
  '&': '&amp;',
  '>': '&gt;',
  '<': '&lt;',
  '"': '&quot;',
  '\'': '&#x27;'
};

var ESCAPE_REGEX = /[&><"']/g;

function escaper(match) {
  return ESCAPE_LOOKUP[match];
}

/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextContentForBrowser(text) {
  return ('' + text).replace(ESCAPE_REGEX, escaper);
}

module.exports = escapeTextContentForBrowser;

},{}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/findDOMNode.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule findDOMNode
 * @typechecks static-only
 */

'use strict';

var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactInstanceMap = require("./ReactInstanceMap");
var ReactMount = require("./ReactMount");

var invariant = require("./invariant");
var isNode = require("./isNode");
var warning = require("./warning");

/**
 * Returns the DOM node rendered by this element.
 *
 * @param {ReactComponent|DOMElement} componentOrElement
 * @return {DOMElement} The root node of this element.
 */
function findDOMNode(componentOrElement) {
  if ("production" !== process.env.NODE_ENV) {
    var owner = ReactCurrentOwner.current;
    if (owner !== null) {
      ("production" !== process.env.NODE_ENV ? warning(
        owner._warnedAboutRefsInRender,
        '%s is accessing getDOMNode or findDOMNode inside its render(). ' +
        'render() should be a pure function of props and state. It should ' +
        'never access something that requires stale data from the previous ' +
        'render, such as refs. Move this logic to componentDidMount and ' +
        'componentDidUpdate instead.',
        owner.getName() || 'A component'
      ) : null);
      owner._warnedAboutRefsInRender = true;
    }
  }
  if (componentOrElement == null) {
    return null;
  }
  if (isNode(componentOrElement)) {
    return componentOrElement;
  }
  if (ReactInstanceMap.has(componentOrElement)) {
    return ReactMount.getNodeFromInstance(componentOrElement);
  }
  ("production" !== process.env.NODE_ENV ? invariant(
    componentOrElement.render == null ||
    typeof componentOrElement.render !== 'function',
    'Component (with keys: %s) contains `render` method ' +
    'but is not mounted in the DOM',
    Object.keys(componentOrElement)
  ) : invariant(componentOrElement.render == null ||
  typeof componentOrElement.render !== 'function'));
  ("production" !== process.env.NODE_ENV ? invariant(
    false,
    'Element appears to be neither ReactComponent nor DOMNode (keys: %s)',
    Object.keys(componentOrElement)
  ) : invariant(false));
}

module.exports = findDOMNode;

}).call(this,require('_process'))
},{"./ReactCurrentOwner":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactCurrentOwner.js","./ReactInstanceMap":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactInstanceMap.js","./ReactMount":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactMount.js","./invariant":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/invariant.js","./isNode":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/isNode.js","./warning":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/warning.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/flattenChildren.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule flattenChildren
 */

'use strict';

var traverseAllChildren = require("./traverseAllChildren");
var warning = require("./warning");

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 */
function flattenSingleChildIntoContext(traverseContext, child, name) {
  // We found a component instance.
  var result = traverseContext;
  var keyUnique = !result.hasOwnProperty(name);
  if ("production" !== process.env.NODE_ENV) {
    ("production" !== process.env.NODE_ENV ? warning(
      keyUnique,
      'flattenChildren(...): Encountered two children with the same key, ' +
      '`%s`. Child keys must be unique; when two children share a key, only ' +
      'the first child will be used.',
      name
    ) : null);
  }
  if (keyUnique && child != null) {
    result[name] = child;
  }
}

/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children) {
  if (children == null) {
    return children;
  }
  var result = {};
  traverseAllChildren(children, flattenSingleChildIntoContext, result);
  return result;
}

module.exports = flattenChildren;

}).call(this,require('_process'))
},{"./traverseAllChildren":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/traverseAllChildren.js","./warning":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/warning.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/focusNode.js":[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule focusNode
 */

"use strict";

/**
 * @param {DOMElement} node input/textarea to focus
 */
function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch(e) {
  }
}

module.exports = focusNode;

},{}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/forEachAccumulated.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule forEachAccumulated
 */

'use strict';

/**
 * @param {array} an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */
var forEachAccumulated = function(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
};

module.exports = forEachAccumulated;

},{}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/getActiveElement.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getActiveElement
 * @typechecks
 */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document body is not yet defined.
 */
function getActiveElement() /*?DOMElement*/ {
  try {
    return document.activeElement || document.body;
  } catch (e) {
    return document.body;
  }
}

module.exports = getActiveElement;

},{}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/getEventCharCode.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventCharCode
 * @typechecks static-only
 */

'use strict';

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

module.exports = getEventCharCode;

},{}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/getEventKey.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventKey
 * @typechecks static-only
 */

'use strict';

var getEventCharCode = require("./getEventCharCode");

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  'Esc': 'Escape',
  'Spacebar': ' ',
  'Left': 'ArrowLeft',
  'Up': 'ArrowUp',
  'Right': 'ArrowRight',
  'Down': 'ArrowDown',
  'Del': 'Delete',
  'Win': 'OS',
  'Menu': 'ContextMenu',
  'Apps': 'ContextMenu',
  'Scroll': 'ScrollLock',
  'MozPrintableKey': 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  8: 'Backspace',
  9: 'Tab',
  12: 'Clear',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  19: 'Pause',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  33: 'PageUp',
  34: 'PageDown',
  35: 'End',
  36: 'Home',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  45: 'Insert',
  46: 'Delete',
  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
  144: 'NumLock',
  145: 'ScrollLock',
  224: 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

module.exports = getEventKey;

},{"./getEventCharCode":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/getEventCharCode.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/getEventModifierState.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventModifierState
 * @typechecks static-only
 */

'use strict';

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  'Alt': 'altKey',
  'Control': 'ctrlKey',
  'Meta': 'metaKey',
  'Shift': 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  /*jshint validthis:true */
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

module.exports = getEventModifierState;

},{}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/getEventTarget.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventTarget
 * @typechecks static-only
 */

'use strict';

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */
function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;
  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;

},{}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/getIteratorFn.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getIteratorFn
 * @typechecks static-only
 */

'use strict';

/* global Symbol */
var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

/**
 * Returns the iterator method function contained on the iterable object.
 *
 * Be sure to invoke the function with the iterable as context:
 *
 *     var iteratorFn = getIteratorFn(myIterable);
 *     if (iteratorFn) {
 *       var iterator = iteratorFn.call(myIterable);
 *       ...
 *     }
 *
 * @param {?object} maybeIterable
 * @return {?function}
 */
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (
    (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL])
  );
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

module.exports = getIteratorFn;

},{}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/getMarkupWrap.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getMarkupWrap
 */

var ExecutionEnvironment = require("./ExecutionEnvironment");

var invariant = require("./invariant");

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode =
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */
var shouldWrap = {
  // Force wrapping for SVG elements because if they get created inside a <div>,
  // they will be initialized in the wrong namespace (and will not display).
  'circle': true,
  'clipPath': true,
  'defs': true,
  'ellipse': true,
  'g': true,
  'line': true,
  'linearGradient': true,
  'path': true,
  'polygon': true,
  'polyline': true,
  'radialGradient': true,
  'rect': true,
  'stop': true,
  'text': true
};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg>', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap,

  'circle': svgWrap,
  'clipPath': svgWrap,
  'defs': svgWrap,
  'ellipse': svgWrap,
  'g': svgWrap,
  'line': svgWrap,
  'linearGradient': svgWrap,
  'path': svgWrap,
  'polygon': svgWrap,
  'polyline': svgWrap,
  'radialGradient': svgWrap,
  'rect': svgWrap,
  'stop': svgWrap,
  'text': svgWrap
};

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  ("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'Markup wrapping node not initialized') : invariant(!!dummyNode));
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}


module.exports = getMarkupWrap;

}).call(this,require('_process'))
},{"./ExecutionEnvironment":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ExecutionEnvironment.js","./invariant":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/invariant.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/getNodeForCharacterOffset.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getNodeForCharacterOffset
 */

'use strict';

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */
function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

module.exports = getNodeForCharacterOffset;

},{}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/getReactRootElementInContainer.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getReactRootElementInContainer
 */

'use strict';

var DOC_NODE_TYPE = 9;

/**
 * @param {DOMElement|DOMDocument} container DOM element that may contain
 *                                           a React component
 * @return {?*} DOM element that may have the reactRoot ID, or null.
 */
function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

module.exports = getReactRootElementInContainer;

},{}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/getTextContentAccessor.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getTextContentAccessor
 */

'use strict';

var ExecutionEnvironment = require("./ExecutionEnvironment");

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ?
      'textContent' :
      'innerText';
  }
  return contentKey;
}

module.exports = getTextContentAccessor;

},{"./ExecutionEnvironment":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ExecutionEnvironment.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/getUnboundedScrollPosition.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getUnboundedScrollPosition
 * @typechecks
 */

"use strict";

/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */
function getUnboundedScrollPosition(scrollable) {
  if (scrollable === window) {
    return {
      x: window.pageXOffset || document.documentElement.scrollLeft,
      y: window.pageYOffset || document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;

},{}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/hyphenate.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenate
 * @typechecks
 */

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;

},{}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/hyphenateStyleName.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenateStyleName
 * @typechecks
 */

"use strict";

var hyphenate = require("./hyphenate");

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;

},{"./hyphenate":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/hyphenate.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/instantiateReactComponent.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule instantiateReactComponent
 * @typechecks static-only
 */

'use strict';

var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactEmptyComponent = require("./ReactEmptyComponent");
var ReactNativeComponent = require("./ReactNativeComponent");

var assign = require("./Object.assign");
var invariant = require("./invariant");
var warning = require("./warning");

// To avoid a cyclic dependency, we create the final class in this module
var ReactCompositeComponentWrapper = function() { };
assign(
  ReactCompositeComponentWrapper.prototype,
  ReactCompositeComponent.Mixin,
  {
    _instantiateReactComponent: instantiateReactComponent
  }
);

/**
 * Check if the type reference is a known internal type. I.e. not a user
 * provided composite type.
 *
 * @param {function} type
 * @return {boolean} Returns true if this is a valid internal type.
 */
function isInternalComponentType(type) {
  return (
    typeof type === 'function' &&
    typeof type.prototype !== 'undefined' &&
    typeof type.prototype.mountComponent === 'function' &&
    typeof type.prototype.receiveComponent === 'function'
  );
}

/**
 * Given a ReactNode, create an instance that will actually be mounted.
 *
 * @param {ReactNode} node
 * @param {*} parentCompositeType The composite type that resolved this.
 * @return {object} A new instance of the element's constructor.
 * @protected
 */
function instantiateReactComponent(node, parentCompositeType) {
  var instance;

  if (node === null || node === false) {
    node = ReactEmptyComponent.emptyElement;
  }

  if (typeof node === 'object') {
    var element = node;
    if ("production" !== process.env.NODE_ENV) {
      ("production" !== process.env.NODE_ENV ? warning(
        element && (typeof element.type === 'function' ||
                    typeof element.type === 'string'),
        'Only functions or strings can be mounted as React components.'
      ) : null);
    }

    // Special case string values
    if (parentCompositeType === element.type &&
        typeof element.type === 'string') {
      // Avoid recursion if the wrapper renders itself.
      instance = ReactNativeComponent.createInternalComponent(element);
      // All native components are currently wrapped in a composite so we're
      // safe to assume that this is what we should instantiate.
    } else if (isInternalComponentType(element.type)) {
      // This is temporarily available for custom components that are not string
      // represenations. I.e. ART. Once those are updated to use the string
      // representation, we can drop this code path.
      instance = new element.type(element);
    } else {
      instance = new ReactCompositeComponentWrapper();
    }
  } else if (typeof node === 'string' || typeof node === 'number') {
    instance = ReactNativeComponent.createInstanceForText(node);
  } else {
    ("production" !== process.env.NODE_ENV ? invariant(
      false,
      'Encountered invalid React node of type %s',
      typeof node
    ) : invariant(false));
  }

  if ("production" !== process.env.NODE_ENV) {
    ("production" !== process.env.NODE_ENV ? warning(
      typeof instance.construct === 'function' &&
      typeof instance.mountComponent === 'function' &&
      typeof instance.receiveComponent === 'function' &&
      typeof instance.unmountComponent === 'function',
      'Only React Components can be mounted.'
    ) : null);
  }

  // Sets up the instance. This can probably just move into the constructor now.
  instance.construct(node);

  // These two fields are used by the DOM and ART diffing algorithms
  // respectively. Instead of using expandos on components, we should be
  // storing the state needed by the diffing algorithms elsewhere.
  instance._mountIndex = 0;
  instance._mountImage = null;

  if ("production" !== process.env.NODE_ENV) {
    instance._isOwnerNecessary = false;
    instance._warnedAboutRefsInRender = false;
  }

  // Internal instances should fully constructed at this point, so they should
  // not get any new fields added to them at this point.
  if ("production" !== process.env.NODE_ENV) {
    if (Object.preventExtensions) {
      Object.preventExtensions(instance);
    }
  }

  return instance;
}

module.exports = instantiateReactComponent;

}).call(this,require('_process'))
},{"./Object.assign":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/Object.assign.js","./ReactCompositeComponent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactCompositeComponent.js","./ReactEmptyComponent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactEmptyComponent.js","./ReactNativeComponent":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactNativeComponent.js","./invariant":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/invariant.js","./warning":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/warning.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/invariant.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule invariant
 */

"use strict";

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function(condition, format, a, b, c, d, e, f) {
  if ("production" !== process.env.NODE_ENV) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error(
        'Minified exception occurred; use the non-minified dev environment ' +
        'for the full error message and additional helpful warnings.'
      );
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(
        'Invariant Violation: ' +
        format.replace(/%s/g, function() { return args[argIndex++]; })
      );
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

module.exports = invariant;

}).call(this,require('_process'))
},{"_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/isEventSupported.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isEventSupported
 */

'use strict';

var ExecutionEnvironment = require("./ExecutionEnvironment");

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature =
    document.implementation &&
    document.implementation.hasFeature &&
    // always returns true in newer browsers as per the standard.
    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
    document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM ||
      capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;

},{"./ExecutionEnvironment":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ExecutionEnvironment.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/isNode.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isNode
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
function isNode(object) {
  return !!(object && (
    ((typeof Node === 'function' ? object instanceof Node : typeof object === 'object' &&
    typeof object.nodeType === 'number' &&
    typeof object.nodeName === 'string'))
  ));
}

module.exports = isNode;

},{}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/isTextInputElement.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextInputElement
 */

'use strict';

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  'color': true,
  'date': true,
  'datetime': true,
  'datetime-local': true,
  'email': true,
  'month': true,
  'number': true,
  'password': true,
  'range': true,
  'search': true,
  'tel': true,
  'text': true,
  'time': true,
  'url': true,
  'week': true
};

function isTextInputElement(elem) {
  return elem && (
    (elem.nodeName === 'INPUT' && supportedInputTypes[elem.type] || elem.nodeName === 'TEXTAREA')
  );
}

module.exports = isTextInputElement;

},{}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/isTextNode.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextNode
 * @typechecks
 */

var isNode = require("./isNode");

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;

},{"./isNode":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/isNode.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/keyMirror.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyMirror
 * @typechecks static-only
 */

'use strict';

var invariant = require("./invariant");

/**
 * Constructs an enumeration with keys equal to their value.
 *
 * For example:
 *
 *   var COLORS = keyMirror({blue: null, red: null});
 *   var myColor = COLORS.blue;
 *   var isColorValid = !!COLORS[myColor];
 *
 * The last line could not be performed if the values of the generated enum were
 * not equal to their keys.
 *
 *   Input:  {key1: val1, key2: val2}
 *   Output: {key1: key1, key2: key2}
 *
 * @param {object} obj
 * @return {object}
 */
var keyMirror = function(obj) {
  var ret = {};
  var key;
  ("production" !== process.env.NODE_ENV ? invariant(
    obj instanceof Object && !Array.isArray(obj),
    'keyMirror(...): Argument must be an object.'
  ) : invariant(obj instanceof Object && !Array.isArray(obj)));
  for (key in obj) {
    if (!obj.hasOwnProperty(key)) {
      continue;
    }
    ret[key] = key;
  }
  return ret;
};

module.exports = keyMirror;

}).call(this,require('_process'))
},{"./invariant":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/invariant.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/keyOf.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyOf
 */

/**
 * Allows extraction of a minified key. Let's the build system minify keys
 * without loosing the ability to dynamically use key strings as values
 * themselves. Pass in an object with a single key/val pair and it will return
 * you the string key of that single record. Suppose you want to grab the
 * value for a key 'className' inside of an object. Key/val minification may
 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
 * reuse those resolutions.
 */
var keyOf = function(oneKeyObj) {
  var key;
  for (key in oneKeyObj) {
    if (!oneKeyObj.hasOwnProperty(key)) {
      continue;
    }
    return key;
  }
  return null;
};


module.exports = keyOf;

},{}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/mapObject.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule mapObject
 */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * Executes the provided `callback` once for each enumerable own property in the
 * object and constructs a new object from the results. The `callback` is
 * invoked with three arguments:
 *
 *  - the property value
 *  - the property name
 *  - the object being traversed
 *
 * Properties that are added after the call to `mapObject` will not be visited
 * by `callback`. If the values of existing properties are changed, the value
 * passed to `callback` will be the value at the time `mapObject` visits them.
 * Properties that are deleted before being visited are not visited.
 *
 * @grep function objectMap()
 * @grep function objMap()
 *
 * @param {?object} object
 * @param {function} callback
 * @param {*} context
 * @return {?object}
 */
function mapObject(object, callback, context) {
  if (!object) {
    return null;
  }
  var result = {};
  for (var name in object) {
    if (hasOwnProperty.call(object, name)) {
      result[name] = callback.call(context, object[name], name, object);
    }
  }
  return result;
}

module.exports = mapObject;

},{}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/memoizeStringOnly.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule memoizeStringOnly
 * @typechecks static-only
 */

'use strict';

/**
 * Memoizes the return value of a function that accepts one string argument.
 *
 * @param {function} callback
 * @return {function}
 */
function memoizeStringOnly(callback) {
  var cache = {};
  return function(string) {
    if (!cache.hasOwnProperty(string)) {
      cache[string] = callback.call(this, string);
    }
    return cache[string];
  };
}

module.exports = memoizeStringOnly;

},{}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/onlyChild.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule onlyChild
 */
'use strict';

var ReactElement = require("./ReactElement");

var invariant = require("./invariant");

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection. The current implementation of this
 * function assumes that a single child gets passed without a wrapper, but the
 * purpose of this helper function is to abstract away the particular structure
 * of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactComponent} The first and only `ReactComponent` contained in the
 * structure.
 */
function onlyChild(children) {
  ("production" !== process.env.NODE_ENV ? invariant(
    ReactElement.isValidElement(children),
    'onlyChild must be passed a children with exactly one child.'
  ) : invariant(ReactElement.isValidElement(children)));
  return children;
}

module.exports = onlyChild;

}).call(this,require('_process'))
},{"./ReactElement":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactElement.js","./invariant":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/invariant.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/performance.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performance
 * @typechecks
 */

"use strict";

var ExecutionEnvironment = require("./ExecutionEnvironment");

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance =
    window.performance ||
    window.msPerformance ||
    window.webkitPerformance;
}

module.exports = performance || {};

},{"./ExecutionEnvironment":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ExecutionEnvironment.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/performanceNow.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performanceNow
 * @typechecks
 */

var performance = require("./performance");

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (!performance || !performance.now) {
  performance = Date;
}

var performanceNow = performance.now.bind(performance);

module.exports = performanceNow;

},{"./performance":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/performance.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/quoteAttributeValueForBrowser.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule quoteAttributeValueForBrowser
 */

'use strict';

var escapeTextContentForBrowser = require("./escapeTextContentForBrowser");

/**
 * Escapes attribute value to prevent scripting attacks.
 *
 * @param {*} value Value to escape.
 * @return {string} An escaped string.
 */
function quoteAttributeValueForBrowser(value) {
  return '"' + escapeTextContentForBrowser(value) + '"';
}

module.exports = quoteAttributeValueForBrowser;

},{"./escapeTextContentForBrowser":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/escapeTextContentForBrowser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/setInnerHTML.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule setInnerHTML
 */

/* globals MSApp */

'use strict';

var ExecutionEnvironment = require("./ExecutionEnvironment");

var WHITESPACE_TEST = /^[ \r\n\t\f]/;
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

/**
 * Set the innerHTML property of a node, ensuring that whitespace is preserved
 * even in IE8.
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = function(node, html) {
  node.innerHTML = html;
};

// Win8 apps: Allow all html to be inserted
if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
  setInnerHTML = function(node, html) {
    MSApp.execUnsafeLocalFunction(function() {
      node.innerHTML = html;
    });
  };
}

if (ExecutionEnvironment.canUseDOM) {
  // IE8: When updating a just created node with innerHTML only leading
  // whitespace is removed. When updating an existing node with innerHTML
  // whitespace in root TextNodes is also collapsed.
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

  // Feature detection; only IE8 is known to behave improperly like this.
  var testElement = document.createElement('div');
  testElement.innerHTML = ' ';
  if (testElement.innerHTML === '') {
    setInnerHTML = function(node, html) {
      // Magic theory: IE8 supposedly differentiates between added and updated
      // nodes when processing innerHTML, innerHTML on updated nodes suffers
      // from worse whitespace behavior. Re-adding a node like this triggers
      // the initial and more favorable whitespace behavior.
      // TODO: What to do on a detached node?
      if (node.parentNode) {
        node.parentNode.replaceChild(node, node);
      }

      // We also implement a workaround for non-visible tags disappearing into
      // thin air on IE8, this only happens if there is no visible text
      // in-front of the non-visible tags. Piggyback on the whitespace fix
      // and simply check if any non-visible tags appear in the source.
      if (WHITESPACE_TEST.test(html) ||
          html[0] === '<' && NONVISIBLE_TEST.test(html)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        node.innerHTML = '\uFEFF' + html;

        // deleteData leaves an empty `TextNode` which offsets the index of all
        // children. Definitely want to avoid this.
        var textNode = node.firstChild;
        if (textNode.data.length === 1) {
          node.removeChild(textNode);
        } else {
          textNode.deleteData(0, 1);
        }
      } else {
        node.innerHTML = html;
      }
    };
  }
}

module.exports = setInnerHTML;

},{"./ExecutionEnvironment":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ExecutionEnvironment.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/setTextContent.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule setTextContent
 */

'use strict';

var ExecutionEnvironment = require("./ExecutionEnvironment");
var escapeTextContentForBrowser = require("./escapeTextContentForBrowser");
var setInnerHTML = require("./setInnerHTML");

/**
 * Set the textContent property of a node, ensuring that whitespace is preserved
 * even in IE8. innerText is a poor substitute for textContent and, among many
 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
 * as it should.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */
var setTextContent = function(node, text) {
  node.textContent = text;
};

if (ExecutionEnvironment.canUseDOM) {
  if (!('textContent' in document.documentElement)) {
    setTextContent = function(node, text) {
      setInnerHTML(node, escapeTextContentForBrowser(text));
    };
  }
}

module.exports = setTextContent;

},{"./ExecutionEnvironment":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ExecutionEnvironment.js","./escapeTextContentForBrowser":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/escapeTextContentForBrowser.js","./setInnerHTML":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/setInnerHTML.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/shallowEqual.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shallowEqual
 */

'use strict';

/**
 * Performs equality by iterating through keys on an object and returning
 * false when any key has values which are not strictly equal between
 * objA and objB. Returns true when the values of all keys are strictly equal.
 *
 * @return {boolean}
 */
function shallowEqual(objA, objB) {
  if (objA === objB) {
    return true;
  }
  var key;
  // Test for A's keys different from B.
  for (key in objA) {
    if (objA.hasOwnProperty(key) &&
        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {
      return false;
    }
  }
  // Test for B's keys missing from A.
  for (key in objB) {
    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {
      return false;
    }
  }
  return true;
}

module.exports = shallowEqual;

},{}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/shouldUpdateReactComponent.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shouldUpdateReactComponent
 * @typechecks static-only
 */

'use strict';

var warning = require("./warning");

/**
 * Given a `prevElement` and `nextElement`, determines if the existing
 * instance should be updated as opposed to being destroyed or replaced by a new
 * instance. Both arguments are elements. This ensures that this logic can
 * operate on stateless trees without any backing instance.
 *
 * @param {?object} prevElement
 * @param {?object} nextElement
 * @return {boolean} True if the existing instance should be updated.
 * @protected
 */
function shouldUpdateReactComponent(prevElement, nextElement) {
  if (prevElement != null && nextElement != null) {
    var prevType = typeof prevElement;
    var nextType = typeof nextElement;
    if (prevType === 'string' || prevType === 'number') {
      return (nextType === 'string' || nextType === 'number');
    } else {
      if (nextType === 'object' &&
          prevElement.type === nextElement.type &&
          prevElement.key === nextElement.key) {
        var ownersMatch = prevElement._owner === nextElement._owner;
        var prevName = null;
        var nextName = null;
        var nextDisplayName = null;
        if ("production" !== process.env.NODE_ENV) {
          if (!ownersMatch) {
            if (prevElement._owner != null &&
                prevElement._owner.getPublicInstance() != null &&
                prevElement._owner.getPublicInstance().constructor != null) {
              prevName =
                prevElement._owner.getPublicInstance().constructor.displayName;
            }
            if (nextElement._owner != null &&
                nextElement._owner.getPublicInstance() != null &&
                nextElement._owner.getPublicInstance().constructor != null) {
              nextName =
                nextElement._owner.getPublicInstance().constructor.displayName;
            }
            if (nextElement.type != null &&
                nextElement.type.displayName != null) {
              nextDisplayName = nextElement.type.displayName;
            }
            if (nextElement.type != null && typeof nextElement.type === 'string') {
              nextDisplayName = nextElement.type;
            }
            if (typeof nextElement.type !== 'string' ||
                nextElement.type === 'input' ||
                nextElement.type === 'textarea') {
              if ((prevElement._owner != null &&
                  prevElement._owner._isOwnerNecessary === false) ||
                  (nextElement._owner != null &&
                  nextElement._owner._isOwnerNecessary === false)) {
                if (prevElement._owner != null) {
                  prevElement._owner._isOwnerNecessary = true;
                }
                if (nextElement._owner != null) {
                  nextElement._owner._isOwnerNecessary = true;
                }
                ("production" !== process.env.NODE_ENV ? warning(
                  false,
                  '<%s /> is being rendered by both %s and %s using the same ' +
                  'key (%s) in the same place. Currently, this means that ' +
                  'they don\'t preserve state. This behavior should be very ' +
                  'rare so we\'re considering deprecating it. Please contact ' +
                  'the React team and explain your use case so that we can ' +
                  'take that into consideration.',
                  nextDisplayName || 'Unknown Component',
                  prevName || '[Unknown]',
                  nextName || '[Unknown]',
                  prevElement.key
                ) : null);
              }
            }
          }
        }
        return ownersMatch;
      }
    }
  }
  return false;
}

module.exports = shouldUpdateReactComponent;

}).call(this,require('_process'))
},{"./warning":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/warning.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/toArray.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule toArray
 * @typechecks
 */

var invariant = require("./invariant");

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFromMixed.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
  // old versions of Safari).
  ("production" !== process.env.NODE_ENV ? invariant(
    !Array.isArray(obj) &&
    (typeof obj === 'object' || typeof obj === 'function'),
    'toArray: Array-like object expected'
  ) : invariant(!Array.isArray(obj) &&
  (typeof obj === 'object' || typeof obj === 'function')));

  ("production" !== process.env.NODE_ENV ? invariant(
    typeof length === 'number',
    'toArray: Object needs a length property'
  ) : invariant(typeof length === 'number'));

  ("production" !== process.env.NODE_ENV ? invariant(
    length === 0 ||
    (length - 1) in obj,
    'toArray: Object should have keys for indices'
  ) : invariant(length === 0 ||
  (length - 1) in obj));

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

module.exports = toArray;

}).call(this,require('_process'))
},{"./invariant":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/invariant.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/traverseAllChildren.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule traverseAllChildren
 */

'use strict';

var ReactElement = require("./ReactElement");
var ReactFragment = require("./ReactFragment");
var ReactInstanceHandles = require("./ReactInstanceHandles");

var getIteratorFn = require("./getIteratorFn");
var invariant = require("./invariant");
var warning = require("./warning");

var SEPARATOR = ReactInstanceHandles.SEPARATOR;
var SUBSEPARATOR = ':';

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var userProvidedKeyEscaperLookup = {
  '=': '=0',
  '.': '=1',
  ':': '=2'
};

var userProvidedKeyEscapeRegex = /[=.:]/g;

var didWarnAboutMaps = false;

function userProvidedKeyEscaper(match) {
  return userProvidedKeyEscaperLookup[match];
}

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  if (component && component.key != null) {
    // Explicit key
    return wrapUserProvidedKey(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * Escape a component key so that it is safe to use in a reactid.
 *
 * @param {*} key Component key to be escaped.
 * @return {string} An escaped string.
 */
function escapeUserProvidedKey(text) {
  return ('' + text).replace(
    userProvidedKeyEscapeRegex,
    userProvidedKeyEscaper
  );
}

/**
 * Wrap a `key` value explicitly provided by the user to distinguish it from
 * implicitly-generated keys generated by a component's index in its parent.
 *
 * @param {string} key Value of a user-provided `key` attribute
 * @return {string}
 */
function wrapUserProvidedKey(key) {
  return '$' + escapeUserProvidedKey(key);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!number} indexSoFar Number of children encountered until this point.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(
  children,
  nameSoFar,
  indexSoFar,
  callback,
  traverseContext
) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null ||
      type === 'string' ||
      type === 'number' ||
      ReactElement.isValidElement(children)) {
    callback(
      traverseContext,
      children,
      // If it's the only child, treat the name as if it was wrapped in an array
      // so that it's consistent if the number of children grows.
      nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar,
      indexSoFar
    );
    return 1;
  }

  var child, nextName, nextIndex;
  var subtreeCount = 0; // Count of children found in the current subtree.

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = (
        (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
        getComponentKey(child, i)
      );
      nextIndex = indexSoFar + subtreeCount;
      subtreeCount += traverseAllChildrenImpl(
        child,
        nextName,
        nextIndex,
        callback,
        traverseContext
      );
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = (
            (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
            getComponentKey(child, ii++)
          );
          nextIndex = indexSoFar + subtreeCount;
          subtreeCount += traverseAllChildrenImpl(
            child,
            nextName,
            nextIndex,
            callback,
            traverseContext
          );
        }
      } else {
        if ("production" !== process.env.NODE_ENV) {
          ("production" !== process.env.NODE_ENV ? warning(
            didWarnAboutMaps,
            'Using Maps as children is not yet fully supported. It is an ' +
            'experimental feature that might be removed. Convert it to a ' +
            'sequence / iterable of keyed ReactElements instead.'
          ) : null);
          didWarnAboutMaps = true;
        }
        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = (
              (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
              wrapUserProvidedKey(entry[0]) + SUBSEPARATOR +
              getComponentKey(child, 0)
            );
            nextIndex = indexSoFar + subtreeCount;
            subtreeCount += traverseAllChildrenImpl(
              child,
              nextName,
              nextIndex,
              callback,
              traverseContext
            );
          }
        }
      }
    } else if (type === 'object') {
      ("production" !== process.env.NODE_ENV ? invariant(
        children.nodeType !== 1,
        'traverseAllChildren(...): Encountered an invalid child; DOM ' +
        'elements are not valid children of React components.'
      ) : invariant(children.nodeType !== 1));
      var fragment = ReactFragment.extract(children);
      for (var key in fragment) {
        if (fragment.hasOwnProperty(key)) {
          child = fragment[key];
          nextName = (
            (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
            wrapUserProvidedKey(key) + SUBSEPARATOR +
            getComponentKey(child, 0)
          );
          nextIndex = indexSoFar + subtreeCount;
          subtreeCount += traverseAllChildrenImpl(
            child,
            nextName,
            nextIndex,
            callback,
            traverseContext
          );
        }
      }
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', 0, callback, traverseContext);
}

module.exports = traverseAllChildren;

}).call(this,require('_process'))
},{"./ReactElement":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactElement.js","./ReactFragment":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactFragment.js","./ReactInstanceHandles":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/ReactInstanceHandles.js","./getIteratorFn":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/getIteratorFn.js","./invariant":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/invariant.js","./warning":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/warning.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/warning.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule warning
 */

"use strict";

var emptyFunction = require("./emptyFunction");

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if ("production" !== process.env.NODE_ENV) {
  warning = function(condition, format ) {for (var args=[],$__0=2,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
    if (format === undefined) {
      throw new Error(
        '`warning(condition, format, ...args)` requires a warning ' +
        'message argument'
      );
    }

    if (format.length < 10 || /^[s\W]*$/.test(format)) {
      throw new Error(
        'The warning format should be able to uniquely identify this ' +
        'warning. Please, use a more descriptive format than: ' + format
      );
    }

    if (format.indexOf('Failed Composite propType: ') === 0) {
      return; // Ignore CompositeComponent proptype check.
    }

    if (!condition) {
      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];});
      console.warn(message);
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch(x) {}
    }
  };
}

module.exports = warning;

}).call(this,require('_process'))
},{"./emptyFunction":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/emptyFunction.js","_process":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/browserify/node_modules/process/browser.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/react.js":[function(require,module,exports){
module.exports = require('./lib/React');

},{"./lib/React":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/lib/React.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/src/scripts/components/Clock.jsx":[function(require,module,exports){
/** @jsx React.DOM */

'use strict';

var React = require('react');

/**
 * Clock component.
 * Get city with its timezone data and calculate time.
 */
var Clock = React.createClass({displayName: "Clock",

  /**
   * Validate props.
   * @type {Object}
   */
  propTypes: {
    city: React.PropTypes.object.isRequired,
    zone: React.PropTypes.object.isRequired
  },

  /**
   * Invoked once before the component is mounted.
   * The return value will be used as the initial value of this.state.
   * @type {Object}
   */
  getInitialState: function() {

    var date = new Date();

    if (this.props.debug) {
      this.props.hours12 = false;
      this.__testTime(date);
    }

    return {
      time: this._getTime(date)
    };
  },

  /**
   * Invoked once, immediately before the initial rendering occurs.
   * Sync and start ticker.
   */
  componentWillMount: function() {

    this._syncTick(function() {
      this._tick();
      this.timer = setInterval(this._tick, 1000);
    }, this);
  },

  /**
   * Remove the timer when the component unmounts.
   */
  componentWillUnmount: function() {
    this.timer && clearInterval(this.timer);
  },

  /**
   * Sync tick by detecting when next second will occour and fire callback.
   * @param {Function} callback The callback to run when second change.
   * @param {Object} context The instance context.
   * @private
   */
  _syncTick: function(callback, context) {

    var date = new Date();
    var delay = 1000 - date.getMilliseconds();

    setTimeout(callback.bind(context), delay);
  },

  /**
   * Ticker, update state to current time.
   * @private
   */
  _tick: function() {

    var date = new Date();

    this.setState({
      time: this._getTime(date)
    });
  },

  /**
   * Set the clock object to zone time, obtain difference
   * and add/subtract to local time (notice that diff.hh can be negative).
   * @param {Object} date The `new Date()` object.
   * @return {Object} The current zone time.
   * @private
   */
  _getTime: function(date) {

    var diff = this._getDifference(date);

    var hh = date.getHours() + diff.hh;
    var mm = date.getMinutes() + diff.mm;

    var hours12 = this.props.hours12;

    var when = this._setWhenSentence('Today, ', diff);

    // Once obtained the local hours/minutes and added the
    // difference from the desidered zone check edge cases A, B, C.

    // A: Minutes above one hour, go to next hour.
    if (mm >= 60) {
      hh ++;
      mm = mm - 60;
    }

    // B: At midnight local time, minus zone difference
    // hh will be negative and refer to a day behind.
    if (hh < 0) {

      // More than 24 hours behind, it can happen only between
      // UTC +14 (local) and UTC -12 (zone) and least for 2 hours or more.
      if (diff.hh < -24) {
        // TODO: Decrease a day in date can be done here.
        when = 'Two days behind';
        // Restart from midnight.
        hh += 24;
      } else {
        // TODO: Decrease a day in date can be done here.
        when = this._setWhenSentence('Yesterday, ', diff);
      }

      hh = 24 - Math.abs(hh);
    }

    // C: When difference greater than hours left to midnight,
    // hh will be equal to at least 24 and refer to a day ahead.
    if (hh > 23) {

      // More than a 24 hours ahead, it can happen only between
      // UTC -12 (local) and UTC +14 (zone) and least for 2 hours or more.
      if (diff.hh > 24) {
        // TODO: Increase a day in date can be done here.
        when = 'Two days ahead.';
      } else {
        // TODO: Increase a day in date can be done here.
        when = this._setWhenSentence('Tomorrow, ', diff);
      }

      hh = hh - 24;
    }

    // Set 12-hours clock.
    if (hours12) {
      hours12 = (hh >= 12) ? 'PM' : 'AM';
      // http://stackoverflow.com/a/14399178
      hh = ((hh + 11) % 12 + 1);
    }

    return {
      hh: this._pad(hh),
      mm: this._pad(mm),
      ss: this._pad(date.getSeconds()),
      hours12: hours12,
      when: when
    };
  },

  /**
   * Calculate zone difference from local time, subtract the zone UTC
   * offset (based on DST) to the local UTC offset and calculate zone
   * difference in hours and minutes.
   * @param {Object} date The `new Date()` object.
   * @return {Object} The zone difference in hours and minutes.
   * @private
   */
  _getDifference: function(date) {

    var isDST = this._isDST();

    // Local UTC offset in minutes.
    var offset = date.getTimezoneOffset(); // -60

    // Zone UTC offset in minutes.
    var offsets = this.props.zone.offsets; // 285 (4.75hrs)

    // Last offset in array is associated with
    // untils `null` and never refer to DST.
    var lastOffset = offsets.length - 1;

    if (isDST) {
      offset -= offsets[lastOffset - 1]; // -345
    } else {
      offset -= offsets[lastOffset];
    }

    // Zone difference in hours and minutes,
    // notice that minutes are never negative.
    var hh = Math.floor(offset / 60); // (-5.75) = -6
    var mm = offset - (hh * 60); // -345 - (-6*60) = 15

    return {
      hh: hh, // -6
      mm: mm // 15
    };
  },

  /**
   * Detect if DST is currently observed.
   * @return {boolean} True if DST is currently observed in the given zone.
   * @private
   */
  _isDST: function() {

    var isDST = false;

    var PAIR = 2;

    var now = Date.now();

    var untils = this.props.zone.untils;

    // Remove last item in array when it's null.
    if (!untils[untils.length - 1]) {
      untils.pop();
    }

    // Warn if DST is observed more than twice.
    if (untils.length > PAIR * 2) {
      var zone = this.props.zone.name;
      console.warn('DST is observed more than twice this year in ' + zone);
    }

    // When there are [start, end] pairs.
    if (untils.length % PAIR === 0) {

      // Loop by 2 and check DST.
      for (var i = 0; i < untils.length; i += PAIR) {

        var start = untils[i];
        var end = untils [i + 1];

        // DST not started or finished.
        if (now < start || now > end) {
          continue;
        }

        // DST observed.
        if (now < end) {
          isDST = true;
        }
      }
    } else if (untils.length === 1) {
      // When there is only end, check if DST is still observed.
      if (now < untils[0]) {
        isDST = true;
      }
    }

    return isDST;
  },

  /**
   * Set when sentence.
   * @param {String} day The named day(s) like `Today`, `Tomorrow`, etc.
   * @param {Object} diff The zone difference from local time.
   * @return {String} The when sentence.
   * @private
   */
  _setWhenSentence: function(day, diff) {

    var hh = diff.hh;
    var mm = diff.mm;

    // Just `Today` if no difference from local time.
    if (hh === 0 && mm === 0) return day.replace(', ', '');

    var hours;
    var direction = (hh > 0) ? ' ahead.' : ' behind.';

    if (Math.abs(hh) > 1) {
      hours = Math.abs(hh) + ' hours';
    } else {
      hours = Math.abs(hh) + ' hour';
    }

    if (hh > 0 && mm > 0) {
      hours = hh + 'h ' + mm + 'm'
    }

    return day + hours + direction;
  },

  /**
   * Format a Number in two length.
   * @param  {number} n The number to be converted.
   * @return {string}   The formatted string.
   * @private
   */
  _pad: function(n) {

    var nString = n.toString();

    return (n < 10) ? '0' + nString : nString;
  },

  /**
   * Test my computed time with time given from .toLocaleString()
   * for supported zones and log results.
   * TODO: Remove for production.
   * @private
   */
  __testTime: function(date) {

    try {

      var zone = this.props.zone.name;

      var correctDateString = date.toLocaleString(undefined, {
        timeZone: zone
      });

      var correctDate = new Date(correctDateString);

      var myDate = this._getTime(date);

      console.log('\n');

      if (correctDate.getHours() !== Number(myDate.hh)) {

        console.log('%cHOURS WRONG in ' + zone,
          'color: red; font-weight:bold;');
      } else if (correctDate.getMinutes() !== Number(myDate.mm)) {

        console.log('%cHOURS WRONG in ' + zone,
          'color: red; font-weight:bold;');
      } else if (correctDate.getSeconds() !== Number(myDate.ss)) {

        console.log('%cSECONDS WRONG in ' + zone,
          'color: red; font-weight:bold;');
      } else {

        console.log('%cTIME CORRECT in ' + zone,
          'color: green; font-weight:bold;');
        console.log(correctDate);
        console.log(myDate);
      }

    } catch (e) {

      if (e instanceof RangeError) {
        console.log('%c' + e.message + ':', 'color: orange;');
      }
    }
  },

  /**
   * Render.
   * @return {ReactElement} The Clock component.
   */
  render: function() {

    var city = this.props.city;
    var time = this.state.time;

    var showCity = this.props.showCity;
    var showCountry = this.props.showCountry;
    var showDay = this.props.showDay;

    return (
      React.createElement("div", {className: "clock"}, 
        this.props.debug ? React.createElement("p", null, "TZ: ", this.props.zone.name) : null, 
        React.createElement("p", null, 
          React.createElement("strong", null, 
            showCity ? city.name : 'YOU', 
            showCountry ? ' (' + city.country + ')' : null
          )
        ), 
        React.createElement("p", null, 
          React.createElement("strong", null, time.hh, ":", time.mm, ":", time.ss, time.hours12 ? ' ' + time.hours12 : null)
        ), 
        showDay ?
          React.createElement("p", null, 
            React.createElement("strong", null, time.when, time.diff)
          )
          : null
        
      )
    );
  }

});

module.exports = Clock;

},{"react":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/react.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/src/scripts/components/Search.jsx":[function(require,module,exports){
/** @jsx React.DOM */

'use strict';

var React = require('react');

/**
 * Search component.
 * Capture user input and display a filtered list of countries
 * with related timezone, when item clicked dispatch new country.
 */
var Search = React.createClass({

  displayName: 'Search',

  /**
   * Render.
   * @return {ReactElement} The Search component.
   */
  render: function() {
    return (
      React.createElement("div", null, 
        React.createElement("h2", null, "Search"), 
        React.createElement("input", {type: "search", value: ""}), 
        React.createElement("ul", null, 
          React.createElement("li", null, "item"), 
          React.createElement("li", null, "item"), 
          React.createElement("li", null, "item")
        )
      )
    );
  }
});

module.exports = Search;

},{"react":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/react.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/src/scripts/components/Wall.jsx":[function(require,module,exports){
/** @jsx React.DOM */

'use strict';

var React = require('react');

var Search = require('./Search.jsx');
var Clock = require('./Clock.jsx');

/**
 * Wall component.
 */
var Wall = React.createClass({displayName: "Wall",

  /**
   * Render.
   * @return {ReactElement} The Wall component.
   */
  render: function() {

    var cities = this.props.cities;

    var you = this._getYou();

    // var zoneClocks = this._getClocks();
    var cityClocks = this._getCityClocks();

    return (
      React.createElement("main", null, 
        React.createElement("h1", null, "Wall"), 
        React.createElement(Search, null), 
        React.createElement("div", {className: "you"}, you), 
        React.createElement("div", {className: "clocks"}, cityClocks)
      )
    );
  },

  _getYou: function() {

    var city = {
      "geonameid": 3165524,
      "name": "Turin",
      "country": "IT",
      "lat": 45.07049,
      "long": 7.68682,
      "zone": "Europe/Rome"
    };

    var zone = {
      "name": "Europe/Rome",
      "abbrs": [
        "CET",
        "CEST",
        "CET"
      ],
      "untils": [
        1427590800000,
        1445734800000,
        null
      ],
      "offsets": [
        -60,
        -120,
        -60
      ]
    };

    return React.createElement(Clock, {
      city: city, 
      zone: zone, 
      showCity: false, 
      showCountry: false, 
      showDay: false, 
      hours12: false, 
      debug: false});
  },

  _getClocks: function() {

    return this.props.zones.map(function(zone, i) {

      var city = {
        "name": "Turin",
        "country": "IT",
        "lat": 45.07049,
        "long": 7.68682,
        "zone": "Europe/Rome"
      };

      return React.createElement(Clock, {
        key: i, 
        city: city, 
        zone: zone, 
        showCity: true, 
        showCountry: true, 
        showDay: true, 
        hours12: false, 
        debug: false});

    }, this);
  },

  _getCityClocks: function() {

    var zones = this._createZonesObject();

    return this.props.cities.map(function(city, i) {

      var zone = zones[city.zone];

      if (zone) {
        return React.createElement(Clock, {
          key: i, 
          city: city, 
          zone: zone, 
          showCity: true, 
          showCountry: true, 
          showDay: true, 
          hours12: false, 
          debug: false});
      }


    }, this);
  },

  _createZonesObject: function() {

    var zones = this.props.zones;

    var zonesObj = {};

    zones.forEach(function(zone, i) {
      zonesObj[zone.name] = zone;
    });

    return zonesObj;
  }

});

module.exports = Wall;

},{"./Clock.jsx":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/src/scripts/components/Clock.jsx","./Search.jsx":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/src/scripts/components/Search.jsx","react":"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/node_modules/react/react.js"}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/src/scripts/data/cities.js":[function(require,module,exports){
module.exports = [
  {
    "name": "Ras al-Khaimah",
    "country": "AE",
    "lat": 25.78953,
    "long": 55.9432,
    "zone": "Asia/Dubai"
  },
  {
    "name": "Dubai",
    "country": "AE",
    "lat": 25.0657,
    "long": 55.17128,
    "zone": "Asia/Dubai"
  },
  {
    "name": "Sharjah",
    "country": "AE",
    "lat": 25.33737,
    "long": 55.41206,
    "zone": "Asia/Dubai"
  },
  {
    "name": "Al Ain",
    "country": "AE",
    "lat": 24.19167,
    "long": 55.76056,
    "zone": "Asia/Dubai"
  },
  {
    "name": "Ajman",
    "country": "AE",
    "lat": 25.41111,
    "long": 55.43504,
    "zone": "Asia/Dubai"
  },
  {
    "name": "Abu Dhabi",
    "country": "AE",
    "lat": 24.46667,
    "long": 54.36667,
    "zone": "Asia/Dubai"
  },
  {
    "name": "Mazār-e Sharīf",
    "country": "AF",
    "lat": 36.70904,
    "long": 67.11087,
    "zone": "Asia/Kabul"
  },
  {
    "name": "Kunduz",
    "country": "AF",
    "lat": 36.72895,
    "long": 68.857,
    "zone": "Asia/Kabul"
  },
  {
    "name": "Kandahār",
    "country": "AF",
    "lat": 31.61332,
    "long": 65.71013,
    "zone": "Asia/Kabul"
  },
  {
    "name": "Kabul",
    "country": "AF",
    "lat": 34.52813,
    "long": 69.17233,
    "zone": "Asia/Kabul"
  },
  {
    "name": "Jalālābād",
    "country": "AF",
    "lat": 34.42647,
    "long": 70.45153,
    "zone": "Asia/Kabul"
  },
  {
    "name": "Herāt",
    "country": "AF",
    "lat": 34.34817,
    "long": 62.19967,
    "zone": "Asia/Kabul"
  },
  {
    "name": "Ghazni",
    "country": "AF",
    "lat": 33.55391,
    "long": 68.42096,
    "zone": "Asia/Kabul"
  },
  {
    "name": "Gardēz",
    "country": "AF",
    "lat": 33.59744,
    "long": 69.22592,
    "zone": "Asia/Kabul"
  },
  {
    "name": "Balkh",
    "country": "AF",
    "lat": 36.75635,
    "long": 66.8972,
    "zone": "Asia/Kabul"
  },
  {
    "name": "Baghlān",
    "country": "AF",
    "lat": 36.13068,
    "long": 68.70829,
    "zone": "Asia/Kabul"
  },
  {
    "name": "Elbasan",
    "country": "AL",
    "lat": 41.1125,
    "long": 20.08222,
    "zone": "Europe/Tirane"
  },
  {
    "name": "Tirana",
    "country": "AL",
    "lat": 41.3275,
    "long": 19.81889,
    "zone": "Europe/Tirane"
  },
  {
    "name": "Durrës",
    "country": "AL",
    "lat": 41.32306,
    "long": 19.44139,
    "zone": "Europe/Tirane"
  },
  {
    "name": "Yerevan",
    "country": "AM",
    "lat": 40.18111,
    "long": 44.51361,
    "zone": "Asia/Yerevan"
  },
  {
    "name": "Vanadzor",
    "country": "AM",
    "lat": 40.80456,
    "long": 44.4939,
    "zone": "Asia/Yerevan"
  },
  {
    "name": "Gyumri",
    "country": "AM",
    "lat": 40.7942,
    "long": 43.84528,
    "zone": "Asia/Yerevan"
  },
  {
    "name": "N’dalatando",
    "country": "AO",
    "lat": -9.29782,
    "long": 14.91162,
    "zone": "Africa/Luanda"
  },
  {
    "name": "Luanda",
    "country": "AO",
    "lat": -8.83682,
    "long": 13.23432,
    "zone": "Africa/Luanda"
  },
  {
    "name": "Lubango",
    "country": "AO",
    "lat": -14.91717,
    "long": 13.4925,
    "zone": "Africa/Luanda"
  },
  {
    "name": "Lobito",
    "country": "AO",
    "lat": -12.3644,
    "long": 13.53601,
    "zone": "Africa/Luanda"
  },
  {
    "name": "Cuito",
    "country": "AO",
    "lat": -12.38333,
    "long": 16.93333,
    "zone": "Africa/Luanda"
  },
  {
    "name": "Huambo",
    "country": "AO",
    "lat": -12.77611,
    "long": 15.73917,
    "zone": "Africa/Luanda"
  },
  {
    "name": "Benguela",
    "country": "AO",
    "lat": -12.57626,
    "long": 13.40547,
    "zone": "Africa/Luanda"
  },
  {
    "name": "Villa Lugano",
    "country": "AR",
    "lat": -34.67907,
    "long": -58.47263,
    "zone": "America/Argentina/Buenos_Aires"
  },
  {
    "name": "Tandil",
    "country": "AR",
    "lat": -37.32167,
    "long": -59.13316,
    "zone": "America/Argentina/Buenos_Aires"
  },
  {
    "name": "Resistencia",
    "country": "AR",
    "lat": -27.46056,
    "long": -58.98389,
    "zone": "America/Argentina/Cordoba"
  },
  {
    "name": "Quilmes",
    "country": "AR",
    "lat": -34.72418,
    "long": -58.25265,
    "zone": "America/Argentina/Buenos_Aires"
  },
  {
    "name": "Posadas",
    "country": "AR",
    "lat": -27.36708,
    "long": -55.89608,
    "zone": "America/Argentina/Cordoba"
  },
  {
    "name": "Morón",
    "country": "AR",
    "lat": -34.65344,
    "long": -58.61975,
    "zone": "America/Argentina/Buenos_Aires"
  },
  {
    "name": "Mar del Plata",
    "country": "AR",
    "lat": -38.00228,
    "long": -57.55754,
    "zone": "America/Argentina/Buenos_Aires"
  },
  {
    "name": "La Plata",
    "country": "AR",
    "lat": -34.92145,
    "long": -57.95453,
    "zone": "America/Argentina/Buenos_Aires"
  },
  {
    "name": "Formosa",
    "country": "AR",
    "lat": -26.17753,
    "long": -58.17814,
    "zone": "America/Argentina/Cordoba"
  },
  {
    "name": "Corrientes",
    "country": "AR",
    "lat": -27.4806,
    "long": -58.8341,
    "zone": "America/Argentina/Cordoba"
  },
  {
    "name": "Concordia",
    "country": "AR",
    "lat": -31.39296,
    "long": -58.02089,
    "zone": "America/Argentina/Cordoba"
  },
  {
    "name": "Buenos Aires",
    "country": "AR",
    "lat": -34.61315,
    "long": -58.37723,
    "zone": "America/Argentina/Buenos_Aires"
  },
  {
    "name": "Santiago del Estero",
    "country": "AR",
    "lat": -27.79511,
    "long": -64.26149,
    "zone": "America/Argentina/Cordoba"
  },
  {
    "name": "Santa Rosa",
    "country": "AR",
    "lat": -36.61667,
    "long": -64.28333,
    "zone": "America/Argentina/Salta"
  },
  {
    "name": "Santa Fe de la Vera Cruz",
    "country": "AR",
    "lat": -31.63333,
    "long": -60.7,
    "zone": "America/Argentina/Cordoba"
  },
  {
    "name": "San Salvador de Jujuy",
    "country": "AR",
    "lat": -24.19457,
    "long": -65.29712,
    "zone": "America/Argentina/Jujuy"
  },
  {
    "name": "San Rafael",
    "country": "AR",
    "lat": -34.61772,
    "long": -68.33007,
    "zone": "America/Argentina/Mendoza"
  },
  {
    "name": "San Nicolás de los Arroyos",
    "country": "AR",
    "lat": -33.33578,
    "long": -60.22523,
    "zone": "America/Argentina/Buenos_Aires"
  },
  {
    "name": "San Miguel de Tucumán",
    "country": "AR",
    "lat": -26.82414,
    "long": -65.2226,
    "zone": "America/Argentina/Tucuman"
  },
  {
    "name": "San Luis",
    "country": "AR",
    "lat": -33.29501,
    "long": -66.33563,
    "zone": "America/Argentina/San_Luis"
  },
  {
    "name": "San Juan",
    "country": "AR",
    "lat": -31.5375,
    "long": -68.53639,
    "zone": "America/Argentina/San_Juan"
  },
  {
    "name": "San Fernando del Valle de Catamarca",
    "country": "AR",
    "lat": -28.46957,
    "long": -65.78524,
    "zone": "America/Argentina/Catamarca"
  },
  {
    "name": "Salta",
    "country": "AR",
    "lat": -24.7859,
    "long": -65.41166,
    "zone": "America/Argentina/Salta"
  },
  {
    "name": "Rosario",
    "country": "AR",
    "lat": -32.94682,
    "long": -60.63932,
    "zone": "America/Argentina/Cordoba"
  },
  {
    "name": "Río Cuarto",
    "country": "AR",
    "lat": -33.13067,
    "long": -64.34992,
    "zone": "America/Argentina/Cordoba"
  },
  {
    "name": "Paraná",
    "country": "AR",
    "lat": -31.73197,
    "long": -60.5238,
    "zone": "America/Argentina/Cordoba"
  },
  {
    "name": "Neuquén",
    "country": "AR",
    "lat": -38.95161,
    "long": -68.0591,
    "zone": "America/Argentina/Salta"
  },
  {
    "name": "Mendoza",
    "country": "AR",
    "lat": -32.89084,
    "long": -68.82717,
    "zone": "America/Argentina/Mendoza"
  },
  {
    "name": "La Rioja",
    "country": "AR",
    "lat": -29.41105,
    "long": -66.85067,
    "zone": "America/Argentina/La_Rioja"
  },
  {
    "name": "Córdoba",
    "country": "AR",
    "lat": -31.4135,
    "long": -64.18105,
    "zone": "America/Argentina/Cordoba"
  },
  {
    "name": "Comodoro Rivadavia",
    "country": "AR",
    "lat": -45.86413,
    "long": -67.49656,
    "zone": "America/Argentina/Catamarca"
  },
  {
    "name": "Bahía Blanca",
    "country": "AR",
    "lat": -38.71959,
    "long": -62.27243,
    "zone": "America/Argentina/Buenos_Aires"
  },
  {
    "name": "Vienna",
    "country": "AT",
    "lat": 48.20849,
    "long": 16.37208,
    "zone": "Europe/Vienna"
  },
  {
    "name": "Salzburg",
    "country": "AT",
    "lat": 47.79941,
    "long": 13.04399,
    "zone": "Europe/Vienna"
  },
  {
    "name": "Linz",
    "country": "AT",
    "lat": 48.30639,
    "long": 14.28611,
    "zone": "Europe/Vienna"
  },
  {
    "name": "Innsbruck",
    "country": "AT",
    "lat": 47.26266,
    "long": 11.39454,
    "zone": "Europe/Vienna"
  },
  {
    "name": "Graz",
    "country": "AT",
    "lat": 47.06667,
    "long": 15.45,
    "zone": "Europe/Vienna"
  },
  {
    "name": "Rockingham",
    "country": "AU",
    "lat": -32.27682,
    "long": 115.72978,
    "zone": "Australia/Perth"
  },
  {
    "name": "Perth",
    "country": "AU",
    "lat": -31.95224,
    "long": 115.8614,
    "zone": "Australia/Perth"
  },
  {
    "name": "Darwin",
    "country": "AU",
    "lat": -12.46113,
    "long": 130.84185,
    "zone": "Australia/Darwin"
  },
  {
    "name": "Adelaide",
    "country": "AU",
    "lat": -34.92866,
    "long": 138.59863,
    "zone": "Australia/Adelaide"
  },
  {
    "name": "Townsville",
    "country": "AU",
    "lat": -19.26639,
    "long": 146.80569,
    "zone": "Australia/Brisbane"
  },
  {
    "name": "Toowoomba",
    "country": "AU",
    "lat": -27.56056,
    "long": 151.95386,
    "zone": "Australia/Brisbane"
  },
  {
    "name": "Sydney",
    "country": "AU",
    "lat": -33.86785,
    "long": 151.20732,
    "zone": "Australia/Sydney"
  },
  {
    "name": "Newcastle",
    "country": "AU",
    "lat": -32.92715,
    "long": 151.77647,
    "zone": "Australia/Sydney"
  },
  {
    "name": "Melbourne",
    "country": "AU",
    "lat": -37.814,
    "long": 144.96332,
    "zone": "Australia/Melbourne"
  },
  {
    "name": "Launceston",
    "country": "AU",
    "lat": -41.43876,
    "long": 147.13467,
    "zone": "Australia/Hobart"
  },
  {
    "name": "Hobart",
    "country": "AU",
    "lat": -42.87936,
    "long": 147.32941,
    "zone": "Australia/Hobart"
  },
  {
    "name": "Gold Coast",
    "country": "AU",
    "lat": -28.00029,
    "long": 153.43088,
    "zone": "Australia/Brisbane"
  },
  {
    "name": "Geelong",
    "country": "AU",
    "lat": -38.14711,
    "long": 144.36069,
    "zone": "Australia/Melbourne"
  },
  {
    "name": "Wollongong",
    "country": "AU",
    "lat": -34.424,
    "long": 150.89345,
    "zone": "Australia/Sydney"
  },
  {
    "name": "Canberra",
    "country": "AU",
    "lat": -35.28346,
    "long": 149.12807,
    "zone": "Australia/Sydney"
  },
  {
    "name": "Cairns",
    "country": "AU",
    "lat": -16.92304,
    "long": 145.76625,
    "zone": "Australia/Brisbane"
  },
  {
    "name": "Brisbane",
    "country": "AU",
    "lat": -27.46794,
    "long": 153.02809,
    "zone": "Australia/Brisbane"
  },
  {
    "name": "Bendigo",
    "country": "AU",
    "lat": -36.75818,
    "long": 144.28024,
    "zone": "Australia/Melbourne"
  },
  {
    "name": "Logan City",
    "country": "AU",
    "lat": -27.63917,
    "long": 153.10944,
    "zone": "Australia/Brisbane"
  },
  {
    "name": "Lankaran",
    "country": "AZ",
    "lat": 38.75428,
    "long": 48.85062,
    "zone": "Asia/Baku"
  },
  {
    "name": "Sumqayıt",
    "country": "AZ",
    "lat": 40.58972,
    "long": 49.66861,
    "zone": "Asia/Baku"
  },
  {
    "name": "Ganja",
    "country": "AZ",
    "lat": 40.68278,
    "long": 46.36056,
    "zone": "Asia/Baku"
  },
  {
    "name": "Baku",
    "country": "AZ",
    "lat": 40.37767,
    "long": 49.89201,
    "zone": "Asia/Baku"
  },
  {
    "name": "Zenica",
    "country": "BA",
    "lat": 44.20169,
    "long": 17.90397,
    "zone": "Europe/Sarajevo"
  },
  {
    "name": "Tuzla",
    "country": "BA",
    "lat": 44.53842,
    "long": 18.66709,
    "zone": "Europe/Sarajevo"
  },
  {
    "name": "Sarajevo",
    "country": "BA",
    "lat": 43.84864,
    "long": 18.35644,
    "zone": "Europe/Sarajevo"
  },
  {
    "name": "Mostar",
    "country": "BA",
    "lat": 43.34333,
    "long": 17.80806,
    "zone": "Europe/Sarajevo"
  },
  {
    "name": "Banja Luka",
    "country": "BA",
    "lat": 44.77583,
    "long": 17.18556,
    "zone": "Europe/Sarajevo"
  },
  {
    "name": "Tungi",
    "country": "BD",
    "lat": 23.89154,
    "long": 90.40232,
    "zone": "Asia/Dhaka"
  },
  {
    "name": "Sylhet",
    "country": "BD",
    "lat": 24.89904,
    "long": 91.87198,
    "zone": "Asia/Dhaka"
  },
  {
    "name": "Jamālpur",
    "country": "BD",
    "lat": 24.91965,
    "long": 89.94812,
    "zone": "Asia/Dhaka"
  },
  {
    "name": "Sātkhira",
    "country": "BD",
    "lat": 22.70817,
    "long": 89.07185,
    "zone": "Asia/Dhaka"
  },
  {
    "name": "Sirājganj",
    "country": "BD",
    "lat": 24.45771,
    "long": 89.70802,
    "zone": "Asia/Dhaka"
  },
  {
    "name": "Narsingdi",
    "country": "BD",
    "lat": 23.92298,
    "long": 90.71768,
    "zone": "Asia/Dhaka"
  },
  {
    "name": "Shāhzādpur",
    "country": "BD",
    "lat": 24.17687,
    "long": 89.5988,
    "zone": "Asia/Dhaka"
  },
  {
    "name": "Rājshāhi",
    "country": "BD",
    "lat": 24.374,
    "long": 88.60114,
    "zone": "Asia/Dhaka"
  },
  {
    "name": "Nārāyanganj",
    "country": "BD",
    "lat": 23.61352,
    "long": 90.50298,
    "zone": "Asia/Dhaka"
  },
  {
    "name": "Nāgarpur",
    "country": "BD",
    "lat": 24.05783,
    "long": 89.87696,
    "zone": "Asia/Dhaka"
  },
  {
    "name": "Mymensingh",
    "country": "BD",
    "lat": 24.75636,
    "long": 90.40646,
    "zone": "Asia/Dhaka"
  },
  {
    "name": "Comilla",
    "country": "BD",
    "lat": 23.46186,
    "long": 91.18503,
    "zone": "Asia/Dhaka"
  },
  {
    "name": "Rangpur",
    "country": "BD",
    "lat": 25.74664,
    "long": 89.25166,
    "zone": "Asia/Dhaka"
  },
  {
    "name": "Kushtia",
    "country": "BD",
    "lat": 23.9028,
    "long": 89.11943,
    "zone": "Asia/Dhaka"
  },
  {
    "name": "Dhaka",
    "country": "BD",
    "lat": 23.7104,
    "long": 90.40744,
    "zone": "Asia/Dhaka"
  },
  {
    "name": "Bhairab Bāzār",
    "country": "BD",
    "lat": 24.0524,
    "long": 90.9764,
    "zone": "Asia/Dhaka"
  },
  {
    "name": "Pār Naogaon",
    "country": "BD",
    "lat": 24.80418,
    "long": 88.94875,
    "zone": "Asia/Dhaka"
  },
  {
    "name": "Farīdpur",
    "country": "BD",
    "lat": 23.60612,
    "long": 89.84064,
    "zone": "Asia/Dhaka"
  },
  {
    "name": "Dinājpur",
    "country": "BD",
    "lat": 25.62745,
    "long": 88.63779,
    "zone": "Asia/Dhaka"
  },
  {
    "name": "Chittagong",
    "country": "BD",
    "lat": 22.3384,
    "long": 91.83168,
    "zone": "Asia/Dhaka"
  },
  {
    "name": "Cox’s Bāzār",
    "country": "BD",
    "lat": 21.45388,
    "long": 91.96765,
    "zone": "Asia/Dhaka"
  },
  {
    "name": "Khulna",
    "country": "BD",
    "lat": 22.80979,
    "long": 89.56439,
    "zone": "Asia/Dhaka"
  },
  {
    "name": "Barisāl",
    "country": "BD",
    "lat": 22.70497,
    "long": 90.37013,
    "zone": "Asia/Dhaka"
  },
  {
    "name": "Jessore",
    "country": "BD",
    "lat": 23.16971,
    "long": 89.21371,
    "zone": "Asia/Dhaka"
  },
  {
    "name": "Pābna",
    "country": "BD",
    "lat": 24.00644,
    "long": 89.2372,
    "zone": "Asia/Dhaka"
  },
  {
    "name": "Tāngāil",
    "country": "BD",
    "lat": 24.24984,
    "long": 89.91655,
    "zone": "Asia/Dhaka"
  },
  {
    "name": "Bogra",
    "country": "BD",
    "lat": 24.85098,
    "long": 89.37108,
    "zone": "Asia/Dhaka"
  },
  {
    "name": "Nawābganj",
    "country": "BD",
    "lat": 24.59025,
    "long": 88.27444,
    "zone": "Asia/Dhaka"
  },
  {
    "name": "Sherpur",
    "country": "BD",
    "lat": 25.01881,
    "long": 90.01751,
    "zone": "Asia/Dhaka"
  },
  {
    "name": "Saidpur",
    "country": "BD",
    "lat": 25.77769,
    "long": 88.89169,
    "zone": "Asia/Dhaka"
  },
  {
    "name": "Namur",
    "country": "BE",
    "lat": 50.4669,
    "long": 4.86746,
    "zone": "Europe/Brussels"
  },
  {
    "name": "Liège",
    "country": "BE",
    "lat": 50.63373,
    "long": 5.56749,
    "zone": "Europe/Brussels"
  },
  {
    "name": "Gent",
    "country": "BE",
    "lat": 51.05,
    "long": 3.71667,
    "zone": "Europe/Brussels"
  },
  {
    "name": "Charleroi",
    "country": "BE",
    "lat": 50.41136,
    "long": 4.44448,
    "zone": "Europe/Brussels"
  },
  {
    "name": "Brussels",
    "country": "BE",
    "lat": 50.85045,
    "long": 4.34878,
    "zone": "Europe/Brussels"
  },
  {
    "name": "Brugge",
    "country": "BE",
    "lat": 51.20892,
    "long": 3.22424,
    "zone": "Europe/Brussels"
  },
  {
    "name": "Antwerpen",
    "country": "BE",
    "lat": 51.21989,
    "long": 4.40346,
    "zone": "Europe/Brussels"
  },
  {
    "name": "Ouagadougou",
    "country": "BF",
    "lat": 12.36566,
    "long": -1.53388,
    "zone": "Africa/Ouagadougou"
  },
  {
    "name": "Bobo-Dioulasso",
    "country": "BF",
    "lat": 11.17715,
    "long": -4.2979,
    "zone": "Africa/Ouagadougou"
  },
  {
    "name": "Varna",
    "country": "BG",
    "lat": 43.21667,
    "long": 27.91667,
    "zone": "Europe/Sofia"
  },
  {
    "name": "Stara Zagora",
    "country": "BG",
    "lat": 42.43278,
    "long": 25.64194,
    "zone": "Europe/Sofia"
  },
  {
    "name": "Sofia",
    "country": "BG",
    "lat": 42.69751,
    "long": 23.32415,
    "zone": "Europe/Sofia"
  },
  {
    "name": "Ruse",
    "country": "BG",
    "lat": 43.85639,
    "long": 25.97083,
    "zone": "Europe/Sofia"
  },
  {
    "name": "Plovdiv",
    "country": "BG",
    "lat": 42.15,
    "long": 24.75,
    "zone": "Europe/Sofia"
  },
  {
    "name": "Pleven",
    "country": "BG",
    "lat": 43.41667,
    "long": 24.61667,
    "zone": "Europe/Sofia"
  },
  {
    "name": "Burgas",
    "country": "BG",
    "lat": 42.50606,
    "long": 27.46781,
    "zone": "Europe/Sofia"
  },
  {
    "name": "Manama",
    "country": "BH",
    "lat": 26.21536,
    "long": 50.5832,
    "zone": "Asia/Bahrain"
  },
  {
    "name": "Bujumbura",
    "country": "BI",
    "lat": -3.3822,
    "long": 29.3644,
    "zone": "Africa/Bujumbura"
  },
  {
    "name": "Porto-Novo",
    "country": "BJ",
    "lat": 6.49646,
    "long": 2.60359,
    "zone": "Africa/Porto-Novo"
  },
  {
    "name": "Parakou",
    "country": "BJ",
    "lat": 9.33716,
    "long": 2.63031,
    "zone": "Africa/Porto-Novo"
  },
  {
    "name": "Kandi",
    "country": "BJ",
    "lat": 11.13417,
    "long": 2.93861,
    "zone": "Africa/Porto-Novo"
  },
  {
    "name": "Djougou",
    "country": "BJ",
    "lat": 9.70853,
    "long": 1.66598,
    "zone": "Africa/Porto-Novo"
  },
  {
    "name": "Cotonou",
    "country": "BJ",
    "lat": 6.36536,
    "long": 2.41833,
    "zone": "Africa/Porto-Novo"
  },
  {
    "name": "Bohicon",
    "country": "BJ",
    "lat": 7.17826,
    "long": 2.0667,
    "zone": "Africa/Porto-Novo"
  },
  {
    "name": "Abomey-Calavi",
    "country": "BJ",
    "lat": 6.44852,
    "long": 2.35566,
    "zone": "Africa/Porto-Novo"
  },
  {
    "name": "Tarija",
    "country": "BO",
    "lat": -21.53549,
    "long": -64.72956,
    "zone": "America/La_Paz"
  },
  {
    "name": "Sucre",
    "country": "BO",
    "lat": -19.03332,
    "long": -65.26274,
    "zone": "America/La_Paz"
  },
  {
    "name": "Santa Cruz de la Sierra",
    "country": "BO",
    "lat": -17.78629,
    "long": -63.18117,
    "zone": "America/La_Paz"
  },
  {
    "name": "Potosí",
    "country": "BO",
    "lat": -19.58361,
    "long": -65.75306,
    "zone": "America/La_Paz"
  },
  {
    "name": "Oruro",
    "country": "BO",
    "lat": -17.98333,
    "long": -67.15,
    "zone": "America/La_Paz"
  },
  {
    "name": "La Paz",
    "country": "BO",
    "lat": -16.5,
    "long": -68.15,
    "zone": "America/La_Paz"
  },
  {
    "name": "Cochabamba",
    "country": "BO",
    "lat": -17.3895,
    "long": -66.1568,
    "zone": "America/La_Paz"
  },
  {
    "name": "Vitória de Santo Antão",
    "country": "BR",
    "lat": -8.11806,
    "long": -35.29139,
    "zone": "America/Recife"
  },
  {
    "name": "Timon",
    "country": "BR",
    "lat": -5.09417,
    "long": -42.83667,
    "zone": "America/Fortaleza"
  },
  {
    "name": "Teresina",
    "country": "BR",
    "lat": -5.08917,
    "long": -42.80194,
    "zone": "America/Fortaleza"
  },
  {
    "name": "Sobral",
    "country": "BR",
    "lat": -3.68611,
    "long": -40.34972,
    "zone": "America/Fortaleza"
  },
  {
    "name": "São Luís",
    "country": "BR",
    "lat": -2.52972,
    "long": -44.30278,
    "zone": "America/Fortaleza"
  },
  {
    "name": "Santa Rita",
    "country": "BR",
    "lat": -7.11389,
    "long": -34.97806,
    "zone": "America/Fortaleza"
  },
  {
    "name": "Santarém",
    "country": "BR",
    "lat": -2.44306,
    "long": -54.70833,
    "zone": "America/Santarem"
  },
  {
    "name": "Recife",
    "country": "BR",
    "lat": -8.05389,
    "long": -34.88111,
    "zone": "America/Recife"
  },
  {
    "name": "Petrolina",
    "country": "BR",
    "lat": -9.39861,
    "long": -40.50083,
    "zone": "America/Recife"
  },
  {
    "name": "Paulista",
    "country": "BR",
    "lat": -7.94083,
    "long": -34.87306,
    "zone": "America/Recife"
  },
  {
    "name": "Parnamirim",
    "country": "BR",
    "lat": -5.91556,
    "long": -35.26278,
    "zone": "America/Fortaleza"
  },
  {
    "name": "Parnaíba",
    "country": "BR",
    "lat": -2.90472,
    "long": -41.77667,
    "zone": "America/Fortaleza"
  },
  {
    "name": "Olinda",
    "country": "BR",
    "lat": -8.00889,
    "long": -34.85528,
    "zone": "America/Recife"
  },
  {
    "name": "Natal",
    "country": "BR",
    "lat": -5.795,
    "long": -35.20944,
    "zone": "America/Fortaleza"
  },
  {
    "name": "Mossoró",
    "country": "BR",
    "lat": -5.1875,
    "long": -37.34417,
    "zone": "America/Fortaleza"
  },
  {
    "name": "Maracanaú",
    "country": "BR",
    "lat": -3.87667,
    "long": -38.62556,
    "zone": "America/Fortaleza"
  },
  {
    "name": "Marabá",
    "country": "BR",
    "lat": -5.36861,
    "long": -49.11778,
    "zone": "America/Belem"
  },
  {
    "name": "Maceió",
    "country": "BR",
    "lat": -9.66583,
    "long": -35.73528,
    "zone": "America/Maceio"
  },
  {
    "name": "Macapá",
    "country": "BR",
    "lat": 0.03889,
    "long": -51.06639,
    "zone": "America/Belem"
  },
  {
    "name": "Juazeiro do Norte",
    "country": "BR",
    "lat": -7.21306,
    "long": -39.31528,
    "zone": "America/Fortaleza"
  },
  {
    "name": "João Pessoa",
    "country": "BR",
    "lat": -7.115,
    "long": -34.86306,
    "zone": "America/Fortaleza"
  },
  {
    "name": "Jaboatão",
    "country": "BR",
    "lat": -8.18028,
    "long": -35.00139,
    "zone": "America/Recife"
  },
  {
    "name": "Imperatriz",
    "country": "BR",
    "lat": -5.52639,
    "long": -47.49167,
    "zone": "America/Fortaleza"
  },
  {
    "name": "Garanhuns",
    "country": "BR",
    "lat": -8.88202,
    "long": -36.50216,
    "zone": "America/Recife"
  },
  {
    "name": "Fortaleza",
    "country": "BR",
    "lat": -3.71722,
    "long": -38.54306,
    "zone": "America/Fortaleza"
  },
  {
    "name": "Caxias",
    "country": "BR",
    "lat": -4.85889,
    "long": -43.35611,
    "zone": "America/Fortaleza"
  },
  {
    "name": "Caucaia",
    "country": "BR",
    "lat": -3.73611,
    "long": -38.65306,
    "zone": "America/Fortaleza"
  },
  {
    "name": "Castanhal",
    "country": "BR",
    "lat": -1.29389,
    "long": -47.92639,
    "zone": "America/Belem"
  },
  {
    "name": "Caruaru",
    "country": "BR",
    "lat": -8.28333,
    "long": -35.97611,
    "zone": "America/Recife"
  },
  {
    "name": "Campina Grande",
    "country": "BR",
    "lat": -7.23056,
    "long": -35.88111,
    "zone": "America/Fortaleza"
  },
  {
    "name": "Cabo",
    "country": "BR",
    "lat": -8.28333,
    "long": -35.03333,
    "zone": "America/Recife"
  },
  {
    "name": "Belém",
    "country": "BR",
    "lat": -1.45583,
    "long": -48.50444,
    "zone": "America/Belem"
  },
  {
    "name": "Arapiraca",
    "country": "BR",
    "lat": -9.7525,
    "long": -36.66111,
    "zone": "America/Maceio"
  },
  {
    "name": "Araguaína",
    "country": "BR",
    "lat": -7.19111,
    "long": -48.20722,
    "zone": "America/Araguaina"
  },
  {
    "name": "Ananindeua",
    "country": "BR",
    "lat": -1.36556,
    "long": -48.37222,
    "zone": "America/Belem"
  },
  {
    "name": "Volta Redonda",
    "country": "BR",
    "lat": -22.52306,
    "long": -44.10417,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Vitória da Conquista",
    "country": "BR",
    "lat": -14.86611,
    "long": -40.83944,
    "zone": "America/Bahia"
  },
  {
    "name": "Vitória",
    "country": "BR",
    "lat": -20.31944,
    "long": -40.33778,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Vila Velha",
    "country": "BR",
    "lat": -20.32972,
    "long": -40.2925,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Viamão",
    "country": "BR",
    "lat": -30.08111,
    "long": -51.02333,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Várzea Paulista",
    "country": "BR",
    "lat": -23.21139,
    "long": -46.82833,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Várzea Grande",
    "country": "BR",
    "lat": -15.64667,
    "long": -56.1325,
    "zone": "America/Cuiaba"
  },
  {
    "name": "Varginha",
    "country": "BR",
    "lat": -21.55139,
    "long": -45.43028,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Uruguaiana",
    "country": "BR",
    "lat": -29.75472,
    "long": -57.08833,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Uberlândia",
    "country": "BR",
    "lat": -18.91861,
    "long": -48.27722,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Uberaba",
    "country": "BR",
    "lat": -19.74833,
    "long": -47.93194,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Toledo",
    "country": "BR",
    "lat": -24.71361,
    "long": -53.74306,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Teresópolis",
    "country": "BR",
    "lat": -22.4167,
    "long": -42.97822,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Teófilo Otoni",
    "country": "BR",
    "lat": -17.8575,
    "long": -41.50528,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Taubaté",
    "country": "BR",
    "lat": -23.02639,
    "long": -45.55528,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Taboão da Serra",
    "country": "BR",
    "lat": -23.62611,
    "long": -46.79167,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Suzano",
    "country": "BR",
    "lat": -23.5425,
    "long": -46.31083,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Sumaré",
    "country": "BR",
    "lat": -22.82194,
    "long": -47.26694,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Sorocaba",
    "country": "BR",
    "lat": -23.50167,
    "long": -47.45806,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Sete Lagoas",
    "country": "BR",
    "lat": -19.46583,
    "long": -44.24667,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Serra",
    "country": "BR",
    "lat": -20.12861,
    "long": -40.30778,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Sapucaia",
    "country": "BR",
    "lat": -29.83333,
    "long": -51.15,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "São Vicente",
    "country": "BR",
    "lat": -23.96306,
    "long": -46.39194,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "São Paulo",
    "country": "BR",
    "lat": -23.5475,
    "long": -46.63611,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "São Leopoldo",
    "country": "BR",
    "lat": -29.76028,
    "long": -51.14722,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "São José dos Pinhais",
    "country": "BR",
    "lat": -25.5302,
    "long": -49.20836,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "São José dos Campos",
    "country": "BR",
    "lat": -23.17944,
    "long": -45.88694,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "São José do Rio Preto",
    "country": "BR",
    "lat": -20.81972,
    "long": -49.37944,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "São José",
    "country": "BR",
    "lat": -28.21171,
    "long": -49.1632,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "São João de Meriti",
    "country": "BR",
    "lat": -22.80389,
    "long": -43.37222,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "São Carlos",
    "country": "BR",
    "lat": -22.0175,
    "long": -47.89083,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "São Caetano do Sul",
    "country": "BR",
    "lat": -23.62306,
    "long": -46.55111,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "São Bernardo do Campo",
    "country": "BR",
    "lat": -23.69389,
    "long": -46.565,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Santos",
    "country": "BR",
    "lat": -23.96083,
    "long": -46.33361,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Santo André",
    "country": "BR",
    "lat": -23.66389,
    "long": -46.53833,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Santa Maria",
    "country": "BR",
    "lat": -29.68417,
    "long": -53.80694,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Santa Luzia",
    "country": "BR",
    "lat": -19.76972,
    "long": -43.85139,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Santa Cruz do Sul",
    "country": "BR",
    "lat": -29.7175,
    "long": -52.42583,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Santa Bárbara d'Oeste",
    "country": "BR",
    "lat": -22.75361,
    "long": -47.41361,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Salvador",
    "country": "BR",
    "lat": -12.97111,
    "long": -38.51083,
    "zone": "America/Bahia"
  },
  {
    "name": "Rondonópolis",
    "country": "BR",
    "lat": -16.47083,
    "long": -54.63556,
    "zone": "America/Cuiaba"
  },
  {
    "name": "Rio Grande",
    "country": "BR",
    "lat": -32.035,
    "long": -52.09861,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Rio de Janeiro",
    "country": "BR",
    "lat": -22.90278,
    "long": -43.2075,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Rio Claro",
    "country": "BR",
    "lat": -22.41139,
    "long": -47.56139,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Ribeirão Preto",
    "country": "BR",
    "lat": -21.1775,
    "long": -47.81028,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Ribeirão Pires",
    "country": "BR",
    "lat": -23.71056,
    "long": -46.41333,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Ribeirão das Neves",
    "country": "BR",
    "lat": -19.76694,
    "long": -44.08667,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Resende",
    "country": "BR",
    "lat": -22.46889,
    "long": -44.44667,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Queimados",
    "country": "BR",
    "lat": -22.71611,
    "long": -43.55528,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Presidente Prudente",
    "country": "BR",
    "lat": -22.12556,
    "long": -51.38889,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Praia Grande",
    "country": "BR",
    "lat": -24.00583,
    "long": -46.40278,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Pouso Alegre",
    "country": "BR",
    "lat": -22.23,
    "long": -45.93639,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Porto Seguro",
    "country": "BR",
    "lat": -16.44972,
    "long": -39.06472,
    "zone": "America/Bahia"
  },
  {
    "name": "Porto Alegre",
    "country": "BR",
    "lat": -30.03306,
    "long": -51.23,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Ponta Grossa",
    "country": "BR",
    "lat": -25.095,
    "long": -50.16194,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Poços de Caldas",
    "country": "BR",
    "lat": -21.78778,
    "long": -46.56139,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Poá",
    "country": "BR",
    "lat": -23.52806,
    "long": -46.34472,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Piracicaba",
    "country": "BR",
    "lat": -22.72528,
    "long": -47.64917,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Pindamonhangaba",
    "country": "BR",
    "lat": -22.92389,
    "long": -45.46167,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Petrópolis",
    "country": "BR",
    "lat": -22.505,
    "long": -43.17861,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Pelotas",
    "country": "BR",
    "lat": -31.77194,
    "long": -52.3425,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Patos de Minas",
    "country": "BR",
    "lat": -18.57889,
    "long": -46.51806,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Passo Fundo",
    "country": "BR",
    "lat": -28.26278,
    "long": -52.40667,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Paranaguá",
    "country": "BR",
    "lat": -25.51626,
    "long": -48.52537,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Palhoça",
    "country": "BR",
    "lat": -27.64528,
    "long": -48.66778,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Osasco",
    "country": "BR",
    "lat": -23.5325,
    "long": -46.79167,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Novo Hamburgo",
    "country": "BR",
    "lat": -29.67833,
    "long": -51.13056,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Nova Iguaçu",
    "country": "BR",
    "lat": -22.75917,
    "long": -43.45111,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Nova Friburgo",
    "country": "BR",
    "lat": -22.28194,
    "long": -42.53111,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Nossa Senhora do Socorro",
    "country": "BR",
    "lat": -10.855,
    "long": -37.12611,
    "zone": "America/Maceio"
  },
  {
    "name": "Niterói",
    "country": "BR",
    "lat": -22.88333,
    "long": -43.10361,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Nilópolis",
    "country": "BR",
    "lat": -22.8075,
    "long": -43.41389,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Montes Claros",
    "country": "BR",
    "lat": -16.735,
    "long": -43.86167,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Mogi-Gaucu",
    "country": "BR",
    "lat": -22.3677,
    "long": -46.94552,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Mogi das Cruzes",
    "country": "BR",
    "lat": -23.52278,
    "long": -46.18833,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Mauá",
    "country": "BR",
    "lat": -23.66778,
    "long": -46.46139,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Maringá",
    "country": "BR",
    "lat": -23.42528,
    "long": -51.93861,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Marília",
    "country": "BR",
    "lat": -22.21389,
    "long": -49.94583,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Macaé",
    "country": "BR",
    "lat": -22.37083,
    "long": -41.78694,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Luziânia",
    "country": "BR",
    "lat": -16.2525,
    "long": -47.95028,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Londrina",
    "country": "BR",
    "lat": -23.31028,
    "long": -51.16278,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Linhares",
    "country": "BR",
    "lat": -19.39111,
    "long": -40.07222,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Limeira",
    "country": "BR",
    "lat": -22.56472,
    "long": -47.40167,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Lages",
    "country": "BR",
    "lat": -27.81611,
    "long": -50.32611,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Jundiaí",
    "country": "BR",
    "lat": -23.18639,
    "long": -46.88417,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Juiz de Fora",
    "country": "BR",
    "lat": -21.76417,
    "long": -43.35028,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Joinville",
    "country": "BR",
    "lat": -26.30444,
    "long": -48.84556,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Jequié",
    "country": "BR",
    "lat": -13.85875,
    "long": -40.08512,
    "zone": "America/Bahia"
  },
  {
    "name": "Jaú",
    "country": "BR",
    "lat": -22.29639,
    "long": -48.55778,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Jaraguá do Sul",
    "country": "BR",
    "lat": -26.48611,
    "long": -49.06667,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Jandira",
    "country": "BR",
    "lat": -23.5275,
    "long": -46.9025,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Jacareí",
    "country": "BR",
    "lat": -23.30528,
    "long": -45.96583,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Itu",
    "country": "BR",
    "lat": -23.26417,
    "long": -47.29917,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Itaquaquecetuba",
    "country": "BR",
    "lat": -23.48611,
    "long": -46.34833,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Itapevi",
    "country": "BR",
    "lat": -23.54889,
    "long": -46.93417,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Itapetininga",
    "country": "BR",
    "lat": -23.59167,
    "long": -48.05306,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Itapecerica da Serra",
    "country": "BR",
    "lat": -23.71694,
    "long": -46.84917,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Itajaí",
    "country": "BR",
    "lat": -26.90778,
    "long": -48.66194,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Itaguaí",
    "country": "BR",
    "lat": -22.85222,
    "long": -43.77528,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Itabuna",
    "country": "BR",
    "lat": -14.78556,
    "long": -39.28028,
    "zone": "America/Bahia"
  },
  {
    "name": "Itaboraí",
    "country": "BR",
    "lat": -22.74444,
    "long": -42.85944,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Ipatinga",
    "country": "BR",
    "lat": -19.46833,
    "long": -42.53667,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Indaiatuba",
    "country": "BR",
    "lat": -23.08842,
    "long": -47.2119,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Ilhéus",
    "country": "BR",
    "lat": -14.79364,
    "long": -39.03949,
    "zone": "America/Bahia"
  },
  {
    "name": "Ibirité",
    "country": "BR",
    "lat": -20.02194,
    "long": -44.05889,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Hortolândia",
    "country": "BR",
    "lat": -22.85833,
    "long": -47.22,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Guarulhos",
    "country": "BR",
    "lat": -23.46278,
    "long": -46.53333,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Guarujá",
    "country": "BR",
    "lat": -23.99306,
    "long": -46.25639,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Guaratinguetá",
    "country": "BR",
    "lat": -22.81639,
    "long": -45.1925,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Guarapuava",
    "country": "BR",
    "lat": -25.39048,
    "long": -51.46541,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Guarapari",
    "country": "BR",
    "lat": -20.65367,
    "long": -40.50204,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Gravataí",
    "country": "BR",
    "lat": -29.94218,
    "long": -50.99278,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Governador Valadares",
    "country": "BR",
    "lat": -18.85111,
    "long": -41.94944,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Goiânia",
    "country": "BR",
    "lat": -16.67861,
    "long": -49.25389,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Franco da Rocha",
    "country": "BR",
    "lat": -23.32167,
    "long": -46.72694,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Francisco Morato",
    "country": "BR",
    "lat": -23.28167,
    "long": -46.74528,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Franca",
    "country": "BR",
    "lat": -20.53861,
    "long": -47.40083,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Foz do Iguaçu",
    "country": "BR",
    "lat": -25.54778,
    "long": -54.58806,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Florianópolis",
    "country": "BR",
    "lat": -27.59667,
    "long": -48.54917,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Ferraz de Vasconcelos",
    "country": "BR",
    "lat": -23.54083,
    "long": -46.36861,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Feira de Santana",
    "country": "BR",
    "lat": -12.26667,
    "long": -38.96667,
    "zone": "America/Bahia"
  },
  {
    "name": "Esmeraldas",
    "country": "BR",
    "lat": -19.7625,
    "long": -44.31389,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Embu",
    "country": "BR",
    "lat": -23.64889,
    "long": -46.85222,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Duque de Caxias",
    "country": "BR",
    "lat": -22.78556,
    "long": -43.31167,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Dourados",
    "country": "BR",
    "lat": -22.22111,
    "long": -54.80556,
    "zone": "America/Campo_Grande"
  },
  {
    "name": "Divinópolis",
    "country": "BR",
    "lat": -20.13889,
    "long": -44.88389,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Diadema",
    "country": "BR",
    "lat": -23.68611,
    "long": -46.62278,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Curitiba",
    "country": "BR",
    "lat": -25.42778,
    "long": -49.27306,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Cuiabá",
    "country": "BR",
    "lat": -15.59611,
    "long": -56.09667,
    "zone": "America/Cuiaba"
  },
  {
    "name": "Cubatão",
    "country": "BR",
    "lat": -23.895,
    "long": -46.42528,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Criciúma",
    "country": "BR",
    "lat": -28.6775,
    "long": -49.36972,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Cotia",
    "country": "BR",
    "lat": -23.60389,
    "long": -46.91917,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Coronel Fabriciano",
    "country": "BR",
    "lat": -19.51861,
    "long": -42.62889,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Contagem",
    "country": "BR",
    "lat": -19.93167,
    "long": -44.05361,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Conselheiro Lafaiete",
    "country": "BR",
    "lat": -20.66028,
    "long": -43.78611,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Colombo",
    "country": "BR",
    "lat": -25.29167,
    "long": -49.22417,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Colatina",
    "country": "BR",
    "lat": -19.53944,
    "long": -40.63056,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Chapecó",
    "country": "BR",
    "lat": -27.09639,
    "long": -52.61833,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Caxias do Sul",
    "country": "BR",
    "lat": -29.16806,
    "long": -51.17944,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Catanduva",
    "country": "BR",
    "lat": -21.13778,
    "long": -48.97278,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Cascavel",
    "country": "BR",
    "lat": -24.95583,
    "long": -53.45528,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Carapicuíba",
    "country": "BR",
    "lat": -23.52272,
    "long": -46.835,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Canoas",
    "country": "BR",
    "lat": -29.91778,
    "long": -51.18361,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Campos",
    "country": "BR",
    "lat": -21.75227,
    "long": -41.33044,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Campo Grande",
    "country": "BR",
    "lat": -20.44278,
    "long": -54.64639,
    "zone": "America/Campo_Grande"
  },
  {
    "name": "Campinas",
    "country": "BR",
    "lat": -22.90556,
    "long": -47.06083,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Camaçari",
    "country": "BR",
    "lat": -12.6975,
    "long": -38.32417,
    "zone": "America/Bahia"
  },
  {
    "name": "Cachoeiro de Itapemirim",
    "country": "BR",
    "lat": -20.84889,
    "long": -41.11278,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Cachoeirinha",
    "country": "BR",
    "lat": -29.95111,
    "long": -51.09389,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Cabo Frio",
    "country": "BR",
    "lat": -22.88717,
    "long": -42.02622,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Brasília",
    "country": "BR",
    "lat": -15.77972,
    "long": -47.92972,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Bragança Paulista",
    "country": "BR",
    "lat": -22.95194,
    "long": -46.54194,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Botucatu",
    "country": "BR",
    "lat": -22.88583,
    "long": -48.445,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Blumenau",
    "country": "BR",
    "lat": -26.91944,
    "long": -49.06611,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Birigui",
    "country": "BR",
    "lat": -21.28861,
    "long": -50.34,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Betim",
    "country": "BR",
    "lat": -19.96778,
    "long": -44.19833,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Belo Horizonte",
    "country": "BR",
    "lat": -19.92083,
    "long": -43.93778,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Belford Roxo",
    "country": "BR",
    "lat": -22.76417,
    "long": -43.39944,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Bauru",
    "country": "BR",
    "lat": -22.31472,
    "long": -49.06056,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Barueri",
    "country": "BR",
    "lat": -23.51056,
    "long": -46.87611,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Barretos",
    "country": "BR",
    "lat": -20.55722,
    "long": -48.56778,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Barreiras",
    "country": "BR",
    "lat": -12.15278,
    "long": -44.99,
    "zone": "America/Bahia"
  },
  {
    "name": "Barra Mansa",
    "country": "BR",
    "lat": -22.54417,
    "long": -44.17139,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Barbacena",
    "country": "BR",
    "lat": -21.22583,
    "long": -43.77361,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Atibaia",
    "country": "BR",
    "lat": -23.11694,
    "long": -46.55028,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Assis",
    "country": "BR",
    "lat": -22.66167,
    "long": -50.41222,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Araucária",
    "country": "BR",
    "lat": -25.59306,
    "long": -49.41028,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Araruama",
    "country": "BR",
    "lat": -22.87278,
    "long": -42.34306,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Araras",
    "country": "BR",
    "lat": -22.35694,
    "long": -47.38417,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Araraquara",
    "country": "BR",
    "lat": -21.79444,
    "long": -48.17556,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Araçatuba",
    "country": "BR",
    "lat": -21.20889,
    "long": -50.43278,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Aracaju",
    "country": "BR",
    "lat": -10.91111,
    "long": -37.07167,
    "zone": "America/Maceio"
  },
  {
    "name": "Apucarana",
    "country": "BR",
    "lat": -23.55083,
    "long": -51.46083,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Angra dos Reis",
    "country": "BR",
    "lat": -23.00667,
    "long": -44.31806,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Anápolis",
    "country": "BR",
    "lat": -16.32667,
    "long": -48.95278,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Americana",
    "country": "BR",
    "lat": -22.73917,
    "long": -47.33139,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Alagoinhas",
    "country": "BR",
    "lat": -12.13556,
    "long": -38.41917,
    "zone": "America/Bahia"
  },
  {
    "name": "Guaíba",
    "country": "BR",
    "lat": -30.11389,
    "long": -51.325,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Palmas",
    "country": "BR",
    "lat": -10.16745,
    "long": -48.32766,
    "zone": "America/Araguaina"
  },
  {
    "name": "Rio Branco",
    "country": "BR",
    "lat": -9.97472,
    "long": -67.81,
    "zone": "America/Rio_Branco"
  },
  {
    "name": "Porto Velho",
    "country": "BR",
    "lat": -8.76194,
    "long": -63.90389,
    "zone": "America/Porto_Velho"
  },
  {
    "name": "Manaus",
    "country": "BR",
    "lat": -3.10194,
    "long": -60.025,
    "zone": "America/Manaus"
  },
  {
    "name": "Boa Vista",
    "country": "BR",
    "lat": 2.81972,
    "long": -60.67333,
    "zone": "America/Boa_Vista"
  },
  {
    "name": "Ji Paraná",
    "country": "BR",
    "lat": -10.88528,
    "long": -61.95167,
    "zone": "America/Porto_Velho"
  },
  {
    "name": "Aparecida de Goiânia",
    "country": "BR",
    "lat": -16.82333,
    "long": -49.24389,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Jaboatão dos Guararapes",
    "country": "BR",
    "lat": -8.11278,
    "long": -35.01472,
    "zone": "America/Recife"
  },
  {
    "name": "Lauro de Freitas",
    "country": "BR",
    "lat": -12.89444,
    "long": -38.32722,
    "zone": "America/Bahia"
  },
  {
    "name": "Pinhais",
    "country": "BR",
    "lat": -25.44472,
    "long": -49.1925,
    "zone": "America/Sao_Paulo"
  },
  {
    "name": "Simões Filho",
    "country": "BR",
    "lat": -12.78444,
    "long": -38.40389,
    "zone": "America/Bahia"
  },
  {
    "name": "Sinop",
    "country": "BR",
    "lat": -11.86417,
    "long": -55.5025,
    "zone": "America/Cuiaba"
  },
  {
    "name": "Nassau",
    "country": "BS",
    "lat": 25.05823,
    "long": -77.34306,
    "zone": "America/Nassau"
  },
  {
    "name": "Gaborone",
    "country": "BW",
    "lat": -24.65451,
    "long": 25.90859,
    "zone": "Africa/Gaborone"
  },
  {
    "name": "Vitebsk",
    "country": "BY",
    "lat": 55.1904,
    "long": 30.2049,
    "zone": "Europe/Minsk"
  },
  {
    "name": "Salihorsk",
    "country": "BY",
    "lat": 52.7876,
    "long": 27.5415,
    "zone": "Europe/Minsk"
  },
  {
    "name": "Pinsk",
    "country": "BY",
    "lat": 52.1229,
    "long": 26.0951,
    "zone": "Europe/Minsk"
  },
  {
    "name": "Orsha",
    "country": "BY",
    "lat": 54.5081,
    "long": 30.4172,
    "zone": "Europe/Minsk"
  },
  {
    "name": "Novoye Medvezhino",
    "country": "BY",
    "lat": 53.88333,
    "long": 27.45,
    "zone": "Europe/Minsk"
  },
  {
    "name": "Navapolatsk",
    "country": "BY",
    "lat": 55.5318,
    "long": 28.5987,
    "zone": "Europe/Minsk"
  },
  {
    "name": "Minsk",
    "country": "BY",
    "lat": 53.9,
    "long": 27.56667,
    "zone": "Europe/Minsk"
  },
  {
    "name": "Mazyr",
    "country": "BY",
    "lat": 52.0495,
    "long": 29.2456,
    "zone": "Europe/Minsk"
  },
  {
    "name": "Maladzyechna",
    "country": "BY",
    "lat": 54.3167,
    "long": 26.854,
    "zone": "Europe/Minsk"
  },
  {
    "name": "Mahilyow",
    "country": "BY",
    "lat": 53.9168,
    "long": 30.3449,
    "zone": "Europe/Minsk"
  },
  {
    "name": "Hrodna",
    "country": "BY",
    "lat": 53.6884,
    "long": 23.8258,
    "zone": "Europe/Minsk"
  },
  {
    "name": "Gomel",
    "country": "BY",
    "lat": 52.4345,
    "long": 30.9754,
    "zone": "Europe/Minsk"
  },
  {
    "name": "Brest",
    "country": "BY",
    "lat": 52.09755,
    "long": 23.68775,
    "zone": "Europe/Minsk"
  },
  {
    "name": "Baranovichi",
    "country": "BY",
    "lat": 53.1327,
    "long": 26.0139,
    "zone": "Europe/Minsk"
  },
  {
    "name": "Babruysk",
    "country": "BY",
    "lat": 53.1384,
    "long": 29.2214,
    "zone": "Europe/Minsk"
  },
  {
    "name": "Malinovka",
    "country": "BY",
    "lat": 53.8579,
    "long": 27.4374,
    "zone": "Europe/Minsk"
  },
  {
    "name": "Abbotsford",
    "country": "CA",
    "lat": 49.05798,
    "long": -122.25257,
    "zone": "America/Vancouver"
  },
  {
    "name": "Anmore",
    "country": "CA",
    "lat": 49.31637,
    "long": -122.85263,
    "zone": "America/Vancouver"
  },
  {
    "name": "Barrie",
    "country": "CA",
    "lat": 44.40011,
    "long": -79.66634,
    "zone": "America/Toronto"
  },
  {
    "name": "Brampton",
    "country": "CA",
    "lat": 43.68341,
    "long": -79.76633,
    "zone": "America/Toronto"
  },
  {
    "name": "Burlington",
    "country": "CA",
    "lat": 43.38621,
    "long": -79.83713,
    "zone": "America/Toronto"
  },
  {
    "name": "Burnaby",
    "country": "CA",
    "lat": 49.26636,
    "long": -122.95263,
    "zone": "America/Vancouver"
  },
  {
    "name": "Calgary",
    "country": "CA",
    "lat": 51.05011,
    "long": -114.08529,
    "zone": "America/Edmonton"
  },
  {
    "name": "Cambridge",
    "country": "CA",
    "lat": 43.3601,
    "long": -80.31269,
    "zone": "America/Toronto"
  },
  {
    "name": "Coquitlam",
    "country": "CA",
    "lat": 49.28297,
    "long": -122.75262,
    "zone": "America/Vancouver"
  },
  {
    "name": "Dartmouth",
    "country": "CA",
    "lat": 44.67134,
    "long": -63.57719,
    "zone": "America/Halifax"
  },
  {
    "name": "Delta",
    "country": "CA",
    "lat": 49.14399,
    "long": -122.9068,
    "zone": "America/Vancouver"
  },
  {
    "name": "Edmonton",
    "country": "CA",
    "lat": 53.55014,
    "long": -113.46871,
    "zone": "America/Edmonton"
  },
  {
    "name": "Etobicoke",
    "country": "CA",
    "lat": 43.65421,
    "long": -79.56711,
    "zone": "America/Toronto"
  },
  {
    "name": "Gatineau",
    "country": "CA",
    "lat": 45.47723,
    "long": -75.70164,
    "zone": "America/Toronto"
  },
  {
    "name": "Greater Sudbury",
    "country": "CA",
    "lat": 46.49,
    "long": -80.99001,
    "zone": "America/Toronto"
  },
  {
    "name": "Guelph",
    "country": "CA",
    "lat": 43.54594,
    "long": -80.25599,
    "zone": "America/Toronto"
  },
  {
    "name": "Hamilton",
    "country": "CA",
    "lat": 43.25011,
    "long": -79.84963,
    "zone": "America/Toronto"
  },
  {
    "name": "Kelowna",
    "country": "CA",
    "lat": 49.88307,
    "long": -119.48568,
    "zone": "America/Vancouver"
  },
  {
    "name": "Kingston",
    "country": "CA",
    "lat": 44.22976,
    "long": -76.48098,
    "zone": "America/Toronto"
  },
  {
    "name": "Kitchener",
    "country": "CA",
    "lat": 43.42537,
    "long": -80.5112,
    "zone": "America/Toronto"
  },
  {
    "name": "Laval",
    "country": "CA",
    "lat": 45.56995,
    "long": -73.692,
    "zone": "America/Toronto"
  },
  {
    "name": "London",
    "country": "CA",
    "lat": 42.98339,
    "long": -81.23304,
    "zone": "America/Toronto"
  },
  {
    "name": "Longueuil",
    "country": "CA",
    "lat": 45.53121,
    "long": -73.51806,
    "zone": "America/Toronto"
  },
  {
    "name": "Markham",
    "country": "CA",
    "lat": 43.86682,
    "long": -79.2663,
    "zone": "America/Toronto"
  },
  {
    "name": "Mississauga",
    "country": "CA",
    "lat": 43.5789,
    "long": -79.6583,
    "zone": "America/Toronto"
  },
  {
    "name": "Montréal",
    "country": "CA",
    "lat": 45.50884,
    "long": -73.58781,
    "zone": "America/Toronto"
  },
  {
    "name": "North York",
    "country": "CA",
    "lat": 43.76681,
    "long": -79.4163,
    "zone": "America/Toronto"
  },
  {
    "name": "Oakville",
    "country": "CA",
    "lat": 43.45011,
    "long": -79.68292,
    "zone": "America/Toronto"
  },
  {
    "name": "Oshawa",
    "country": "CA",
    "lat": 43.90012,
    "long": -78.84957,
    "zone": "America/Toronto"
  },
  {
    "name": "Ottawa",
    "country": "CA",
    "lat": 45.41117,
    "long": -75.69812,
    "zone": "America/Toronto"
  },
  {
    "name": "Regina",
    "country": "CA",
    "lat": 50.45008,
    "long": -104.6178,
    "zone": "America/Regina"
  },
  {
    "name": "Richmond",
    "country": "CA",
    "lat": 49.17003,
    "long": -123.13683,
    "zone": "America/Vancouver"
  },
  {
    "name": "Richmond Hill",
    "country": "CA",
    "lat": 43.87111,
    "long": -79.43725,
    "zone": "America/Toronto"
  },
  {
    "name": "Saguenay",
    "country": "CA",
    "lat": 48.41675,
    "long": -71.06573,
    "zone": "America/Toronto"
  },
  {
    "name": "Saskatoon",
    "country": "CA",
    "lat": 52.11679,
    "long": -106.63452,
    "zone": "America/Regina"
  },
  {
    "name": "Sherbrooke",
    "country": "CA",
    "lat": 45.40008,
    "long": -71.89908,
    "zone": "America/Toronto"
  },
  {
    "name": "St. Catharines",
    "country": "CA",
    "lat": 43.17126,
    "long": -79.24267,
    "zone": "America/Toronto"
  },
  {
    "name": "Surrey",
    "country": "CA",
    "lat": 49.10635,
    "long": -122.82509,
    "zone": "America/Vancouver"
  },
  {
    "name": "Toronto",
    "country": "CA",
    "lat": 43.70011,
    "long": -79.4163,
    "zone": "America/Toronto"
  },
  {
    "name": "Trois-Rivières",
    "country": "CA",
    "lat": 46.34515,
    "long": -72.5477,
    "zone": "America/Toronto"
  },
  {
    "name": "Vancouver",
    "country": "CA",
    "lat": 49.24966,
    "long": -123.11934,
    "zone": "America/Vancouver"
  },
  {
    "name": "Vaughan",
    "country": "CA",
    "lat": 43.8361,
    "long": -79.49827,
    "zone": "America/Toronto"
  },
  {
    "name": "Victoria",
    "country": "CA",
    "lat": 48.43294,
    "long": -123.3693,
    "zone": "America/Vancouver"
  },
  {
    "name": "Windsor",
    "country": "CA",
    "lat": 42.30008,
    "long": -83.01654,
    "zone": "America/Toronto"
  },
  {
    "name": "Winnipeg",
    "country": "CA",
    "lat": 49.8844,
    "long": -97.14704,
    "zone": "America/Winnipeg"
  },
  {
    "name": "Halifax",
    "country": "CA",
    "lat": 44.64533,
    "long": -63.57239,
    "zone": "America/Halifax"
  },
  {
    "name": "Québec",
    "country": "CA",
    "lat": 46.81228,
    "long": -71.21454,
    "zone": "America/Toronto"
  },
  {
    "name": "Lévis",
    "country": "CA",
    "lat": 46.80326,
    "long": -71.17793,
    "zone": "America/Toronto"
  },
  {
    "name": "Sydney",
    "country": "CA",
    "lat": 46.1351,
    "long": -60.1831,
    "zone": "America/Glace_Bay"
  },
  {
    "name": "Scarborough",
    "country": "CA",
    "lat": 43.77223,
    "long": -79.25666,
    "zone": "America/Toronto"
  },
  {
    "name": "Okanagan",
    "country": "CA",
    "lat": 50.36386,
    "long": -119.34997,
    "zone": "America/Vancouver"
  },
  {
    "name": "Ladner",
    "country": "CA",
    "lat": 49.08938,
    "long": -123.08241,
    "zone": "America/Vancouver"
  },
  {
    "name": "Uvira",
    "country": "CD",
    "lat": -3.39534,
    "long": 29.13779,
    "zone": "Africa/Lubumbashi"
  },
  {
    "name": "Tshikapa",
    "country": "CD",
    "lat": -6.41621,
    "long": 20.79995,
    "zone": "Africa/Lubumbashi"
  },
  {
    "name": "Mwene-Ditu",
    "country": "CD",
    "lat": -7.00906,
    "long": 23.45278,
    "zone": "Africa/Lubumbashi"
  },
  {
    "name": "Mbuji-Mayi",
    "country": "CD",
    "lat": -6.13603,
    "long": 23.58979,
    "zone": "Africa/Lubumbashi"
  },
  {
    "name": "Kisangani",
    "country": "CD",
    "lat": 0.51528,
    "long": 25.19099,
    "zone": "Africa/Lubumbashi"
  },
  {
    "name": "Kindu",
    "country": "CD",
    "lat": -2.94373,
    "long": 25.92237,
    "zone": "Africa/Lubumbashi"
  },
  {
    "name": "Kananga",
    "country": "CD",
    "lat": -5.89624,
    "long": 22.41659,
    "zone": "Africa/Lubumbashi"
  },
  {
    "name": "Kalemie",
    "country": "CD",
    "lat": -5.94749,
    "long": 29.19471,
    "zone": "Africa/Lubumbashi"
  },
  {
    "name": "Isiro",
    "country": "CD",
    "lat": 2.77391,
    "long": 27.61603,
    "zone": "Africa/Lubumbashi"
  },
  {
    "name": "Ilebo",
    "country": "CD",
    "lat": -4.33111,
    "long": 20.58638,
    "zone": "Africa/Lubumbashi"
  },
  {
    "name": "Goma",
    "country": "CD",
    "lat": -1.67409,
    "long": 29.22845,
    "zone": "Africa/Lubumbashi"
  },
  {
    "name": "Gandajika",
    "country": "CD",
    "lat": -6.74504,
    "long": 23.95328,
    "zone": "Africa/Lubumbashi"
  },
  {
    "name": "Butembo",
    "country": "CD",
    "lat": 0.14164,
    "long": 29.29117,
    "zone": "Africa/Lubumbashi"
  },
  {
    "name": "Bukavu",
    "country": "CD",
    "lat": -2.49077,
    "long": 28.84281,
    "zone": "Africa/Lubumbashi"
  },
  {
    "name": "Lubumbashi",
    "country": "CD",
    "lat": -11.66089,
    "long": 27.47938,
    "zone": "Africa/Lubumbashi"
  },
  {
    "name": "Likasi",
    "country": "CD",
    "lat": -10.98303,
    "long": 26.7384,
    "zone": "Africa/Lubumbashi"
  },
  {
    "name": "Kolwezi",
    "country": "CD",
    "lat": -10.71484,
    "long": 25.46674,
    "zone": "Africa/Lubumbashi"
  },
  {
    "name": "Mbandaka",
    "country": "CD",
    "lat": 0.04865,
    "long": 18.26034,
    "zone": "Africa/Kinshasa"
  },
  {
    "name": "Matadi",
    "country": "CD",
    "lat": -5.79949,
    "long": 13.44068,
    "zone": "Africa/Kinshasa"
  },
  {
    "name": "Kinshasa",
    "country": "CD",
    "lat": -4.32758,
    "long": 15.31357,
    "zone": "Africa/Kinshasa"
  },
  {
    "name": "Kikwit",
    "country": "CD",
    "lat": -5.04098,
    "long": 18.81619,
    "zone": "Africa/Kinshasa"
  },
  {
    "name": "Gemena",
    "country": "CD",
    "lat": 3.25651,
    "long": 19.77234,
    "zone": "Africa/Kinshasa"
  },
  {
    "name": "Bandundu",
    "country": "CD",
    "lat": -3.31687,
    "long": 17.38063,
    "zone": "Africa/Kinshasa"
  },
  {
    "name": "Masina",
    "country": "CD",
    "lat": -4.38361,
    "long": 15.39139,
    "zone": "Africa/Kinshasa"
  },
  {
    "name": "Bimbo",
    "country": "CF",
    "lat": 4.25671,
    "long": 18.41583,
    "zone": "Africa/Bangui"
  },
  {
    "name": "Bangui",
    "country": "CF",
    "lat": 4.36122,
    "long": 18.55496,
    "zone": "Africa/Bangui"
  },
  {
    "name": "Pointe-Noire",
    "country": "CG",
    "lat": -4.77609,
    "long": 11.86352,
    "zone": "Africa/Brazzaville"
  },
  {
    "name": "Dolisie",
    "country": "CG",
    "lat": -4.19834,
    "long": 12.66664,
    "zone": "Africa/Brazzaville"
  },
  {
    "name": "Brazzaville",
    "country": "CG",
    "lat": -4.26613,
    "long": 15.28318,
    "zone": "Africa/Brazzaville"
  },
  {
    "name": "Zürich",
    "country": "CH",
    "lat": 47.36667,
    "long": 8.55,
    "zone": "Europe/Zurich"
  },
  {
    "name": "Lausanne",
    "country": "CH",
    "lat": 46.516,
    "long": 6.63282,
    "zone": "Europe/Zurich"
  },
  {
    "name": "Genève",
    "country": "CH",
    "lat": 46.20222,
    "long": 6.14569,
    "zone": "Europe/Zurich"
  },
  {
    "name": "Bern",
    "country": "CH",
    "lat": 46.94809,
    "long": 7.44744,
    "zone": "Europe/Zurich"
  },
  {
    "name": "Basel",
    "country": "CH",
    "lat": 47.55839,
    "long": 7.57327,
    "zone": "Europe/Zurich"
  },
  {
    "name": "Yamoussoukro",
    "country": "CI",
    "lat": 6.82055,
    "long": -5.27674,
    "zone": "Africa/Abidjan"
  },
  {
    "name": "San-Pédro",
    "country": "CI",
    "lat": 4.74851,
    "long": -6.6363,
    "zone": "Africa/Abidjan"
  },
  {
    "name": "Man",
    "country": "CI",
    "lat": 7.41251,
    "long": -7.55383,
    "zone": "Africa/Abidjan"
  },
  {
    "name": "Korhogo",
    "country": "CI",
    "lat": 9.45803,
    "long": -5.62961,
    "zone": "Africa/Abidjan"
  },
  {
    "name": "Gagnoa",
    "country": "CI",
    "lat": 6.13193,
    "long": -5.9506,
    "zone": "Africa/Abidjan"
  },
  {
    "name": "Divo",
    "country": "CI",
    "lat": 5.83739,
    "long": -5.35723,
    "zone": "Africa/Abidjan"
  },
  {
    "name": "Daloa",
    "country": "CI",
    "lat": 6.87735,
    "long": -6.45022,
    "zone": "Africa/Abidjan"
  },
  {
    "name": "Bouaké",
    "country": "CI",
    "lat": 7.69385,
    "long": -5.03031,
    "zone": "Africa/Abidjan"
  },
  {
    "name": "Anyama",
    "country": "CI",
    "lat": 5.49462,
    "long": -4.05183,
    "zone": "Africa/Abidjan"
  },
  {
    "name": "Abobo",
    "country": "CI",
    "lat": 5.41613,
    "long": -4.0159,
    "zone": "Africa/Abidjan"
  },
  {
    "name": "Abidjan",
    "country": "CI",
    "lat": 5.30966,
    "long": -4.01266,
    "zone": "Africa/Abidjan"
  },
  {
    "name": "Abengourou",
    "country": "CI",
    "lat": 6.72972,
    "long": -3.49639,
    "zone": "Africa/Abidjan"
  },
  {
    "name": "Viña del Mar",
    "country": "CL",
    "lat": -33.02457,
    "long": -71.55183,
    "zone": "America/Santiago"
  },
  {
    "name": "Valparaíso",
    "country": "CL",
    "lat": -33.03932,
    "long": -71.62725,
    "zone": "America/Santiago"
  },
  {
    "name": "Valdivia",
    "country": "CL",
    "lat": -39.81422,
    "long": -73.24589,
    "zone": "America/Santiago"
  },
  {
    "name": "Temuco",
    "country": "CL",
    "lat": -38.73965,
    "long": -72.59842,
    "zone": "America/Santiago"
  },
  {
    "name": "Talcahuano",
    "country": "CL",
    "lat": -36.72494,
    "long": -73.11684,
    "zone": "America/Santiago"
  },
  {
    "name": "Talca",
    "country": "CL",
    "lat": -35.4264,
    "long": -71.65542,
    "zone": "America/Santiago"
  },
  {
    "name": "Santiago",
    "country": "CL",
    "lat": -33.45694,
    "long": -70.64827,
    "zone": "America/Santiago"
  },
  {
    "name": "San Bernardo",
    "country": "CL",
    "lat": -33.59217,
    "long": -70.6996,
    "zone": "America/Santiago"
  },
  {
    "name": "Rancagua",
    "country": "CL",
    "lat": -34.17083,
    "long": -70.74444,
    "zone": "America/Santiago"
  },
  {
    "name": "Quilpué",
    "country": "CL",
    "lat": -33.04752,
    "long": -71.44249,
    "zone": "America/Santiago"
  },
  {
    "name": "Punta Arenas",
    "country": "CL",
    "lat": -53.15483,
    "long": -70.91129,
    "zone": "America/Santiago"
  },
  {
    "name": "Puerto Montt",
    "country": "CL",
    "lat": -41.46574,
    "long": -72.94289,
    "zone": "America/Santiago"
  },
  {
    "name": "Puente Alto",
    "country": "CL",
    "lat": -33.61169,
    "long": -70.57577,
    "zone": "America/Santiago"
  },
  {
    "name": "Osorno",
    "country": "CL",
    "lat": -40.57395,
    "long": -73.13348,
    "zone": "America/Santiago"
  },
  {
    "name": "Los Ángeles",
    "country": "CL",
    "lat": -37.46973,
    "long": -72.35366,
    "zone": "America/Santiago"
  },
  {
    "name": "La Serena",
    "country": "CL",
    "lat": -29.90453,
    "long": -71.24894,
    "zone": "America/Santiago"
  },
  {
    "name": "Iquique",
    "country": "CL",
    "lat": -20.22036,
    "long": -70.13913,
    "zone": "America/Santiago"
  },
  {
    "name": "Curicó",
    "country": "CL",
    "lat": -34.98279,
    "long": -71.23943,
    "zone": "America/Santiago"
  },
  {
    "name": "Coquimbo",
    "country": "CL",
    "lat": -29.95332,
    "long": -71.33947,
    "zone": "America/Santiago"
  },
  {
    "name": "Copiapó",
    "country": "CL",
    "lat": -27.36679,
    "long": -70.3314,
    "zone": "America/Santiago"
  },
  {
    "name": "Concepción",
    "country": "CL",
    "lat": -36.82699,
    "long": -73.04977,
    "zone": "America/Santiago"
  },
  {
    "name": "Chillán",
    "country": "CL",
    "lat": -36.60664,
    "long": -72.10344,
    "zone": "America/Santiago"
  },
  {
    "name": "Calama",
    "country": "CL",
    "lat": -22.45591,
    "long": -68.93015,
    "zone": "America/Santiago"
  },
  {
    "name": "Arica",
    "country": "CL",
    "lat": -18.4746,
    "long": -70.29792,
    "zone": "America/Santiago"
  },
  {
    "name": "Antofagasta",
    "country": "CL",
    "lat": -23.65236,
    "long": -70.3954,
    "zone": "America/Santiago"
  },
  {
    "name": "La Pintana",
    "country": "CL",
    "lat": -33.58331,
    "long": -70.63419,
    "zone": "America/Santiago"
  },
  {
    "name": "Lo Prado",
    "country": "CL",
    "lat": -33.4443,
    "long": -70.72552,
    "zone": "America/Santiago"
  },
  {
    "name": "Yaoundé",
    "country": "CM",
    "lat": 3.86667,
    "long": 11.51667,
    "zone": "Africa/Douala"
  },
  {
    "name": "Nkongsamba",
    "country": "CM",
    "lat": 4.9547,
    "long": 9.9404,
    "zone": "Africa/Douala"
  },
  {
    "name": "Ngaoundéré",
    "country": "CM",
    "lat": 7.32765,
    "long": 13.58472,
    "zone": "Africa/Douala"
  },
  {
    "name": "Mokolo",
    "country": "CM",
    "lat": 10.74244,
    "long": 13.80227,
    "zone": "Africa/Douala"
  },
  {
    "name": "Mbouda",
    "country": "CM",
    "lat": 5.62611,
    "long": 10.25421,
    "zone": "Africa/Douala"
  },
  {
    "name": "Maroua",
    "country": "CM",
    "lat": 10.59095,
    "long": 14.31593,
    "zone": "Africa/Douala"
  },
  {
    "name": "Loum",
    "country": "CM",
    "lat": 4.7182,
    "long": 9.7351,
    "zone": "Africa/Douala"
  },
  {
    "name": "Kumba",
    "country": "CM",
    "lat": 4.6363,
    "long": 9.4469,
    "zone": "Africa/Douala"
  },
  {
    "name": "Kousséri",
    "country": "CM",
    "lat": 12.07689,
    "long": 15.03063,
    "zone": "Africa/Douala"
  },
  {
    "name": "Garoua",
    "country": "CM",
    "lat": 9.30143,
    "long": 13.39771,
    "zone": "Africa/Douala"
  },
  {
    "name": "Edéa",
    "country": "CM",
    "lat": 3.8,
    "long": 10.13333,
    "zone": "Africa/Douala"
  },
  {
    "name": "Douala",
    "country": "CM",
    "lat": 4.04827,
    "long": 9.70428,
    "zone": "Africa/Douala"
  },
  {
    "name": "Bertoua",
    "country": "CM",
    "lat": 4.57728,
    "long": 13.68459,
    "zone": "Africa/Douala"
  },
  {
    "name": "Bamenda",
    "country": "CM",
    "lat": 5.9597,
    "long": 10.14597,
    "zone": "Africa/Douala"
  },
  {
    "name": "Bafoussam",
    "country": "CM",
    "lat": 5.47775,
    "long": 10.41759,
    "zone": "Africa/Douala"
  },
  {
    "name": "Lhasa",
    "country": "CN",
    "lat": 29.65,
    "long": 91.1,
    "zone": "Asia/Urumqi"
  },
  {
    "name": "Kashi",
    "country": "CN",
    "lat": 39.47066,
    "long": 75.98951,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Jiayuguan",
    "country": "CN",
    "lat": 39.81121,
    "long": 98.28618,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Hotan",
    "country": "CN",
    "lat": 37.1075,
    "long": 79.93548,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Ürümqi",
    "country": "CN",
    "lat": 43.80096,
    "long": 87.60046,
    "zone": "Asia/Urumqi"
  },
  {
    "name": "Laochenglu",
    "country": "CN",
    "lat": 42.94769,
    "long": 89.17886,
    "zone": "Asia/Urumqi"
  },
  {
    "name": "Shihezi",
    "country": "CN",
    "lat": 44.3023,
    "long": 86.03694,
    "zone": "Asia/Urumqi"
  },
  {
    "name": "Sayibage",
    "country": "CN",
    "lat": 41.76055,
    "long": 86.15231,
    "zone": "Asia/Urumqi"
  },
  {
    "name": "Hami",
    "country": "CN",
    "lat": 42.83393,
    "long": 93.50601,
    "zone": "Asia/Urumqi"
  },
  {
    "name": "Changji",
    "country": "CN",
    "lat": 44.00782,
    "long": 87.30461,
    "zone": "Asia/Urumqi"
  },
  {
    "name": "Aral",
    "country": "CN",
    "lat": 40.54184,
    "long": 81.26566,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Altay",
    "country": "CN",
    "lat": 47.84864,
    "long": 88.13361,
    "zone": "Asia/Urumqi"
  },
  {
    "name": "Yingbazha",
    "country": "CN",
    "lat": 41.18418,
    "long": 80.27921,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Zunyi",
    "country": "CN",
    "lat": 27.68667,
    "long": 106.90722,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Zoucheng",
    "country": "CN",
    "lat": 35.40056,
    "long": 116.96556,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Zigong",
    "country": "CN",
    "lat": 29.34162,
    "long": 104.77689,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Zhuzhou",
    "country": "CN",
    "lat": 27.83333,
    "long": 113.15,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Zhumadian",
    "country": "CN",
    "lat": 32.97944,
    "long": 114.02944,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Shangqiu",
    "country": "CN",
    "lat": 34.45,
    "long": 115.65,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Zhuji",
    "country": "CN",
    "lat": 29.71877,
    "long": 120.24233,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Mizhou",
    "country": "CN",
    "lat": 35.99472,
    "long": 119.3975,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Zhoukou",
    "country": "CN",
    "lat": 33.63333,
    "long": 114.63333,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Zhoucun",
    "country": "CN",
    "lat": 36.81667,
    "long": 117.81667,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Yuxi",
    "country": "CN",
    "lat": 24.355,
    "long": 102.54222,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Zhicheng",
    "country": "CN",
    "lat": 30.29556,
    "long": 111.50472,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Zhenzhou",
    "country": "CN",
    "lat": 32.28034,
    "long": 119.16999,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Zhenjiang",
    "country": "CN",
    "lat": 32.21086,
    "long": 119.45508,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Zhengzhou",
    "country": "CN",
    "lat": 34.75778,
    "long": 113.64861,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Xinghua",
    "country": "CN",
    "lat": 32.93917,
    "long": 119.83417,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Zhaotong",
    "country": "CN",
    "lat": 27.31667,
    "long": 103.71667,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Zhaoqing",
    "country": "CN",
    "lat": 23.05116,
    "long": 112.45972,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Luofeng",
    "country": "CN",
    "lat": 37.36497,
    "long": 120.40997,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Zhanjiang",
    "country": "CN",
    "lat": 21.28145,
    "long": 110.34271,
    "zone": "Asia/Urumqi"
  },
  {
    "name": "Zhangzhou",
    "country": "CN",
    "lat": 24.51333,
    "long": 117.65556,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Zibo",
    "country": "CN",
    "lat": 36.79056,
    "long": 118.06333,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Anyang",
    "country": "CN",
    "lat": 36.09944,
    "long": 114.32889,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Zaozhuang",
    "country": "CN",
    "lat": 34.86472,
    "long": 117.55417,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Zaoyang",
    "country": "CN",
    "lat": 32.12722,
    "long": 112.75417,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Yuyao",
    "country": "CN",
    "lat": 30.05,
    "long": 121.14944,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Kunshan",
    "country": "CN",
    "lat": 31.37762,
    "long": 120.95431,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Yunfu",
    "country": "CN",
    "lat": 22.92833,
    "long": 112.03954,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Yuncheng",
    "country": "CN",
    "lat": 35.02306,
    "long": 110.99278,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Yulin",
    "country": "CN",
    "lat": 22.63333,
    "long": 110.15,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Yuci",
    "country": "CN",
    "lat": 37.68028,
    "long": 112.73194,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Qianjiang",
    "country": "CN",
    "lat": 30.421,
    "long": 112.8919,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Zhongxiang",
    "country": "CN",
    "lat": 31.16611,
    "long": 112.58306,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Chengzhong",
    "country": "CN",
    "lat": 30.94454,
    "long": 113.55284,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Yinchuan",
    "country": "CN",
    "lat": 38.46806,
    "long": 106.27306,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Qingzhou",
    "country": "CN",
    "lat": 36.69667,
    "long": 118.47972,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Yichun",
    "country": "CN",
    "lat": 27.83333,
    "long": 114.4,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Yichang",
    "country": "CN",
    "lat": 30.71444,
    "long": 111.28472,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Yibin",
    "country": "CN",
    "lat": 28.76667,
    "long": 104.62383,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Yantai",
    "country": "CN",
    "lat": 37.47649,
    "long": 121.44081,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Yangzhou",
    "country": "CN",
    "lat": 32.39722,
    "long": 119.43583,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Yangshuo",
    "country": "CN",
    "lat": 24.78081,
    "long": 110.48967,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Yangquan",
    "country": "CN",
    "lat": 37.8575,
    "long": 113.56333,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Yancheng",
    "country": "CN",
    "lat": 33.3575,
    "long": 120.1573,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Tongshan",
    "country": "CN",
    "lat": 34.18045,
    "long": 117.15707,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Shangrao",
    "country": "CN",
    "lat": 28.45322,
    "long": 117.9686,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Xuchang",
    "country": "CN",
    "lat": 34.01667,
    "long": 113.81667,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Xuanzhou",
    "country": "CN",
    "lat": 30.9525,
    "long": 118.75528,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Xiuying",
    "country": "CN",
    "lat": 20.00073,
    "long": 110.29359,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Xiulin",
    "country": "CN",
    "lat": 29.71667,
    "long": 112.4,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Xinzhou",
    "country": "CN",
    "lat": 38.40917,
    "long": 112.73333,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Xinyang",
    "country": "CN",
    "lat": 32.12278,
    "long": 114.06556,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Xinxiang",
    "country": "CN",
    "lat": 35.30889,
    "long": 113.86722,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Xintai",
    "country": "CN",
    "lat": 35.90056,
    "long": 117.75194,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Xinpu",
    "country": "CN",
    "lat": 34.59972,
    "long": 119.15944,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Xinji",
    "country": "CN",
    "lat": 37.90278,
    "long": 115.20361,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Xining",
    "country": "CN",
    "lat": 36.62554,
    "long": 101.75739,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Xingtai",
    "country": "CN",
    "lat": 37.06306,
    "long": 114.49417,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Ankang",
    "country": "CN",
    "lat": 32.68,
    "long": 109.01722,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Xindi",
    "country": "CN",
    "lat": 29.81667,
    "long": 113.46667,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Sanshui",
    "country": "CN",
    "lat": 23.15486,
    "long": 112.89161,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Xichang",
    "country": "CN",
    "lat": 27.89642,
    "long": 102.26341,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Xiazhen",
    "country": "CN",
    "lat": 34.80222,
    "long": 117.11167,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Xiaogan",
    "country": "CN",
    "lat": 30.92689,
    "long": 113.92221,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Xianyang",
    "country": "CN",
    "lat": 34.33778,
    "long": 108.70261,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Xiantao",
    "country": "CN",
    "lat": 30.3708,
    "long": 113.44294,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Xianning",
    "country": "CN",
    "lat": 29.88333,
    "long": 114.21667,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Zhuhai",
    "country": "CN",
    "lat": 22.27694,
    "long": 113.56778,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Xiangtan",
    "country": "CN",
    "lat": 27.85,
    "long": 112.9,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Xiangyang",
    "country": "CN",
    "lat": 32.0422,
    "long": 112.14479,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Xi’an",
    "country": "CN",
    "lat": 34.25833,
    "long": 108.92861,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Xiamen",
    "country": "CN",
    "lat": 24.47979,
    "long": 118.08187,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Wuzhou",
    "country": "CN",
    "lat": 23.48333,
    "long": 111.31667,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Wuxue",
    "country": "CN",
    "lat": 29.85058,
    "long": 115.5525,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Wuxi",
    "country": "CN",
    "lat": 31.56887,
    "long": 120.28857,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Dongyang",
    "country": "CN",
    "lat": 29.26778,
    "long": 120.22528,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Changde",
    "country": "CN",
    "lat": 29.04638,
    "long": 111.6783,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Wuhu",
    "country": "CN",
    "lat": 31.33728,
    "long": 118.37351,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Wuhan",
    "country": "CN",
    "lat": 30.58333,
    "long": 114.26667,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Wuhai",
    "country": "CN",
    "lat": 39.68442,
    "long": 106.81583,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Wuda",
    "country": "CN",
    "lat": 39.49944,
    "long": 106.71167,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Wenzhou",
    "country": "CN",
    "lat": 27.99942,
    "long": 120.66682,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Tianfu",
    "country": "CN",
    "lat": 37.19723,
    "long": 122.05228,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Weinan",
    "country": "CN",
    "lat": 34.50355,
    "long": 109.50891,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Weihai",
    "country": "CN",
    "lat": 37.50914,
    "long": 122.11356,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Weifang",
    "country": "CN",
    "lat": 36.71,
    "long": 119.10194,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Wanxian",
    "country": "CN",
    "lat": 30.81544,
    "long": 108.37089,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Wafangdian",
    "country": "CN",
    "lat": 39.61833,
    "long": 122.00806,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Tongzhou",
    "country": "CN",
    "lat": 39.90395,
    "long": 116.66183,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Wusong",
    "country": "CN",
    "lat": 30.95,
    "long": 117.78333,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Tianshui",
    "country": "CN",
    "lat": 34.57952,
    "long": 105.74238,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Tianjin",
    "country": "CN",
    "lat": 39.14222,
    "long": 117.17667,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Tengzhou",
    "country": "CN",
    "lat": 35.07706,
    "long": 117.15176,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Tangshan",
    "country": "CN",
    "lat": 39.63333,
    "long": 118.18333,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Tanggu",
    "country": "CN",
    "lat": 39.02111,
    "long": 117.64694,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Taizhou",
    "country": "CN",
    "lat": 32.49069,
    "long": 119.90812,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Taiyuan",
    "country": "CN",
    "lat": 37.86944,
    "long": 112.56028,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Taishan",
    "country": "CN",
    "lat": 22.25135,
    "long": 112.7799,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Tai’an",
    "country": "CN",
    "lat": 36.18528,
    "long": 117.12,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Suzhou",
    "country": "CN",
    "lat": 33.63611,
    "long": 116.97889,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Suizhou",
    "country": "CN",
    "lat": 31.71111,
    "long": 113.36306,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Suining",
    "country": "CN",
    "lat": 30.50802,
    "long": 105.57332,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Songjiang",
    "country": "CN",
    "lat": 31.03595,
    "long": 121.2146,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Shizuishan",
    "country": "CN",
    "lat": 39.23333,
    "long": 106.76944,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Shiyan",
    "country": "CN",
    "lat": 32.6475,
    "long": 110.77806,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Shiyan",
    "country": "CN",
    "lat": 32.56667,
    "long": 110.78333,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Shiqiao",
    "country": "CN",
    "lat": 22.9464,
    "long": 113.35769,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Shiqi",
    "country": "CN",
    "lat": 22.51682,
    "long": 113.38521,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Shilong",
    "country": "CN",
    "lat": 23.11444,
    "long": 113.84722,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Tongchuan",
    "country": "CN",
    "lat": 35.08056,
    "long": 109.08972,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Shijiazhuang",
    "country": "CN",
    "lat": 38.04139,
    "long": 114.47861,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Shenzhen",
    "country": "CN",
    "lat": 22.54554,
    "long": 114.0683,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Shashi",
    "country": "CN",
    "lat": 30.30722,
    "long": 112.24472,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Shaping",
    "country": "CN",
    "lat": 22.77019,
    "long": 112.95776,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Shaoxing",
    "country": "CN",
    "lat": 30.00237,
    "long": 120.57864,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Shaowu",
    "country": "CN",
    "lat": 27.34089,
    "long": 117.4831,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Shaoguan",
    "country": "CN",
    "lat": 24.8,
    "long": 113.58333,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Shanwei",
    "country": "CN",
    "lat": 22.78199,
    "long": 115.3475,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Shantou",
    "country": "CN",
    "lat": 23.36814,
    "long": 116.71479,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Shanghai",
    "country": "CN",
    "lat": 31.22222,
    "long": 121.45806,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Shahecheng",
    "country": "CN",
    "lat": 36.93833,
    "long": 114.50583,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Sanya",
    "country": "CN",
    "lat": 18.24306,
    "long": 109.505,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Sanming",
    "country": "CN",
    "lat": 26.24861,
    "long": 117.61861,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Jieyang",
    "country": "CN",
    "lat": 23.5418,
    "long": 116.36581,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Rizhao",
    "country": "CN",
    "lat": 35.4275,
    "long": 119.45528,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Qujing",
    "country": "CN",
    "lat": 25.48333,
    "long": 103.78333,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Quanzhou",
    "country": "CN",
    "lat": 24.91389,
    "long": 118.58583,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Qinzhou",
    "country": "CN",
    "lat": 21.97296,
    "long": 108.62612,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Qinhuangdao",
    "country": "CN",
    "lat": 39.93167,
    "long": 119.58833,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Huai'an",
    "country": "CN",
    "lat": 33.58861,
    "long": 119.01917,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Qingdao",
    "country": "CN",
    "lat": 36.06605,
    "long": 120.36939,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Qingyuan",
    "country": "CN",
    "lat": 23.7,
    "long": 113.03333,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Puyang Chengguanzhen",
    "country": "CN",
    "lat": 35.70506,
    "long": 115.01409,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Puyang",
    "country": "CN",
    "lat": 29.45679,
    "long": 119.88872,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Putian",
    "country": "CN",
    "lat": 25.43944,
    "long": 119.01028,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Puqi",
    "country": "CN",
    "lat": 29.71667,
    "long": 113.88333,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Pulandian",
    "country": "CN",
    "lat": 39.39528,
    "long": 121.96694,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Pingxiang",
    "country": "CN",
    "lat": 27.61672,
    "long": 113.85353,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Pingshan",
    "country": "CN",
    "lat": 22.99376,
    "long": 114.71311,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Pingliang",
    "country": "CN",
    "lat": 35.53917,
    "long": 106.68611,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Pingdingshan",
    "country": "CN",
    "lat": 33.73847,
    "long": 113.30119,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Dadukou",
    "country": "CN",
    "lat": 26.5479,
    "long": 101.70539,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Ningbo",
    "country": "CN",
    "lat": 29.87819,
    "long": 121.54945,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Neijiang",
    "country": "CN",
    "lat": 29.58354,
    "long": 105.06216,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Nanyang",
    "country": "CN",
    "lat": 32.99472,
    "long": 112.53278,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Nantong",
    "country": "CN",
    "lat": 32.03028,
    "long": 120.87472,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Nanping",
    "country": "CN",
    "lat": 26.645,
    "long": 118.17361,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Nanning",
    "country": "CN",
    "lat": 22.81667,
    "long": 108.31667,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Nanjing",
    "country": "CN",
    "lat": 32.06167,
    "long": 118.77778,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Nanchong",
    "country": "CN",
    "lat": 30.79508,
    "long": 106.08473,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Nanchang",
    "country": "CN",
    "lat": 28.68396,
    "long": 115.85306,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Mingshui",
    "country": "CN",
    "lat": 36.71667,
    "long": 117.5,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Mianyang",
    "country": "CN",
    "lat": 31.45934,
    "long": 104.75423,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Mentougou",
    "country": "CN",
    "lat": 39.93819,
    "long": 116.09307,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Meizhou",
    "country": "CN",
    "lat": 24.29769,
    "long": 116.10724,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Wuchuan",
    "country": "CN",
    "lat": 21.45713,
    "long": 110.76591,
    "zone": "Asia/Urumqi"
  },
  {
    "name": "Majie",
    "country": "CN",
    "lat": 25.0319,
    "long": 102.638,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Macheng",
    "country": "CN",
    "lat": 31.18013,
    "long": 115.02213,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Maba",
    "country": "CN",
    "lat": 24.68413,
    "long": 113.59839,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Luqiao",
    "country": "CN",
    "lat": 28.58023,
    "long": 121.37491,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Luoyang",
    "country": "CN",
    "lat": 34.68361,
    "long": 112.45361,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Luoyang",
    "country": "CN",
    "lat": 23.16244,
    "long": 114.27342,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Luohe",
    "country": "CN",
    "lat": 33.57167,
    "long": 114.03528,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Luancheng",
    "country": "CN",
    "lat": 37.87917,
    "long": 114.65167,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Loudi",
    "country": "CN",
    "lat": 27.73444,
    "long": 111.99444,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Guankou",
    "country": "CN",
    "lat": 28.15861,
    "long": 113.62709,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Puning",
    "country": "CN",
    "lat": 23.31072,
    "long": 116.16869,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Linyi",
    "country": "CN",
    "lat": 35.06306,
    "long": 118.34278,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Linxia Chengguanzhen",
    "country": "CN",
    "lat": 35.60028,
    "long": 103.20639,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Linxi",
    "country": "CN",
    "lat": 39.71183,
    "long": 118.44954,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Linshui",
    "country": "CN",
    "lat": 36.42472,
    "long": 114.20472,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Qingnian",
    "country": "CN",
    "lat": 36.84032,
    "long": 115.71183,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Linhai",
    "country": "CN",
    "lat": 28.84815,
    "long": 121.12807,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Linfen",
    "country": "CN",
    "lat": 36.08889,
    "long": 111.51889,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Licheng",
    "country": "CN",
    "lat": 23.29549,
    "long": 113.82465,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Liaocheng",
    "country": "CN",
    "lat": 36.45596,
    "long": 115.97766,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Lianran",
    "country": "CN",
    "lat": 24.92271,
    "long": 102.48496,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Wuwei",
    "country": "CN",
    "lat": 37.92672,
    "long": 102.63202,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Lianjiang",
    "country": "CN",
    "lat": 21.64673,
    "long": 110.28172,
    "zone": "Asia/Urumqi"
  },
  {
    "name": "Leshan",
    "country": "CN",
    "lat": 29.56227,
    "long": 103.76386,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Lengshuijiang",
    "country": "CN",
    "lat": 27.68806,
    "long": 111.42944,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Leiyang",
    "country": "CN",
    "lat": 26.40238,
    "long": 112.85908,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Lecheng",
    "country": "CN",
    "lat": 25.128,
    "long": 113.35041,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Laohekou",
    "country": "CN",
    "lat": 32.38583,
    "long": 111.66778,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Lanzhou",
    "country": "CN",
    "lat": 36.05701,
    "long": 103.83987,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Langfang",
    "country": "CN",
    "lat": 39.50972,
    "long": 116.69472,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Laiyang",
    "country": "CN",
    "lat": 36.97583,
    "long": 120.71361,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Laiwu",
    "country": "CN",
    "lat": 36.19278,
    "long": 117.65694,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Kunming",
    "country": "CN",
    "lat": 25.03889,
    "long": 102.71833,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Kaiyuan",
    "country": "CN",
    "lat": 23.69767,
    "long": 103.30372,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Kaifeng",
    "country": "CN",
    "lat": 34.7986,
    "long": 114.30742,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Jiujiang",
    "country": "CN",
    "lat": 29.70475,
    "long": 116.00206,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Qianzhou",
    "country": "CN",
    "lat": 28.31925,
    "long": 109.73346,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Jinzhou",
    "country": "CN",
    "lat": 39.1,
    "long": 121.71667,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Jining",
    "country": "CN",
    "lat": 35.405,
    "long": 116.58139,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Jinhua",
    "country": "CN",
    "lat": 29.10678,
    "long": 119.64421,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Jingzhou",
    "country": "CN",
    "lat": 30.35028,
    "long": 112.19028,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Jingmen",
    "country": "CN",
    "lat": 31.03361,
    "long": 112.20472,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Jingling",
    "country": "CN",
    "lat": 30.65,
    "long": 113.1,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Jingdezhen",
    "country": "CN",
    "lat": 29.2947,
    "long": 117.20789,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Jinchang",
    "country": "CN",
    "lat": 38.50062,
    "long": 102.19379,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Jincheng",
    "country": "CN",
    "lat": 35.50222,
    "long": 112.83278,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Jinan",
    "country": "CN",
    "lat": 36.66833,
    "long": 116.99722,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Jieshou",
    "country": "CN",
    "lat": 33.26338,
    "long": 115.36108,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Jieshi",
    "country": "CN",
    "lat": 22.81027,
    "long": 115.83058,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Jiazi",
    "country": "CN",
    "lat": 22.87932,
    "long": 116.07318,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Jiaxing",
    "country": "CN",
    "lat": 30.7522,
    "long": 120.75,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Jiaozuo",
    "country": "CN",
    "lat": 35.23972,
    "long": 113.23306,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Jiaozhou",
    "country": "CN",
    "lat": 36.28389,
    "long": 120.00333,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Jiangmen",
    "country": "CN",
    "lat": 22.58333,
    "long": 113.08333,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Yangjiang",
    "country": "CN",
    "lat": 21.85563,
    "long": 111.96272,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Ji’an",
    "country": "CN",
    "lat": 27.11716,
    "long": 114.97927,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Guangyuan",
    "country": "CN",
    "lat": 32.44201,
    "long": 105.823,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Huzhou",
    "country": "CN",
    "lat": 30.8703,
    "long": 120.0933,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Humen",
    "country": "CN",
    "lat": 22.81899,
    "long": 113.67306,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Huizhou",
    "country": "CN",
    "lat": 23.11147,
    "long": 114.41523,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Huicheng",
    "country": "CN",
    "lat": 23.03845,
    "long": 116.28988,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Xinhui",
    "country": "CN",
    "lat": 22.456,
    "long": 113.0482,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Huangzhou",
    "country": "CN",
    "lat": 30.45,
    "long": 114.8,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Huangyan",
    "country": "CN",
    "lat": 28.6501,
    "long": 121.26591,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Huangshi",
    "country": "CN",
    "lat": 30.24706,
    "long": 115.04814,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Dasha",
    "country": "CN",
    "lat": 23.11037,
    "long": 113.4418,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Huanggang",
    "country": "CN",
    "lat": 23.67704,
    "long": 116.99961,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Daxing",
    "country": "CN",
    "lat": 39.74025,
    "long": 116.32693,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Huainan",
    "country": "CN",
    "lat": 32.62639,
    "long": 116.99694,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Huaihua",
    "country": "CN",
    "lat": 27.54944,
    "long": 109.95917,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Huaibei",
    "country": "CN",
    "lat": 33.97444,
    "long": 116.79167,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Heze",
    "country": "CN",
    "lat": 35.23929,
    "long": 115.47358,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Yiyang",
    "country": "CN",
    "lat": 28.58917,
    "long": 112.32833,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Hepo",
    "country": "CN",
    "lat": 23.43077,
    "long": 115.82991,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Hengyang",
    "country": "CN",
    "lat": 26.88946,
    "long": 112.61888,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Hengshui",
    "country": "CN",
    "lat": 37.73222,
    "long": 115.70111,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Hefei",
    "country": "CN",
    "lat": 31.86389,
    "long": 117.28083,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Hebi",
    "country": "CN",
    "lat": 35.89917,
    "long": 114.1925,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Hanzhong",
    "country": "CN",
    "lat": 33.07278,
    "long": 107.03028,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Hangzhou",
    "country": "CN",
    "lat": 30.29365,
    "long": 120.16142,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Hangu",
    "country": "CN",
    "lat": 39.24889,
    "long": 117.78917,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Handan",
    "country": "CN",
    "lat": 36.60056,
    "long": 114.46778,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Jiaojiang",
    "country": "CN",
    "lat": 28.68028,
    "long": 121.44278,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Haimen",
    "country": "CN",
    "lat": 23.19346,
    "long": 116.61219,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Haikou",
    "country": "CN",
    "lat": 24.77985,
    "long": 102.57548,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Haikou",
    "country": "CN",
    "lat": 20.04583,
    "long": 110.34167,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Guli",
    "country": "CN",
    "lat": 28.88162,
    "long": 120.03308,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Guiyang",
    "country": "CN",
    "lat": 26.58333,
    "long": 106.71667,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Guilin",
    "country": "CN",
    "lat": 25.28194,
    "long": 110.28639,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Guangzhou",
    "country": "CN",
    "lat": 23.11667,
    "long": 113.25,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Guangshui",
    "country": "CN",
    "lat": 31.6199,
    "long": 113.9978,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Gejiu",
    "country": "CN",
    "lat": 23.36085,
    "long": 103.15372,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Gaozhou",
    "country": "CN",
    "lat": 21.93924,
    "long": 110.84607,
    "zone": "Asia/Urumqi"
  },
  {
    "name": "Gaoping",
    "country": "CN",
    "lat": 30.77576,
    "long": 106.10294,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Gaomi",
    "country": "CN",
    "lat": 36.38333,
    "long": 119.75278,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Fuzhou",
    "country": "CN",
    "lat": 26.06139,
    "long": 119.30611,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Fuyang",
    "country": "CN",
    "lat": 32.9,
    "long": 115.81667,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Fuling",
    "country": "CN",
    "lat": 29.706,
    "long": 107.39575,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Foshan",
    "country": "CN",
    "lat": 23.02677,
    "long": 113.13148,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Ezhou",
    "country": "CN",
    "lat": 30.4,
    "long": 114.83333,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Encheng",
    "country": "CN",
    "lat": 22.18659,
    "long": 112.30424,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Shengli",
    "country": "CN",
    "lat": 37.46271,
    "long": 118.49165,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Dongtai",
    "country": "CN",
    "lat": 32.85231,
    "long": 120.30947,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Donghai",
    "country": "CN",
    "lat": 22.94593,
    "long": 115.64204,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Dongguan",
    "country": "CN",
    "lat": 23.04889,
    "long": 113.74472,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Dingzhou",
    "country": "CN",
    "lat": 38.51306,
    "long": 114.99556,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Dezhou",
    "country": "CN",
    "lat": 37.45127,
    "long": 116.31046,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Deyang",
    "country": "CN",
    "lat": 31.13019,
    "long": 104.38198,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Lijiang",
    "country": "CN",
    "lat": 26.86879,
    "long": 100.22072,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Dazhou",
    "country": "CN",
    "lat": 31.21592,
    "long": 107.50092,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Dawukou",
    "country": "CN",
    "lat": 39.04194,
    "long": 106.39583,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Danshui",
    "country": "CN",
    "lat": 22.7984,
    "long": 114.46716,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Daliang",
    "country": "CN",
    "lat": 22.84067,
    "long": 113.2503,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Dalian",
    "country": "CN",
    "lat": 38.91222,
    "long": 121.60222,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Dali",
    "country": "CN",
    "lat": 25.58474,
    "long": 100.21229,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Chuzhou",
    "country": "CN",
    "lat": 32.32194,
    "long": 118.29778,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Yangchun",
    "country": "CN",
    "lat": 22.16667,
    "long": 111.78333,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Chongqing",
    "country": "CN",
    "lat": 29.56278,
    "long": 106.55278,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Chizhou",
    "country": "CN",
    "lat": 30.66134,
    "long": 117.47783,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Chenzhou",
    "country": "CN",
    "lat": 25.8,
    "long": 113.03333,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Jiangyin",
    "country": "CN",
    "lat": 31.91102,
    "long": 120.26302,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Chengdu",
    "country": "CN",
    "lat": 30.66667,
    "long": 104.06667,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Chenghua",
    "country": "CN",
    "lat": 23.46132,
    "long": 116.77007,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Chaozhou",
    "country": "CN",
    "lat": 23.65396,
    "long": 116.62262,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Chaohu",
    "country": "CN",
    "lat": 31.6,
    "long": 117.86667,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Changzhou",
    "country": "CN",
    "lat": 31.77359,
    "long": 119.95401,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Changzhi",
    "country": "CN",
    "lat": 35.20889,
    "long": 111.73861,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Changsha",
    "country": "CN",
    "lat": 28.19874,
    "long": 112.97087,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Cangzhou",
    "country": "CN",
    "lat": 38.31667,
    "long": 116.86667,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Buhe",
    "country": "CN",
    "lat": 30.28757,
    "long": 112.22979,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Bozhou",
    "country": "CN",
    "lat": 33.87722,
    "long": 115.77028,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Boshan",
    "country": "CN",
    "lat": 36.48333,
    "long": 117.83333,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Binzhou",
    "country": "CN",
    "lat": 37.36667,
    "long": 118.01667,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Bengbu",
    "country": "CN",
    "lat": 32.94083,
    "long": 117.36083,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Beijing",
    "country": "CN",
    "lat": 39.9075,
    "long": 116.39723,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Beihai",
    "country": "CN",
    "lat": 21.48333,
    "long": 109.1,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Beibei",
    "country": "CN",
    "lat": 29.82739,
    "long": 106.43645,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Baoding",
    "country": "CN",
    "lat": 38.85111,
    "long": 115.49028,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Baiyin",
    "country": "CN",
    "lat": 36.54696,
    "long": 104.17023,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Shangyu",
    "country": "CN",
    "lat": 30.01556,
    "long": 120.87111,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Anshun",
    "country": "CN",
    "lat": 26.25,
    "long": 105.93333,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Anqiu",
    "country": "CN",
    "lat": 36.43417,
    "long": 119.1925,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Anqing",
    "country": "CN",
    "lat": 30.51365,
    "long": 117.04723,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Anbu",
    "country": "CN",
    "lat": 23.44895,
    "long": 116.68092,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Jiangyou",
    "country": "CN",
    "lat": 31.76667,
    "long": 104.71667,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Suzhou",
    "country": "CN",
    "lat": 31.30408,
    "long": 120.59538,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Zhongshan",
    "country": "CN",
    "lat": 21.31992,
    "long": 110.5723,
    "zone": "Asia/Urumqi"
  },
  {
    "name": "Lianghu",
    "country": "CN",
    "lat": 29.99152,
    "long": 120.89845,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Yueyang",
    "country": "CN",
    "lat": 29.37455,
    "long": 113.09481,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Zhaodong",
    "country": "CN",
    "lat": 46.06771,
    "long": 125.98263,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Zhangjiakou",
    "country": "CN",
    "lat": 40.81,
    "long": 114.87944,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Zalantun",
    "country": "CN",
    "lat": 48,
    "long": 122.71667,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Yushu",
    "country": "CN",
    "lat": 44.8,
    "long": 126.53333,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Yingkou",
    "country": "CN",
    "lat": 40.66482,
    "long": 122.22833,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Yichun",
    "country": "CN",
    "lat": 47.72143,
    "long": 128.87529,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Yanji",
    "country": "CN",
    "lat": 42.9075,
    "long": 129.50778,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Yakeshi",
    "country": "CN",
    "lat": 49.28333,
    "long": 120.73333,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Zhangjiakou Shi Xuanhua Qu",
    "country": "CN",
    "lat": 40.61028,
    "long": 115.04472,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Xilin Hot",
    "country": "CN",
    "lat": 43.96667,
    "long": 116.03333,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Ulanhot",
    "country": "CN",
    "lat": 46.08333,
    "long": 122.08333,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Tongliao",
    "country": "CN",
    "lat": 43.6125,
    "long": 122.26528,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Tieling",
    "country": "CN",
    "lat": 42.29306,
    "long": 123.84139,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Tieli",
    "country": "CN",
    "lat": 46.98043,
    "long": 128.04497,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Guangming",
    "country": "CN",
    "lat": 45.33333,
    "long": 122.78333,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Sujiatun",
    "country": "CN",
    "lat": 41.65917,
    "long": 123.33917,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Suihua",
    "country": "CN",
    "lat": 46.63954,
    "long": 126.99508,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Siping",
    "country": "CN",
    "lat": 43.16143,
    "long": 124.37785,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Shunyi",
    "country": "CN",
    "lat": 40.12175,
    "long": 116.64783,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Shuangyashan",
    "country": "CN",
    "lat": 46.63611,
    "long": 131.15389,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Shuangcheng",
    "country": "CN",
    "lat": 45.35,
    "long": 126.28333,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Shenyang",
    "country": "CN",
    "lat": 41.79222,
    "long": 123.43278,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Shanhaiguan",
    "country": "CN",
    "lat": 40.0025,
    "long": 119.74889,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Fendou",
    "country": "CN",
    "lat": 46.64142,
    "long": 124.86283,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Taihe",
    "country": "CN",
    "lat": 45.76195,
    "long": 130.85131,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Qiqihar",
    "country": "CN",
    "lat": 47.34088,
    "long": 123.96045,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Qianguo",
    "country": "CN",
    "lat": 45.11711,
    "long": 124.85676,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Panshan",
    "country": "CN",
    "lat": 41.18806,
    "long": 122.04944,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Nehe",
    "country": "CN",
    "lat": 48.48333,
    "long": 124.83333,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Nanpiao",
    "country": "CN",
    "lat": 41.09822,
    "long": 120.74792,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Lianhe",
    "country": "CN",
    "lat": 47.13333,
    "long": 129.27426,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Mudanjiang",
    "country": "CN",
    "lat": 44.58333,
    "long": 129.6,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Longjing",
    "country": "CN",
    "lat": 42.77139,
    "long": 129.42333,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Longjiang",
    "country": "CN",
    "lat": 47.33072,
    "long": 123.17816,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Longfeng",
    "country": "CN",
    "lat": 46.53168,
    "long": 125.1038,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Liaoyuan",
    "country": "CN",
    "lat": 42.90361,
    "long": 125.13583,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Liaoyang",
    "country": "CN",
    "lat": 41.27194,
    "long": 123.17306,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Kaiyuan",
    "country": "CN",
    "lat": 42.53306,
    "long": 124.04028,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Jixi",
    "country": "CN",
    "lat": 45.30109,
    "long": 130.95718,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Jiutai",
    "country": "CN",
    "lat": 44.1525,
    "long": 125.83278,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Jiupu",
    "country": "CN",
    "lat": 41.06667,
    "long": 122.95,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Jishu",
    "country": "CN",
    "lat": 44.31667,
    "long": 126.8,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Jinzhou",
    "country": "CN",
    "lat": 41.10778,
    "long": 121.14167,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Lianshan",
    "country": "CN",
    "lat": 40.76432,
    "long": 120.85327,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Jining",
    "country": "CN",
    "lat": 41.0275,
    "long": 113.10583,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Jilin",
    "country": "CN",
    "lat": 43.85083,
    "long": 126.56028,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Minzhu",
    "country": "CN",
    "lat": 43.72145,
    "long": 127.33401,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Jiamusi",
    "country": "CN",
    "lat": 46.79927,
    "long": 130.31633,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Jalai Nur",
    "country": "CN",
    "lat": 49.45,
    "long": 117.7,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Jagdaqi",
    "country": "CN",
    "lat": 50.41667,
    "long": 124.11667,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Hulan Ergi",
    "country": "CN",
    "lat": 47.20417,
    "long": 123.63333,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Hulan",
    "country": "CN",
    "lat": 45.98333,
    "long": 126.6,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Huadian",
    "country": "CN",
    "lat": 42.96333,
    "long": 126.74778,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Honggang",
    "country": "CN",
    "lat": 46.40124,
    "long": 124.88322,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Hohhot",
    "country": "CN",
    "lat": 40.81056,
    "long": 111.65222,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Fendou",
    "country": "CN",
    "lat": 45.21235,
    "long": 130.90254,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Heihe",
    "country": "CN",
    "lat": 50.24413,
    "long": 127.49016,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Hegang",
    "country": "CN",
    "lat": 47.35118,
    "long": 130.30012,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Harbin",
    "country": "CN",
    "lat": 45.75,
    "long": 126.65,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Hailun",
    "country": "CN",
    "lat": 47.4565,
    "long": 126.95368,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Hailar",
    "country": "CN",
    "lat": 49.2,
    "long": 119.7,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Haicheng",
    "country": "CN",
    "lat": 40.85158,
    "long": 122.74754,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Gongzhuling",
    "country": "CN",
    "lat": 43.50075,
    "long": 124.81979,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Fuyu",
    "country": "CN",
    "lat": 45.18333,
    "long": 124.81667,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Fuxin",
    "country": "CN",
    "lat": 42.01556,
    "long": 121.65889,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Fushun",
    "country": "CN",
    "lat": 41.85583,
    "long": 123.92333,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Fengcheng",
    "country": "CN",
    "lat": 40.45361,
    "long": 124.07167,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Dunhua",
    "country": "CN",
    "lat": 43.3725,
    "long": 128.2425,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Dongling",
    "country": "CN",
    "lat": 41.81444,
    "long": 123.57583,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Dongxing",
    "country": "CN",
    "lat": 45.36088,
    "long": 130.78679,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Dehui",
    "country": "CN",
    "lat": 44.53333,
    "long": 125.7,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Datong",
    "country": "CN",
    "lat": 40.09361,
    "long": 113.29139,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Daqing",
    "country": "CN",
    "lat": 46.58333,
    "long": 125,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Dandong",
    "country": "CN",
    "lat": 40.12917,
    "long": 124.39472,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Chifeng",
    "country": "CN",
    "lat": 42.26833,
    "long": 118.96361,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Chengde",
    "country": "CN",
    "lat": 40.9725,
    "long": 117.93611,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Chaoyang",
    "country": "CN",
    "lat": 41.57028,
    "long": 120.45861,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Changchun",
    "country": "CN",
    "lat": 43.88,
    "long": 125.32278,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Benxi",
    "country": "CN",
    "lat": 41.28861,
    "long": 123.765,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Beipiao",
    "country": "CN",
    "lat": 41.79194,
    "long": 120.77917,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Bei’an",
    "country": "CN",
    "lat": 48.26667,
    "long": 126.6,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Baotou",
    "country": "CN",
    "lat": 40.65222,
    "long": 109.82222,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Baoshan",
    "country": "CN",
    "lat": 46.55861,
    "long": 131.42444,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Baicheng",
    "country": "CN",
    "lat": 45.60746,
    "long": 122.82076,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Baishan",
    "country": "CN",
    "lat": 41.93853,
    "long": 126.41965,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Anshan",
    "country": "CN",
    "lat": 41.12361,
    "long": 122.99,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Anda",
    "country": "CN",
    "lat": 46.40202,
    "long": 125.31454,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Acheng",
    "country": "CN",
    "lat": 45.54545,
    "long": 126.97703,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Changshu City",
    "country": "CN",
    "lat": 31.64615,
    "long": 120.74221,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Jiashan",
    "country": "CN",
    "lat": 30.84918,
    "long": 120.92583,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Fenghuang",
    "country": "CN",
    "lat": 27.93557,
    "long": 109.59961,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Zhu Cheng City",
    "country": "CN",
    "lat": 35.99502,
    "long": 119.40259,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Shangri-La",
    "country": "CN",
    "lat": 27.82511,
    "long": 99.70779,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Ordos",
    "country": "CN",
    "lat": 39.6086,
    "long": 109.78157,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Wenshan City",
    "country": "CN",
    "lat": 23.36306,
    "long": 104.25047,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Liupanshui",
    "country": "CN",
    "lat": 26.59444,
    "long": 104.83333,
    "zone": "Asia/Shanghai"
  },
  {
    "name": "Villavicencio",
    "country": "CO",
    "lat": 4.142,
    "long": -73.62664,
    "zone": "America/Bogota"
  },
  {
    "name": "Valledupar",
    "country": "CO",
    "lat": 10.46314,
    "long": -73.25322,
    "zone": "America/Bogota"
  },
  {
    "name": "Tunja",
    "country": "CO",
    "lat": 5.53528,
    "long": -73.36778,
    "zone": "America/Bogota"
  },
  {
    "name": "Tuluá",
    "country": "CO",
    "lat": 4.08466,
    "long": -76.19536,
    "zone": "America/Bogota"
  },
  {
    "name": "Soledad",
    "country": "CO",
    "lat": 10.91843,
    "long": -74.76459,
    "zone": "America/Bogota"
  },
  {
    "name": "Sogamoso",
    "country": "CO",
    "lat": 5.71434,
    "long": -72.93391,
    "zone": "America/Bogota"
  },
  {
    "name": "Soacha",
    "country": "CO",
    "lat": 4.57937,
    "long": -74.21682,
    "zone": "America/Bogota"
  },
  {
    "name": "Sincelejo",
    "country": "CO",
    "lat": 9.30472,
    "long": -75.39778,
    "zone": "America/Bogota"
  },
  {
    "name": "Santa Marta",
    "country": "CO",
    "lat": 11.24079,
    "long": -74.19904,
    "zone": "America/Bogota"
  },
  {
    "name": "Popayán",
    "country": "CO",
    "lat": 2.43823,
    "long": -76.61316,
    "zone": "America/Bogota"
  },
  {
    "name": "Pereira",
    "country": "CO",
    "lat": 4.81333,
    "long": -75.69611,
    "zone": "America/Bogota"
  },
  {
    "name": "Pasto",
    "country": "CO",
    "lat": 1.21361,
    "long": -77.28111,
    "zone": "America/Bogota"
  },
  {
    "name": "Palmira",
    "country": "CO",
    "lat": 3.53944,
    "long": -76.30361,
    "zone": "America/Bogota"
  },
  {
    "name": "Neiva",
    "country": "CO",
    "lat": 2.9273,
    "long": -75.28189,
    "zone": "America/Bogota"
  },
  {
    "name": "Montería",
    "country": "CO",
    "lat": 8.74798,
    "long": -75.88143,
    "zone": "America/Bogota"
  },
  {
    "name": "Medellín",
    "country": "CO",
    "lat": 6.25184,
    "long": -75.56359,
    "zone": "America/Bogota"
  },
  {
    "name": "Manizales",
    "country": "CO",
    "lat": 5.06889,
    "long": -75.51738,
    "zone": "America/Bogota"
  },
  {
    "name": "Malambo",
    "country": "CO",
    "lat": 10.85953,
    "long": -74.77386,
    "zone": "America/Bogota"
  },
  {
    "name": "Maicao",
    "country": "CO",
    "lat": 11.38321,
    "long": -72.24321,
    "zone": "America/Bogota"
  },
  {
    "name": "Magangué",
    "country": "CO",
    "lat": 9.24202,
    "long": -74.75467,
    "zone": "America/Bogota"
  },
  {
    "name": "Itagüí",
    "country": "CO",
    "lat": 6.18461,
    "long": -75.59913,
    "zone": "America/Bogota"
  },
  {
    "name": "Ibagué",
    "country": "CO",
    "lat": 4.43889,
    "long": -75.23222,
    "zone": "America/Bogota"
  },
  {
    "name": "Girón",
    "country": "CO",
    "lat": 7.0682,
    "long": -73.16981,
    "zone": "America/Bogota"
  },
  {
    "name": "Girardot City",
    "country": "CO",
    "lat": 4.30079,
    "long": -74.80754,
    "zone": "America/Bogota"
  },
  {
    "name": "Floridablanca",
    "country": "CO",
    "lat": 7.06222,
    "long": -73.08644,
    "zone": "America/Bogota"
  },
  {
    "name": "Florencia",
    "country": "CO",
    "lat": 1.61438,
    "long": -75.60623,
    "zone": "America/Bogota"
  },
  {
    "name": "Envigado",
    "country": "CO",
    "lat": 6.17591,
    "long": -75.59174,
    "zone": "America/Bogota"
  },
  {
    "name": "Dos Quebradas",
    "country": "CO",
    "lat": 4.83916,
    "long": -75.66727,
    "zone": "America/Bogota"
  },
  {
    "name": "Cúcuta",
    "country": "CO",
    "lat": 7.89391,
    "long": -72.50782,
    "zone": "America/Bogota"
  },
  {
    "name": "Cartago",
    "country": "CO",
    "lat": 4.74639,
    "long": -75.91167,
    "zone": "America/Bogota"
  },
  {
    "name": "Cartagena",
    "country": "CO",
    "lat": 10.39972,
    "long": -75.51444,
    "zone": "America/Bogota"
  },
  {
    "name": "Cali",
    "country": "CO",
    "lat": 3.43722,
    "long": -76.5225,
    "zone": "America/Bogota"
  },
  {
    "name": "Buga",
    "country": "CO",
    "lat": 3.90089,
    "long": -76.29783,
    "zone": "America/Bogota"
  },
  {
    "name": "Buenaventura",
    "country": "CO",
    "lat": 3.8801,
    "long": -77.03116,
    "zone": "America/Bogota"
  },
  {
    "name": "Bucaramanga",
    "country": "CO",
    "lat": 7.12539,
    "long": -73.1198,
    "zone": "America/Bogota"
  },
  {
    "name": "Bogotá",
    "country": "CO",
    "lat": 4.60971,
    "long": -74.08175,
    "zone": "America/Bogota"
  },
  {
    "name": "Bello",
    "country": "CO",
    "lat": 6.33732,
    "long": -75.55795,
    "zone": "America/Bogota"
  },
  {
    "name": "Barranquilla",
    "country": "CO",
    "lat": 10.96854,
    "long": -74.78132,
    "zone": "America/Bogota"
  },
  {
    "name": "Barrancabermeja",
    "country": "CO",
    "lat": 7.06528,
    "long": -73.85472,
    "zone": "America/Bogota"
  },
  {
    "name": "Armenia",
    "country": "CO",
    "lat": 4.53389,
    "long": -75.68111,
    "zone": "America/Bogota"
  },
  {
    "name": "San José",
    "country": "CR",
    "lat": 9.93333,
    "long": -84.08333,
    "zone": "America/Costa_Rica"
  },
  {
    "name": "Santiago de Cuba",
    "country": "CU",
    "lat": 20.02472,
    "long": -75.82194,
    "zone": "America/Havana"
  },
  {
    "name": "Santa Clara",
    "country": "CU",
    "lat": 22.4,
    "long": -79.96667,
    "zone": "America/Havana"
  },
  {
    "name": "San Miguel del Padrón",
    "country": "CU",
    "lat": 23.06639,
    "long": -82.29472,
    "zone": "America/Havana"
  },
  {
    "name": "Sancti Spíritus",
    "country": "CU",
    "lat": 21.92972,
    "long": -79.4425,
    "zone": "America/Havana"
  },
  {
    "name": "Pinar del Río",
    "country": "CU",
    "lat": 22.4175,
    "long": -83.69806,
    "zone": "America/Havana"
  },
  {
    "name": "Palma Soriano",
    "country": "CU",
    "lat": 20.21238,
    "long": -75.99843,
    "zone": "America/Havana"
  },
  {
    "name": "Matanzas",
    "country": "CU",
    "lat": 23.04111,
    "long": -81.5775,
    "zone": "America/Havana"
  },
  {
    "name": "Manzanillo",
    "country": "CU",
    "lat": 20.34333,
    "long": -77.11667,
    "zone": "America/Havana"
  },
  {
    "name": "Las Tunas",
    "country": "CU",
    "lat": 20.96167,
    "long": -76.95111,
    "zone": "America/Havana"
  },
  {
    "name": "Havana",
    "country": "CU",
    "lat": 23.13302,
    "long": -82.38304,
    "zone": "America/Havana"
  },
  {
    "name": "Holguín",
    "country": "CU",
    "lat": 20.88722,
    "long": -76.26306,
    "zone": "America/Havana"
  },
  {
    "name": "Guantánamo",
    "country": "CU",
    "lat": 20.14444,
    "long": -75.20917,
    "zone": "America/Havana"
  },
  {
    "name": "Guanabacoa",
    "country": "CU",
    "lat": 23.12389,
    "long": -82.30028,
    "zone": "America/Havana"
  },
  {
    "name": "Cienfuegos",
    "country": "CU",
    "lat": 22.14957,
    "long": -80.44662,
    "zone": "America/Havana"
  },
  {
    "name": "Ciego de Ávila",
    "country": "CU",
    "lat": 21.84,
    "long": -78.76194,
    "zone": "America/Havana"
  },
  {
    "name": "Cerro",
    "country": "CU",
    "lat": 23.10861,
    "long": -82.37778,
    "zone": "America/Havana"
  },
  {
    "name": "Camagüey",
    "country": "CU",
    "lat": 21.38083,
    "long": -77.91694,
    "zone": "America/Havana"
  },
  {
    "name": "Bayamo",
    "country": "CU",
    "lat": 20.37917,
    "long": -76.64333,
    "zone": "America/Havana"
  },
  {
    "name": "Arroyo Naranjo",
    "country": "CU",
    "lat": 23.03611,
    "long": -82.37167,
    "zone": "America/Havana"
  },
  {
    "name": "Habana del Este",
    "country": "CU",
    "lat": 23.15917,
    "long": -82.33056,
    "zone": "America/Havana"
  },
  {
    "name": "Centro Habana",
    "country": "CU",
    "lat": 23.13833,
    "long": -82.36417,
    "zone": "America/Havana"
  },
  {
    "name": "Arroyo Naranjo",
    "country": "CU",
    "lat": 23.0144,
    "long": -82.3031,
    "zone": "America/Havana"
  },
  {
    "name": "Boyeros",
    "country": "CU",
    "lat": 23.0072,
    "long": -82.4017,
    "zone": "America/Havana"
  },
  {
    "name": "Diez de Octubre",
    "country": "CU",
    "lat": 23.0881,
    "long": -82.3597,
    "zone": "America/Havana"
  },
  {
    "name": "Praia",
    "country": "CV",
    "lat": 14.93152,
    "long": -23.51254,
    "zone": "Atlantic/Cape_Verde"
  },
  {
    "name": "Willemstad",
    "country": "CW",
    "lat": 12.1084,
    "long": -68.93354,
    "zone": "America/Curacao"
  },
  {
    "name": "Nicosia",
    "country": "CY",
    "lat": 35.17531,
    "long": 33.3642,
    "zone": "Asia/Nicosia"
  },
  {
    "name": "Limassol",
    "country": "CY",
    "lat": 34.68406,
    "long": 33.03794,
    "zone": "Asia/Nicosia"
  },
  {
    "name": "Prague",
    "country": "CZ",
    "lat": 50.08804,
    "long": 14.42076,
    "zone": "Europe/Prague"
  },
  {
    "name": "Pilsen",
    "country": "CZ",
    "lat": 49.74747,
    "long": 13.37759,
    "zone": "Europe/Prague"
  },
  {
    "name": "Ostrava",
    "country": "CZ",
    "lat": 49.83465,
    "long": 18.28204,
    "zone": "Europe/Prague"
  },
  {
    "name": "Olomouc",
    "country": "CZ",
    "lat": 49.59552,
    "long": 17.25175,
    "zone": "Europe/Prague"
  },
  {
    "name": "Brno",
    "country": "CZ",
    "lat": 49.19522,
    "long": 16.60796,
    "zone": "Europe/Prague"
  },
  {
    "name": "Würzburg",
    "country": "DE",
    "lat": 49.79391,
    "long": 9.95121,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Wuppertal",
    "country": "DE",
    "lat": 51.27027,
    "long": 7.16755,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Wolfsburg",
    "country": "DE",
    "lat": 52.42452,
    "long": 10.7815,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Witten",
    "country": "DE",
    "lat": 51.44362,
    "long": 7.35258,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Wiesbaden",
    "country": "DE",
    "lat": 50.08258,
    "long": 8.24932,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Ulm",
    "country": "DE",
    "lat": 48.39841,
    "long": 9.99155,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Trier",
    "country": "DE",
    "lat": 49.75565,
    "long": 6.63935,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Stuttgart",
    "country": "DE",
    "lat": 48.78232,
    "long": 9.17702,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Solingen",
    "country": "DE",
    "lat": 51.17343,
    "long": 7.0845,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Siegen",
    "country": "DE",
    "lat": 50.87481,
    "long": 8.02431,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Schöneberg",
    "country": "DE",
    "lat": 52.46667,
    "long": 13.35,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Saarbrücken",
    "country": "DE",
    "lat": 49.2354,
    "long": 6.98165,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Rostock",
    "country": "DE",
    "lat": 54.0887,
    "long": 12.14049,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Reutlingen",
    "country": "DE",
    "lat": 48.49144,
    "long": 9.20427,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Remscheid",
    "country": "DE",
    "lat": 51.17983,
    "long": 7.1925,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Regensburg",
    "country": "DE",
    "lat": 49.03451,
    "long": 12.11923,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Recklinghausen",
    "country": "DE",
    "lat": 51.61379,
    "long": 7.19738,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Prenzlauer Berg",
    "country": "DE",
    "lat": 52.53878,
    "long": 13.42443,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Potsdam",
    "country": "DE",
    "lat": 52.39886,
    "long": 13.06566,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Pforzheim",
    "country": "DE",
    "lat": 48.88436,
    "long": 8.69892,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Paderborn",
    "country": "DE",
    "lat": 51.71905,
    "long": 8.75439,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Osnabrück",
    "country": "DE",
    "lat": 52.27264,
    "long": 8.0498,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Oldenburg",
    "country": "DE",
    "lat": 53.14118,
    "long": 8.21467,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Offenbach",
    "country": "DE",
    "lat": 50.10061,
    "long": 8.76647,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Oberhausen",
    "country": "DE",
    "lat": 51.47311,
    "long": 6.88074,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Nürnberg",
    "country": "DE",
    "lat": 49.45421,
    "long": 11.07752,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Nippes",
    "country": "DE",
    "lat": 50.96545,
    "long": 6.95314,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Neue Neustadt",
    "country": "DE",
    "lat": 52.15,
    "long": 11.63333,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Neuss",
    "country": "DE",
    "lat": 51.19807,
    "long": 6.68504,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Münster",
    "country": "DE",
    "lat": 51.96236,
    "long": 7.62571,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Munich",
    "country": "DE",
    "lat": 48.13743,
    "long": 11.57549,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Mülheim (Ruhr)",
    "country": "DE",
    "lat": 51.43333,
    "long": 6.88333,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Mönchengladbach",
    "country": "DE",
    "lat": 51.18539,
    "long": 6.44172,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Moers",
    "country": "DE",
    "lat": 51.45342,
    "long": 6.6326,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Marzahn",
    "country": "DE",
    "lat": 52.54525,
    "long": 13.56983,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Mannheim",
    "country": "DE",
    "lat": 49.49671,
    "long": 8.47955,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Mainz",
    "country": "DE",
    "lat": 49.98419,
    "long": 8.2791,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Magdeburg",
    "country": "DE",
    "lat": 52.12773,
    "long": 11.62916,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Ludwigshafen am Rhein",
    "country": "DE",
    "lat": 49.48121,
    "long": 8.44641,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Lübeck",
    "country": "DE",
    "lat": 53.86893,
    "long": 10.68729,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Leverkusen",
    "country": "DE",
    "lat": 51.0303,
    "long": 6.98432,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Leipzig",
    "country": "DE",
    "lat": 51.33962,
    "long": 12.37129,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Kreuzberg",
    "country": "DE",
    "lat": 52.49973,
    "long": 13.40338,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Krefeld",
    "country": "DE",
    "lat": 51.33921,
    "long": 6.58615,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Köln",
    "country": "DE",
    "lat": 50.93333,
    "long": 6.95,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Koblenz",
    "country": "DE",
    "lat": 50.35357,
    "long": 7.57883,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Kiel",
    "country": "DE",
    "lat": 54.32133,
    "long": 10.13489,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Kassel",
    "country": "DE",
    "lat": 51.31667,
    "long": 9.5,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Karlsruhe",
    "country": "DE",
    "lat": 49.00937,
    "long": 8.40444,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Jena",
    "country": "DE",
    "lat": 50.92878,
    "long": 11.5899,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Ingolstadt",
    "country": "DE",
    "lat": 48.76508,
    "long": 11.42372,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Hildesheim",
    "country": "DE",
    "lat": 52.15077,
    "long": 9.95112,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Herne",
    "country": "DE",
    "lat": 51.5388,
    "long": 7.22572,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Heilbronn",
    "country": "DE",
    "lat": 49.13995,
    "long": 9.22054,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Heidelberg",
    "country": "DE",
    "lat": 49.40768,
    "long": 8.69079,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Harburg",
    "country": "DE",
    "lat": 53.46057,
    "long": 9.98388,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Hannover",
    "country": "DE",
    "lat": 52.37052,
    "long": 9.73322,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Hamm",
    "country": "DE",
    "lat": 51.68033,
    "long": 7.82089,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Wandsbek",
    "country": "DE",
    "lat": 53.56667,
    "long": 10.1,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Marienthal",
    "country": "DE",
    "lat": 53.56667,
    "long": 10.08333,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Hamburg-Mitte",
    "country": "DE",
    "lat": 53.55,
    "long": 10.01667,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Eimsbüttel",
    "country": "DE",
    "lat": 53.56667,
    "long": 9.98333,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Altona",
    "country": "DE",
    "lat": 53.55,
    "long": 9.93333,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Hamburg",
    "country": "DE",
    "lat": 53.57532,
    "long": 10.01534,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Halle (Saale)",
    "country": "DE",
    "lat": 51.5,
    "long": 12,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Hagen",
    "country": "DE",
    "lat": 51.36081,
    "long": 7.47168,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Göttingen",
    "country": "DE",
    "lat": 51.53443,
    "long": 9.93228,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Gera",
    "country": "DE",
    "lat": 50.88029,
    "long": 12.08187,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Gelsenkirchen",
    "country": "DE",
    "lat": 51.5075,
    "long": 7.12283,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Fürth",
    "country": "DE",
    "lat": 49.47593,
    "long": 10.98856,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Friedrichshain",
    "country": "DE",
    "lat": 52.51559,
    "long": 13.45482,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Freiburg",
    "country": "DE",
    "lat": 47.9959,
    "long": 7.85222,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Frankfurt am Main",
    "country": "DE",
    "lat": 50.11552,
    "long": 8.68417,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Essen",
    "country": "DE",
    "lat": 51.45657,
    "long": 7.01228,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Erlangen",
    "country": "DE",
    "lat": 49.59099,
    "long": 11.00783,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Erfurt",
    "country": "DE",
    "lat": 50.9787,
    "long": 11.03283,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Düsseldorf",
    "country": "DE",
    "lat": 51.22172,
    "long": 6.77616,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Duisburg",
    "country": "DE",
    "lat": 51.43247,
    "long": 6.76516,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Dresden",
    "country": "DE",
    "lat": 51.05089,
    "long": 13.73832,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Dortmund",
    "country": "DE",
    "lat": 51.51494,
    "long": 7.466,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Darmstadt",
    "country": "DE",
    "lat": 49.87167,
    "long": 8.65027,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Chemnitz",
    "country": "DE",
    "lat": 50.8357,
    "long": 12.92922,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Charlottenburg",
    "country": "DE",
    "lat": 52.51667,
    "long": 13.28333,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Bremerhaven",
    "country": "DE",
    "lat": 53.55021,
    "long": 8.57673,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Bremen",
    "country": "DE",
    "lat": 53.07516,
    "long": 8.80777,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Braunschweig",
    "country": "DE",
    "lat": 52.26594,
    "long": 10.52673,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Bottrop",
    "country": "DE",
    "lat": 51.52392,
    "long": 6.9285,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Bonn",
    "country": "DE",
    "lat": 50.73438,
    "long": 7.09549,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Bochum",
    "country": "DE",
    "lat": 51.48165,
    "long": 7.21648,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Bielefeld",
    "country": "DE",
    "lat": 52.03333,
    "long": 8.53333,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Berlin",
    "country": "DE",
    "lat": 52.52437,
    "long": 13.41053,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Bergisch Gladbach",
    "country": "DE",
    "lat": 50.9856,
    "long": 7.13298,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Augsburg",
    "country": "DE",
    "lat": 48.37154,
    "long": 10.89851,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Aachen",
    "country": "DE",
    "lat": 50.77664,
    "long": 6.08342,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Bochum-Hordel",
    "country": "DE",
    "lat": 51.50168,
    "long": 7.1756,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Halle Neustadt",
    "country": "DE",
    "lat": 51.47924,
    "long": 11.91605,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Bergedorf",
    "country": "DE",
    "lat": 53.48462,
    "long": 10.22904,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Berlin Schöneberg",
    "country": "DE",
    "lat": 52.48388,
    "long": 13.3477,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Hamburg-Nord",
    "country": "DE",
    "lat": 53.58935,
    "long": 9.984,
    "zone": "Europe/Berlin"
  },
  {
    "name": "Djibouti",
    "country": "DJ",
    "lat": 11.58901,
    "long": 43.14503,
    "zone": "Africa/Djibouti"
  },
  {
    "name": "Odense",
    "country": "DK",
    "lat": 55.39594,
    "long": 10.38831,
    "zone": "Europe/Copenhagen"
  },
  {
    "name": "Copenhagen",
    "country": "DK",
    "lat": 55.67594,
    "long": 12.56553,
    "zone": "Europe/Copenhagen"
  },
  {
    "name": "Århus",
    "country": "DK",
    "lat": 56.15674,
    "long": 10.21076,
    "zone": "Europe/Copenhagen"
  },
  {
    "name": "Aalborg",
    "country": "DK",
    "lat": 57.048,
    "long": 9.9187,
    "zone": "Europe/Copenhagen"
  },
  {
    "name": "Santo Domingo",
    "country": "DO",
    "lat": 18.50012,
    "long": -69.98857,
    "zone": "America/Santo_Domingo"
  },
  {
    "name": "Santiago de los Caballeros",
    "country": "DO",
    "lat": 19.4517,
    "long": -70.69703,
    "zone": "America/Santo_Domingo"
  },
  {
    "name": "San Pedro de Macorís",
    "country": "DO",
    "lat": 18.46156,
    "long": -69.29718,
    "zone": "America/Santo_Domingo"
  },
  {
    "name": "San Francisco de Macorís",
    "country": "DO",
    "lat": 19.30099,
    "long": -70.25259,
    "zone": "America/Santo_Domingo"
  },
  {
    "name": "Puerto Plata",
    "country": "DO",
    "lat": 19.79344,
    "long": -70.6884,
    "zone": "America/Santo_Domingo"
  },
  {
    "name": "Salvaleón de Higüey",
    "country": "DO",
    "lat": 18.61501,
    "long": -68.70798,
    "zone": "America/Santo_Domingo"
  },
  {
    "name": "Punta Cana",
    "country": "DO",
    "lat": 18.58182,
    "long": -68.40431,
    "zone": "America/Santo_Domingo"
  },
  {
    "name": "La Romana",
    "country": "DO",
    "lat": 18.42733,
    "long": -68.97285,
    "zone": "America/Santo_Domingo"
  },
  {
    "name": "Concepción de La Vega",
    "country": "DO",
    "lat": 19.22207,
    "long": -70.52956,
    "zone": "America/Santo_Domingo"
  },
  {
    "name": "San Cristóbal",
    "country": "DO",
    "lat": 18.41667,
    "long": -70.1,
    "zone": "America/Santo_Domingo"
  },
  {
    "name": "Bella Vista",
    "country": "DO",
    "lat": 18.45539,
    "long": -69.9454,
    "zone": "America/Santo_Domingo"
  },
  {
    "name": "Santo Domingo Oeste",
    "country": "DO",
    "lat": 18.5,
    "long": -70,
    "zone": "America/Santo_Domingo"
  },
  {
    "name": "Boumerdas",
    "country": "DZ",
    "lat": 36.76639,
    "long": 3.47717,
    "zone": "Africa/Algiers"
  },
  {
    "name": "Tlemcen",
    "country": "DZ",
    "lat": 34.87833,
    "long": -1.315,
    "zone": "Africa/Algiers"
  },
  {
    "name": "Tizi Ouzou",
    "country": "DZ",
    "lat": 36.71182,
    "long": 4.04591,
    "zone": "Africa/Algiers"
  },
  {
    "name": "Tiaret",
    "country": "DZ",
    "lat": 35.37103,
    "long": 1.31699,
    "zone": "Africa/Algiers"
  },
  {
    "name": "Tébessa",
    "country": "DZ",
    "lat": 35.40417,
    "long": 8.12417,
    "zone": "Africa/Algiers"
  },
  {
    "name": "Souk Ahras",
    "country": "DZ",
    "lat": 36.28639,
    "long": 7.95111,
    "zone": "Africa/Algiers"
  },
  {
    "name": "Skikda",
    "country": "DZ",
    "lat": 36.87617,
    "long": 6.90921,
    "zone": "Africa/Algiers"
  },
  {
    "name": "Sidi Bel Abbès",
    "country": "DZ",
    "lat": 35.18994,
    "long": -0.63085,
    "zone": "Africa/Algiers"
  },
  {
    "name": "Sétif",
    "country": "DZ",
    "lat": 36.19112,
    "long": 5.41373,
    "zone": "Africa/Algiers"
  },
  {
    "name": "Saïda",
    "country": "DZ",
    "lat": 34.83033,
    "long": 0.15171,
    "zone": "Africa/Algiers"
  },
  {
    "name": "Relizane",
    "country": "DZ",
    "lat": 35.73734,
    "long": 0.55599,
    "zone": "Africa/Algiers"
  },
  {
    "name": "Oum el Bouaghi",
    "country": "DZ",
    "lat": 35.87541,
    "long": 7.11353,
    "zone": "Africa/Algiers"
  },
  {
    "name": "Ouargla",
    "country": "DZ",
    "lat": 31.94932,
    "long": 5.32502,
    "zone": "Africa/Algiers"
  },
  {
    "name": "Oran",
    "country": "DZ",
    "lat": 35.69111,
    "long": -0.64167,
    "zone": "Africa/Algiers"
  },
  {
    "name": "Mostaganem",
    "country": "DZ",
    "lat": 35.93115,
    "long": 0.08918,
    "zone": "Africa/Algiers"
  },
  {
    "name": "Médéa",
    "country": "DZ",
    "lat": 36.26417,
    "long": 2.75393,
    "zone": "Africa/Algiers"
  },
  {
    "name": "Mascara",
    "country": "DZ",
    "lat": 35.39664,
    "long": 0.14027,
    "zone": "Africa/Algiers"
  },
  {
    "name": "Laghouat",
    "country": "DZ",
    "lat": 33.8,
    "long": 2.86514,
    "zone": "Africa/Algiers"
  },
  {
    "name": "Khenchela",
    "country": "DZ",
    "lat": 35.43583,
    "long": 7.14333,
    "zone": "Africa/Algiers"
  },
  {
    "name": "Jijel",
    "country": "DZ",
    "lat": 36.82055,
    "long": 5.76671,
    "zone": "Africa/Algiers"
  },
  {
    "name": "Guelma",
    "country": "DZ",
    "lat": 36.46214,
    "long": 7.42608,
    "zone": "Africa/Algiers"
  },
  {
    "name": "El Oued",
    "country": "DZ",
    "lat": 33.35608,
    "long": 6.86319,
    "zone": "Africa/Algiers"
  },
  {
    "name": "El Eulma",
    "country": "DZ",
    "lat": 36.15281,
    "long": 5.69016,
    "zone": "Africa/Algiers"
  },
  {
    "name": "Chlef",
    "country": "DZ",
    "lat": 36.16525,
    "long": 1.33452,
    "zone": "Africa/Algiers"
  },
  {
    "name": "El Achir",
    "country": "DZ",
    "lat": 36.06386,
    "long": 4.62744,
    "zone": "Africa/Algiers"
  },
  {
    "name": "Ech Chettia",
    "country": "DZ",
    "lat": 36.19591,
    "long": 1.25537,
    "zone": "Africa/Algiers"
  },
  {
    "name": "Djelfa",
    "country": "DZ",
    "lat": 34.67279,
    "long": 3.263,
    "zone": "Africa/Algiers"
  },
  {
    "name": "Constantine",
    "country": "DZ",
    "lat": 36.365,
    "long": 6.61472,
    "zone": "Africa/Algiers"
  },
  {
    "name": "Bordj el Kiffan",
    "country": "DZ",
    "lat": 36.74871,
    "long": 3.19249,
    "zone": "Africa/Algiers"
  },
  {
    "name": "Bordj Bou Arreridj",
    "country": "DZ",
    "lat": 36.07321,
    "long": 4.76108,
    "zone": "Africa/Algiers"
  },
  {
    "name": "Blida",
    "country": "DZ",
    "lat": 36.47004,
    "long": 2.8277,
    "zone": "Africa/Algiers"
  },
  {
    "name": "Biskra",
    "country": "DZ",
    "lat": 34.85038,
    "long": 5.72805,
    "zone": "Africa/Algiers"
  },
  {
    "name": "Bejaïa",
    "country": "DZ",
    "lat": 36.75587,
    "long": 5.08433,
    "zone": "Africa/Algiers"
  },
  {
    "name": "Béchar",
    "country": "DZ",
    "lat": 31.61667,
    "long": -2.21667,
    "zone": "Africa/Algiers"
  },
  {
    "name": "Batna",
    "country": "DZ",
    "lat": 35.55597,
    "long": 6.17414,
    "zone": "Africa/Algiers"
  },
  {
    "name": "Baraki",
    "country": "DZ",
    "lat": 36.66655,
    "long": 3.09606,
    "zone": "Africa/Algiers"
  },
  {
    "name": "Bab Ezzouar",
    "country": "DZ",
    "lat": 36.72615,
    "long": 3.18291,
    "zone": "Africa/Algiers"
  },
  {
    "name": "Annaba",
    "country": "DZ",
    "lat": 36.9,
    "long": 7.76667,
    "zone": "Africa/Algiers"
  },
  {
    "name": "Algiers",
    "country": "DZ",
    "lat": 36.7525,
    "long": 3.04197,
    "zone": "Africa/Algiers"
  },
  {
    "name": "Aïn Oussera",
    "country": "DZ",
    "lat": 35.45139,
    "long": 2.90583,
    "zone": "Africa/Algiers"
  },
  {
    "name": "Aïn Beïda",
    "country": "DZ",
    "lat": 35.79639,
    "long": 7.39278,
    "zone": "Africa/Algiers"
  },
  {
    "name": "Santo Domingo de los Colorados",
    "country": "EC",
    "lat": -0.25305,
    "long": -79.17536,
    "zone": "America/Guayaquil"
  },
  {
    "name": "Riobamba",
    "country": "EC",
    "lat": -1.67098,
    "long": -78.64712,
    "zone": "America/Guayaquil"
  },
  {
    "name": "Quito",
    "country": "EC",
    "lat": -0.22985,
    "long": -78.52495,
    "zone": "America/Guayaquil"
  },
  {
    "name": "Quevedo",
    "country": "EC",
    "lat": -1.02863,
    "long": -79.46352,
    "zone": "America/Guayaquil"
  },
  {
    "name": "Portoviejo",
    "country": "EC",
    "lat": -1.05458,
    "long": -80.45445,
    "zone": "America/Guayaquil"
  },
  {
    "name": "Manta",
    "country": "EC",
    "lat": -0.96212,
    "long": -80.71271,
    "zone": "America/Guayaquil"
  },
  {
    "name": "Machala",
    "country": "EC",
    "lat": -3.25861,
    "long": -79.96053,
    "zone": "America/Guayaquil"
  },
  {
    "name": "Loja",
    "country": "EC",
    "lat": -3.99313,
    "long": -79.20422,
    "zone": "America/Guayaquil"
  },
  {
    "name": "Ibarra",
    "country": "EC",
    "lat": 0.35171,
    "long": -78.12233,
    "zone": "America/Guayaquil"
  },
  {
    "name": "Guayaquil",
    "country": "EC",
    "lat": -2.20584,
    "long": -79.90795,
    "zone": "America/Guayaquil"
  },
  {
    "name": "Esmeraldas",
    "country": "EC",
    "lat": 0.9592,
    "long": -79.65397,
    "zone": "America/Guayaquil"
  },
  {
    "name": "Eloy Alfaro",
    "country": "EC",
    "lat": -2.17579,
    "long": -79.85519,
    "zone": "America/Guayaquil"
  },
  {
    "name": "Cuenca",
    "country": "EC",
    "lat": -2.90055,
    "long": -79.00453,
    "zone": "America/Guayaquil"
  },
  {
    "name": "Ambato",
    "country": "EC",
    "lat": -1.24908,
    "long": -78.61675,
    "zone": "America/Guayaquil"
  },
  {
    "name": "Tutamandahostel",
    "country": "EC",
    "lat": -0.19727,
    "long": -78.4975,
    "zone": "America/Guayaquil"
  },
  {
    "name": "Tartu",
    "country": "EE",
    "lat": 58.38062,
    "long": 26.72509,
    "zone": "Europe/Tallinn"
  },
  {
    "name": "Tallinn",
    "country": "EE",
    "lat": 59.43696,
    "long": 24.75353,
    "zone": "Europe/Tallinn"
  },
  {
    "name": "Tanda",
    "country": "EG",
    "lat": 30.78847,
    "long": 31.00192,
    "zone": "Africa/Cairo"
  },
  {
    "name": "Ţalkhā",
    "country": "EG",
    "lat": 31.0539,
    "long": 31.37787,
    "zone": "Africa/Cairo"
  },
  {
    "name": "Sohag",
    "country": "EG",
    "lat": 26.55695,
    "long": 31.69478,
    "zone": "Africa/Cairo"
  },
  {
    "name": "Shibīn al Kawm",
    "country": "EG",
    "lat": 30.55258,
    "long": 31.00904,
    "zone": "Africa/Cairo"
  },
  {
    "name": "Qinā",
    "country": "EG",
    "lat": 26.16418,
    "long": 32.72671,
    "zone": "Africa/Cairo"
  },
  {
    "name": "Qalyūb",
    "country": "EG",
    "lat": 30.17922,
    "long": 31.2056,
    "zone": "Africa/Cairo"
  },
  {
    "name": "Mallawī",
    "country": "EG",
    "lat": 27.7314,
    "long": 30.84165,
    "zone": "Africa/Cairo"
  },
  {
    "name": "Kafr ash Shaykh",
    "country": "EG",
    "lat": 31.1143,
    "long": 30.94012,
    "zone": "Africa/Cairo"
  },
  {
    "name": "Kafr ad Dawwār",
    "country": "EG",
    "lat": 31.13385,
    "long": 30.12843,
    "zone": "Africa/Cairo"
  },
  {
    "name": "Jirjā",
    "country": "EG",
    "lat": 26.33826,
    "long": 31.89161,
    "zone": "Africa/Cairo"
  },
  {
    "name": "Idkū",
    "country": "EG",
    "lat": 31.30782,
    "long": 30.29901,
    "zone": "Africa/Cairo"
  },
  {
    "name": "Ḩalwān",
    "country": "EG",
    "lat": 29.84144,
    "long": 31.30084,
    "zone": "Africa/Cairo"
  },
  {
    "name": "Disūq",
    "country": "EG",
    "lat": 31.13305,
    "long": 30.64649,
    "zone": "Africa/Cairo"
  },
  {
    "name": "Dikirnis",
    "country": "EG",
    "lat": 31.08898,
    "long": 31.59478,
    "zone": "Africa/Cairo"
  },
  {
    "name": "Damanhūr",
    "country": "EG",
    "lat": 31.03408,
    "long": 30.46823,
    "zone": "Africa/Cairo"
  },
  {
    "name": "Port Said",
    "country": "EG",
    "lat": 31.25654,
    "long": 32.28411,
    "zone": "Africa/Cairo"
  },
  {
    "name": "Bilqās",
    "country": "EG",
    "lat": 31.21452,
    "long": 31.35798,
    "zone": "Africa/Cairo"
  },
  {
    "name": "Bilbays",
    "country": "EG",
    "lat": 30.42039,
    "long": 31.56223,
    "zone": "Africa/Cairo"
  },
  {
    "name": "Banī Suwayf",
    "country": "EG",
    "lat": 29.07441,
    "long": 31.09785,
    "zone": "Africa/Cairo"
  },
  {
    "name": "Banhā",
    "country": "EG",
    "lat": 30.45906,
    "long": 31.17858,
    "zone": "Africa/Cairo"
  },
  {
    "name": "Zagazig",
    "country": "EG",
    "lat": 30.58768,
    "long": 31.502,
    "zone": "Africa/Cairo"
  },
  {
    "name": "Asyūţ",
    "country": "EG",
    "lat": 27.18096,
    "long": 31.18368,
    "zone": "Africa/Cairo"
  },
  {
    "name": "Aswan",
    "country": "EG",
    "lat": 24.09082,
    "long": 32.89942,
    "zone": "Africa/Cairo"
  },
  {
    "name": "Suez",
    "country": "EG",
    "lat": 29.97371,
    "long": 32.52627,
    "zone": "Africa/Cairo"
  },
  {
    "name": "Luxor",
    "country": "EG",
    "lat": 25.69893,
    "long": 32.6421,
    "zone": "Africa/Cairo"
  },
  {
    "name": "Cairo",
    "country": "EG",
    "lat": 30.06263,
    "long": 31.24967,
    "zone": "Africa/Cairo"
  },
  {
    "name": "Al Minyā",
    "country": "EG",
    "lat": 28.10988,
    "long": 30.7503,
    "zone": "Africa/Cairo"
  },
  {
    "name": "Al Manşūrah",
    "country": "EG",
    "lat": 31.03637,
    "long": 31.38069,
    "zone": "Africa/Cairo"
  },
  {
    "name": "Al Maḩallah al Kubrá",
    "country": "EG",
    "lat": 30.97063,
    "long": 31.1669,
    "zone": "Africa/Cairo"
  },
  {
    "name": "Al Jīzah",
    "country": "EG",
    "lat": 30.00808,
    "long": 31.21093,
    "zone": "Africa/Cairo"
  },
  {
    "name": "Ismailia",
    "country": "EG",
    "lat": 30.60427,
    "long": 32.27225,
    "zone": "Africa/Cairo"
  },
  {
    "name": "Alexandria",
    "country": "EG",
    "lat": 31.21564,
    "long": 29.95527,
    "zone": "Africa/Cairo"
  },
  {
    "name": "Al Ḩawāmidīyah",
    "country": "EG",
    "lat": 29.9,
    "long": 31.25,
    "zone": "Africa/Cairo"
  },
  {
    "name": "Al Fayyūm",
    "country": "EG",
    "lat": 29.30995,
    "long": 30.8418,
    "zone": "Africa/Cairo"
  },
  {
    "name": "Arish",
    "country": "EG",
    "lat": 31.13159,
    "long": 33.79844,
    "zone": "Africa/Cairo"
  },
  {
    "name": "Abū Kabīr",
    "country": "EG",
    "lat": 30.72508,
    "long": 31.67148,
    "zone": "Africa/Cairo"
  },
  {
    "name": "Idfu",
    "country": "EG",
    "lat": 24.98028,
    "long": 32.87472,
    "zone": "Africa/Cairo"
  },
  {
    "name": "Laâyoune / El Aaiún",
    "country": "EH",
    "lat": 27.1418,
    "long": -13.18797,
    "zone": "Africa/Casablanca"
  },
  {
    "name": "Asmara",
    "country": "ER",
    "lat": 15.33805,
    "long": 38.93184,
    "zone": "Africa/Asmara"
  },
  {
    "name": "Valencia",
    "country": "ES",
    "lat": 39.46975,
    "long": -0.37739,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Torrevieja",
    "country": "ES",
    "lat": 37.97872,
    "long": -0.68222,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Telde",
    "country": "ES",
    "lat": 27.99243,
    "long": -15.41915,
    "zone": "Atlantic/Canary"
  },
  {
    "name": "Sevilla",
    "country": "ES",
    "lat": 37.38283,
    "long": -5.97317,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Santa Cruz de Tenerife",
    "country": "ES",
    "lat": 28.46824,
    "long": -16.25462,
    "zone": "Atlantic/Canary"
  },
  {
    "name": "La Laguna",
    "country": "ES",
    "lat": 28.4853,
    "long": -16.32014,
    "zone": "Atlantic/Canary"
  },
  {
    "name": "Palma",
    "country": "ES",
    "lat": 39.56939,
    "long": 2.65024,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Murcia",
    "country": "ES",
    "lat": 37.98704,
    "long": -1.13004,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Marbella",
    "country": "ES",
    "lat": 36.51543,
    "long": -4.88583,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Málaga",
    "country": "ES",
    "lat": 36.72016,
    "long": -4.42034,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Las Palmas de Gran Canaria",
    "country": "ES",
    "lat": 28.09973,
    "long": -15.41343,
    "zone": "Atlantic/Canary"
  },
  {
    "name": "Jerez de la Frontera",
    "country": "ES",
    "lat": 36.68645,
    "long": -6.13606,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Jaén",
    "country": "ES",
    "lat": 37.76922,
    "long": -3.79028,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Huelva",
    "country": "ES",
    "lat": 37.26638,
    "long": -6.94004,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Granada",
    "country": "ES",
    "lat": 37.18817,
    "long": -3.60667,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Elche",
    "country": "ES",
    "lat": 38.26218,
    "long": -0.70107,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Dos Hermanas",
    "country": "ES",
    "lat": 37.28287,
    "long": -5.92088,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Córdoba",
    "country": "ES",
    "lat": 37.89155,
    "long": -4.77275,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Castelló de la Plana",
    "country": "ES",
    "lat": 39.98333,
    "long": -0.03333,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Cartagena",
    "country": "ES",
    "lat": 37.60512,
    "long": -0.98623,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Cadiz",
    "country": "ES",
    "lat": 36.52978,
    "long": -6.29465,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Badajoz",
    "country": "ES",
    "lat": 38.87789,
    "long": -6.97061,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Almería",
    "country": "ES",
    "lat": 36.83814,
    "long": -2.45974,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Alicante",
    "country": "ES",
    "lat": 38.34517,
    "long": -0.48149,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Algeciras",
    "country": "ES",
    "lat": 36.13326,
    "long": -5.45051,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Albacete",
    "country": "ES",
    "lat": 38.99424,
    "long": -1.85643,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Zaragoza",
    "country": "ES",
    "lat": 41.65606,
    "long": -0.87734,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Gasteiz / Vitoria",
    "country": "ES",
    "lat": 42.84998,
    "long": -2.67268,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Villaverde",
    "country": "ES",
    "lat": 40.35,
    "long": -3.7,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Vigo",
    "country": "ES",
    "lat": 42.23282,
    "long": -8.72264,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Valladolid",
    "country": "ES",
    "lat": 41.65518,
    "long": -4.72372,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Torrejón de Ardoz",
    "country": "ES",
    "lat": 40.45535,
    "long": -3.46973,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Tetuán de las Victorias",
    "country": "ES",
    "lat": 40.46667,
    "long": -3.71667,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Terrassa",
    "country": "ES",
    "lat": 41.56667,
    "long": 2.01667,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Tarragona",
    "country": "ES",
    "lat": 41.11667,
    "long": 1.25,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Santander",
    "country": "ES",
    "lat": 43.46472,
    "long": -3.80444,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Santa Coloma de Gramenet",
    "country": "ES",
    "lat": 41.45152,
    "long": 2.2081,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Donostia / San Sebastián",
    "country": "ES",
    "lat": 43.31283,
    "long": -1.97499,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Sant Andreu de Palomar",
    "country": "ES",
    "lat": 41.43541,
    "long": 2.18982,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Salamanca",
    "country": "ES",
    "lat": 40.96882,
    "long": -5.66388,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Sabadell",
    "country": "ES",
    "lat": 41.54329,
    "long": 2.10942,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Reus",
    "country": "ES",
    "lat": 41.15612,
    "long": 1.10687,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Puente de Vallecas",
    "country": "ES",
    "lat": 40.39354,
    "long": -3.662,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Parla",
    "country": "ES",
    "lat": 40.23604,
    "long": -3.76752,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Pamplona",
    "country": "ES",
    "lat": 42.81687,
    "long": -1.64323,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Oviedo",
    "country": "ES",
    "lat": 43.36029,
    "long": -5.84476,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Ourense",
    "country": "ES",
    "lat": 42.33669,
    "long": -7.86407,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Móstoles",
    "country": "ES",
    "lat": 40.32234,
    "long": -3.86496,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Moratalaz",
    "country": "ES",
    "lat": 40.41667,
    "long": -3.65,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Mataró",
    "country": "ES",
    "lat": 41.54211,
    "long": 2.4445,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Madrid",
    "country": "ES",
    "lat": 40.4165,
    "long": -3.70256,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Logroño",
    "country": "ES",
    "lat": 42.46667,
    "long": -2.45,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Lleida",
    "country": "ES",
    "lat": 41.61674,
    "long": 0.62218,
    "zone": "Europe/Madrid"
  },
  {
    "name": "León",
    "country": "ES",
    "lat": 42.60003,
    "long": -5.57032,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Leganés",
    "country": "ES",
    "lat": 40.32718,
    "long": -3.7635,
    "zone": "Europe/Madrid"
  },
  {
    "name": "A Coruña",
    "country": "ES",
    "lat": 43.37135,
    "long": -8.396,
    "zone": "Europe/Madrid"
  },
  {
    "name": "L'Hospitalet de Llobregat",
    "country": "ES",
    "lat": 41.35967,
    "long": 2.10028,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Hortaleza",
    "country": "ES",
    "lat": 40.47444,
    "long": -3.6411,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Gràcia",
    "country": "ES",
    "lat": 41.40237,
    "long": 2.15641,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Gijón",
    "country": "ES",
    "lat": 43.53573,
    "long": -5.66152,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Getafe",
    "country": "ES",
    "lat": 40.30571,
    "long": -3.73295,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Fuenlabrada",
    "country": "ES",
    "lat": 40.28419,
    "long": -3.79415,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Ciudad Lineal",
    "country": "ES",
    "lat": 40.45455,
    "long": -3.64808,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Chamartín",
    "country": "ES",
    "lat": 40.46206,
    "long": -3.6766,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Burgos",
    "country": "ES",
    "lat": 42.35022,
    "long": -3.67527,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Bilbao",
    "country": "ES",
    "lat": 43.26271,
    "long": -2.92528,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Barcelona",
    "country": "ES",
    "lat": 41.38879,
    "long": 2.15899,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Badalona",
    "country": "ES",
    "lat": 41.45004,
    "long": 2.24741,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Alcorcón",
    "country": "ES",
    "lat": 40.34582,
    "long": -3.82487,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Alcobendas",
    "country": "ES",
    "lat": 40.54746,
    "long": -3.64197,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Alcalá de Henares",
    "country": "ES",
    "lat": 40.48205,
    "long": -3.35996,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Nou Barris",
    "country": "ES",
    "lat": 41.44163,
    "long": 2.17727,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Moncloa-Aravaca",
    "country": "ES",
    "lat": 40.43547,
    "long": -3.7317,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Eixample",
    "country": "ES",
    "lat": 41.38896,
    "long": 2.16179,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Sarrià-Sant Gervasi",
    "country": "ES",
    "lat": 41.40104,
    "long": 2.1394,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Horta-Guinardó",
    "country": "ES",
    "lat": 41.41849,
    "long": 2.1677,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Sants-Montjuïc",
    "country": "ES",
    "lat": 41.37263,
    "long": 2.1546,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Sant Martí",
    "country": "ES",
    "lat": 41.41814,
    "long": 2.19933,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Ciutat Vella",
    "country": "ES",
    "lat": 41.38022,
    "long": 2.17319,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Arganzuela",
    "country": "ES",
    "lat": 40.40021,
    "long": -3.69618,
    "zone": "Europe/Madrid"
  },
  {
    "name": "San Blas",
    "country": "ES",
    "lat": 40.43893,
    "long": -3.61537,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Latina",
    "country": "ES",
    "lat": 40.38897,
    "long": -3.74569,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Usera",
    "country": "ES",
    "lat": 40.38866,
    "long": -3.70035,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Salamanca",
    "country": "ES",
    "lat": 40.42972,
    "long": -3.67975,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Chamberí",
    "country": "ES",
    "lat": 40.43404,
    "long": -3.70379,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Carabanchel",
    "country": "ES",
    "lat": 40.39094,
    "long": -3.7242,
    "zone": "Europe/Madrid"
  },
  {
    "name": "City Center",
    "country": "ES",
    "lat": 40.41831,
    "long": -3.70275,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Retiro",
    "country": "ES",
    "lat": 40.41317,
    "long": -3.68307,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Delicias",
    "country": "ES",
    "lat": 41.64928,
    "long": -0.90757,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Fuencarral-El Pardo",
    "country": "ES",
    "lat": 40.4984,
    "long": -3.7314,
    "zone": "Europe/Madrid"
  },
  {
    "name": "Nazrēt",
    "country": "ET",
    "lat": 8.55,
    "long": 39.26667,
    "zone": "Africa/Addis_Ababa"
  },
  {
    "name": "Mekele",
    "country": "ET",
    "lat": 13.49667,
    "long": 39.47528,
    "zone": "Africa/Addis_Ababa"
  },
  {
    "name": "Jīma",
    "country": "ET",
    "lat": 7.66667,
    "long": 36.83333,
    "zone": "Africa/Addis_Ababa"
  },
  {
    "name": "Gondar",
    "country": "ET",
    "lat": 12.6,
    "long": 37.46667,
    "zone": "Africa/Addis_Ababa"
  },
  {
    "name": "Dire Dawa",
    "country": "ET",
    "lat": 9.59306,
    "long": 41.86611,
    "zone": "Africa/Addis_Ababa"
  },
  {
    "name": "Desē",
    "country": "ET",
    "lat": 11.13333,
    "long": 39.63333,
    "zone": "Africa/Addis_Ababa"
  },
  {
    "name": "Bishoftu",
    "country": "ET",
    "lat": 8.75225,
    "long": 38.97846,
    "zone": "Africa/Addis_Ababa"
  },
  {
    "name": "Bahir Dar",
    "country": "ET",
    "lat": 11.59364,
    "long": 37.39077,
    "zone": "Africa/Addis_Ababa"
  },
  {
    "name": "Hawassa",
    "country": "ET",
    "lat": 7.06205,
    "long": 38.47635,
    "zone": "Africa/Addis_Ababa"
  },
  {
    "name": "Addis Ababa",
    "country": "ET",
    "lat": 9.02497,
    "long": 38.74689,
    "zone": "Africa/Addis_Ababa"
  },
  {
    "name": "Vantaa",
    "country": "FI",
    "lat": 60.29414,
    "long": 25.04099,
    "zone": "Europe/Helsinki"
  },
  {
    "name": "Turku",
    "country": "FI",
    "lat": 60.45148,
    "long": 22.26869,
    "zone": "Europe/Helsinki"
  },
  {
    "name": "Tampere",
    "country": "FI",
    "lat": 61.49911,
    "long": 23.78712,
    "zone": "Europe/Helsinki"
  },
  {
    "name": "Oulu",
    "country": "FI",
    "lat": 65.01236,
    "long": 25.46816,
    "zone": "Europe/Helsinki"
  },
  {
    "name": "Helsinki",
    "country": "FI",
    "lat": 60.16952,
    "long": 24.93545,
    "zone": "Europe/Helsinki"
  },
  {
    "name": "Espoo",
    "country": "FI",
    "lat": 60.2052,
    "long": 24.6522,
    "zone": "Europe/Helsinki"
  },
  {
    "name": "Villeurbanne",
    "country": "FR",
    "lat": 45.76667,
    "long": 4.88333,
    "zone": "Europe/Paris"
  },
  {
    "name": "Tours",
    "country": "FR",
    "lat": 47.38333,
    "long": 0.68333,
    "zone": "Europe/Paris"
  },
  {
    "name": "Toulouse",
    "country": "FR",
    "lat": 43.60426,
    "long": 1.44367,
    "zone": "Europe/Paris"
  },
  {
    "name": "Toulon",
    "country": "FR",
    "lat": 43.11667,
    "long": 5.93333,
    "zone": "Europe/Paris"
  },
  {
    "name": "Strasbourg",
    "country": "FR",
    "lat": 48.58392,
    "long": 7.74553,
    "zone": "Europe/Paris"
  },
  {
    "name": "Saint-Étienne",
    "country": "FR",
    "lat": 45.43389,
    "long": 4.39,
    "zone": "Europe/Paris"
  },
  {
    "name": "Rouen",
    "country": "FR",
    "lat": 49.44313,
    "long": 1.09932,
    "zone": "Europe/Paris"
  },
  {
    "name": "Rennes",
    "country": "FR",
    "lat": 48.11198,
    "long": -1.67429,
    "zone": "Europe/Paris"
  },
  {
    "name": "Reims",
    "country": "FR",
    "lat": 49.25,
    "long": 4.03333,
    "zone": "Europe/Paris"
  },
  {
    "name": "Perpignan",
    "country": "FR",
    "lat": 42.69764,
    "long": 2.89541,
    "zone": "Europe/Paris"
  },
  {
    "name": "Paris",
    "country": "FR",
    "lat": 48.85341,
    "long": 2.3488,
    "zone": "Europe/Paris"
  },
  {
    "name": "Orléans",
    "country": "FR",
    "lat": 47.90289,
    "long": 1.90389,
    "zone": "Europe/Paris"
  },
  {
    "name": "Nîmes",
    "country": "FR",
    "lat": 43.83333,
    "long": 4.35,
    "zone": "Europe/Paris"
  },
  {
    "name": "Nice",
    "country": "FR",
    "lat": 43.70313,
    "long": 7.26608,
    "zone": "Europe/Paris"
  },
  {
    "name": "Nantes",
    "country": "FR",
    "lat": 47.21725,
    "long": -1.55336,
    "zone": "Europe/Paris"
  },
  {
    "name": "Nancy",
    "country": "FR",
    "lat": 48.68439,
    "long": 6.18496,
    "zone": "Europe/Paris"
  },
  {
    "name": "Mulhouse",
    "country": "FR",
    "lat": 47.75,
    "long": 7.33333,
    "zone": "Europe/Paris"
  },
  {
    "name": "Montpellier",
    "country": "FR",
    "lat": 43.61092,
    "long": 3.87723,
    "zone": "Europe/Paris"
  },
  {
    "name": "Metz",
    "country": "FR",
    "lat": 49.11911,
    "long": 6.17269,
    "zone": "Europe/Paris"
  },
  {
    "name": "Marseille",
    "country": "FR",
    "lat": 43.29695,
    "long": 5.38107,
    "zone": "Europe/Paris"
  },
  {
    "name": "Lyon",
    "country": "FR",
    "lat": 45.74846,
    "long": 4.84671,
    "zone": "Europe/Paris"
  },
  {
    "name": "Limoges",
    "country": "FR",
    "lat": 45.83153,
    "long": 1.25781,
    "zone": "Europe/Paris"
  },
  {
    "name": "Lille",
    "country": "FR",
    "lat": 50.63297,
    "long": 3.05858,
    "zone": "Europe/Paris"
  },
  {
    "name": "Le Mans",
    "country": "FR",
    "lat": 48,
    "long": 0.2,
    "zone": "Europe/Paris"
  },
  {
    "name": "Le Havre",
    "country": "FR",
    "lat": 49.4938,
    "long": 0.10767,
    "zone": "Europe/Paris"
  },
  {
    "name": "Grenoble",
    "country": "FR",
    "lat": 45.16667,
    "long": 5.71667,
    "zone": "Europe/Paris"
  },
  {
    "name": "Dijon",
    "country": "FR",
    "lat": 47.31667,
    "long": 5.01667,
    "zone": "Europe/Paris"
  },
  {
    "name": "Clermont-Ferrand",
    "country": "FR",
    "lat": 45.77966,
    "long": 3.08628,
    "zone": "Europe/Paris"
  },
  {
    "name": "Caen",
    "country": "FR",
    "lat": 49.18585,
    "long": -0.35912,
    "zone": "Europe/Paris"
  },
  {
    "name": "Brest",
    "country": "FR",
    "lat": 48.4,
    "long": -4.48333,
    "zone": "Europe/Paris"
  },
  {
    "name": "Boulogne-Billancourt",
    "country": "FR",
    "lat": 48.83333,
    "long": 2.25,
    "zone": "Europe/Paris"
  },
  {
    "name": "Bordeaux",
    "country": "FR",
    "lat": 44.84044,
    "long": -0.5805,
    "zone": "Europe/Paris"
  },
  {
    "name": "Besançon",
    "country": "FR",
    "lat": 47.24878,
    "long": 6.01815,
    "zone": "Europe/Paris"
  },
  {
    "name": "Argenteuil",
    "country": "FR",
    "lat": 48.95,
    "long": 2.25,
    "zone": "Europe/Paris"
  },
  {
    "name": "Angers",
    "country": "FR",
    "lat": 47.46667,
    "long": -0.55,
    "zone": "Europe/Paris"
  },
  {
    "name": "Amiens",
    "country": "FR",
    "lat": 49.9,
    "long": 2.3,
    "zone": "Europe/Paris"
  },
  {
    "name": "Aix-en-Provence",
    "country": "FR",
    "lat": 43.5283,
    "long": 5.44973,
    "zone": "Europe/Paris"
  },
  {
    "name": "Saint-Quentin-en-Yvelines",
    "country": "FR",
    "lat": 48.77186,
    "long": 2.01891,
    "zone": "Europe/Paris"
  },
  {
    "name": "Cergy-Pontoise",
    "country": "FR",
    "lat": 49.03894,
    "long": 2.07805,
    "zone": "Europe/Paris"
  },
  {
    "name": "Port-Gentil",
    "country": "GA",
    "lat": -0.71933,
    "long": 8.78151,
    "zone": "Africa/Libreville"
  },
  {
    "name": "Libreville",
    "country": "GA",
    "lat": 0.39241,
    "long": 9.45356,
    "zone": "Africa/Libreville"
  },
  {
    "name": "York",
    "country": "GB",
    "lat": 53.95763,
    "long": -1.08271,
    "zone": "Europe/London"
  },
  {
    "name": "Worcester",
    "country": "GB",
    "lat": 52.18935,
    "long": -2.22001,
    "zone": "Europe/London"
  },
  {
    "name": "Wolverhampton",
    "country": "GB",
    "lat": 52.58547,
    "long": -2.12296,
    "zone": "Europe/London"
  },
  {
    "name": "Woking",
    "country": "GB",
    "lat": 51.31903,
    "long": -0.55893,
    "zone": "Europe/London"
  },
  {
    "name": "West Bromwich",
    "country": "GB",
    "lat": 52.51868,
    "long": -1.9945,
    "zone": "Europe/London"
  },
  {
    "name": "Watford",
    "country": "GB",
    "lat": 51.65531,
    "long": -0.39602,
    "zone": "Europe/London"
  },
  {
    "name": "Walsall",
    "country": "GB",
    "lat": 52.58528,
    "long": -1.98396,
    "zone": "Europe/London"
  },
  {
    "name": "Swindon",
    "country": "GB",
    "lat": 51.55797,
    "long": -1.78116,
    "zone": "Europe/London"
  },
  {
    "name": "Swansea",
    "country": "GB",
    "lat": 51.62079,
    "long": -3.94323,
    "zone": "Europe/London"
  },
  {
    "name": "Sutton Coldfield",
    "country": "GB",
    "lat": 52.56667,
    "long": -1.81667,
    "zone": "Europe/London"
  },
  {
    "name": "Sutton",
    "country": "GB",
    "lat": 51.35,
    "long": -0.2,
    "zone": "Europe/London"
  },
  {
    "name": "Sunderland",
    "country": "GB",
    "lat": 54.90465,
    "long": -1.38222,
    "zone": "Europe/London"
  },
  {
    "name": "Stoke-on-Trent",
    "country": "GB",
    "lat": 53.00415,
    "long": -2.18538,
    "zone": "Europe/London"
  },
  {
    "name": "Stockport",
    "country": "GB",
    "lat": 53.40979,
    "long": -2.15761,
    "zone": "Europe/London"
  },
  {
    "name": "Southend-on-Sea",
    "country": "GB",
    "lat": 51.53782,
    "long": 0.71433,
    "zone": "Europe/London"
  },
  {
    "name": "Southampton",
    "country": "GB",
    "lat": 50.90395,
    "long": -1.40428,
    "zone": "Europe/London"
  },
  {
    "name": "Slough",
    "country": "GB",
    "lat": 51.50949,
    "long": -0.59541,
    "zone": "Europe/London"
  },
  {
    "name": "Sheffield",
    "country": "GB",
    "lat": 53.38297,
    "long": -1.4659,
    "zone": "Europe/London"
  },
  {
    "name": "St Helens",
    "country": "GB",
    "lat": 53.45,
    "long": -2.73333,
    "zone": "Europe/London"
  },
  {
    "name": "Rotherham",
    "country": "GB",
    "lat": 53.43012,
    "long": -1.35678,
    "zone": "Europe/London"
  },
  {
    "name": "Reading",
    "country": "GB",
    "lat": 51.45625,
    "long": -0.97113,
    "zone": "Europe/London"
  },
  {
    "name": "Preston",
    "country": "GB",
    "lat": 53.76667,
    "long": -2.71667,
    "zone": "Europe/London"
  },
  {
    "name": "Portsmouth",
    "country": "GB",
    "lat": 50.79899,
    "long": -1.09125,
    "zone": "Europe/London"
  },
  {
    "name": "Poole",
    "country": "GB",
    "lat": 50.71667,
    "long": -2,
    "zone": "Europe/London"
  },
  {
    "name": "Plymouth",
    "country": "GB",
    "lat": 50.37153,
    "long": -4.14305,
    "zone": "Europe/London"
  },
  {
    "name": "Peterborough",
    "country": "GB",
    "lat": 52.57364,
    "long": -0.24777,
    "zone": "Europe/London"
  },
  {
    "name": "Oxford",
    "country": "GB",
    "lat": 51.75222,
    "long": -1.25596,
    "zone": "Europe/London"
  },
  {
    "name": "Oldham",
    "country": "GB",
    "lat": 53.54051,
    "long": -2.1183,
    "zone": "Europe/London"
  },
  {
    "name": "Nottingham",
    "country": "GB",
    "lat": 52.9536,
    "long": -1.15047,
    "zone": "Europe/London"
  },
  {
    "name": "Norwich",
    "country": "GB",
    "lat": 52.62783,
    "long": 1.29834,
    "zone": "Europe/London"
  },
  {
    "name": "Northampton",
    "country": "GB",
    "lat": 52.25,
    "long": -0.88333,
    "zone": "Europe/London"
  },
  {
    "name": "Newport",
    "country": "GB",
    "lat": 51.58774,
    "long": -2.99835,
    "zone": "Europe/London"
  },
  {
    "name": "Newcastle upon Tyne",
    "country": "GB",
    "lat": 54.97328,
    "long": -1.61396,
    "zone": "Europe/London"
  },
  {
    "name": "Milton Keynes",
    "country": "GB",
    "lat": 52.04172,
    "long": -0.75583,
    "zone": "Europe/London"
  },
  {
    "name": "Middlesbrough",
    "country": "GB",
    "lat": 54.57623,
    "long": -1.23483,
    "zone": "Europe/London"
  },
  {
    "name": "Manchester",
    "country": "GB",
    "lat": 53.48095,
    "long": -2.23743,
    "zone": "Europe/London"
  },
  {
    "name": "Luton",
    "country": "GB",
    "lat": 51.87967,
    "long": -0.41748,
    "zone": "Europe/London"
  },
  {
    "name": "City of London",
    "country": "GB",
    "lat": 51.51279,
    "long": -0.09184,
    "zone": "Europe/London"
  },
  {
    "name": "London",
    "country": "GB",
    "lat": 51.50853,
    "long": -0.12574,
    "zone": "Europe/London"
  },
  {
    "name": "Liverpool",
    "country": "GB",
    "lat": 53.41058,
    "long": -2.97794,
    "zone": "Europe/London"
  },
  {
    "name": "Leicester",
    "country": "GB",
    "lat": 52.6386,
    "long": -1.13169,
    "zone": "Europe/London"
  },
  {
    "name": "Leeds",
    "country": "GB",
    "lat": 53.79648,
    "long": -1.54785,
    "zone": "Europe/London"
  },
  {
    "name": "Hull",
    "country": "GB",
    "lat": 53.7446,
    "long": -0.33525,
    "zone": "Europe/London"
  },
  {
    "name": "Islington",
    "country": "GB",
    "lat": 51.53622,
    "long": -0.10304,
    "zone": "Europe/London"
  },
  {
    "name": "Ipswich",
    "country": "GB",
    "lat": 52.05917,
    "long": 1.15545,
    "zone": "Europe/London"
  },
  {
    "name": "Huddersfield",
    "country": "GB",
    "lat": 53.64904,
    "long": -1.78416,
    "zone": "Europe/London"
  },
  {
    "name": "Gloucester",
    "country": "GB",
    "lat": 51.86568,
    "long": -2.2431,
    "zone": "Europe/London"
  },
  {
    "name": "Glasgow",
    "country": "GB",
    "lat": 55.86515,
    "long": -4.25763,
    "zone": "Europe/London"
  },
  {
    "name": "Gillingham",
    "country": "GB",
    "lat": 51.38914,
    "long": 0.54863,
    "zone": "Europe/London"
  },
  {
    "name": "Exeter",
    "country": "GB",
    "lat": 50.7236,
    "long": -3.52751,
    "zone": "Europe/London"
  },
  {
    "name": "Edinburgh",
    "country": "GB",
    "lat": 55.95206,
    "long": -3.19648,
    "zone": "Europe/London"
  },
  {
    "name": "Eastbourne",
    "country": "GB",
    "lat": 50.76871,
    "long": 0.28453,
    "zone": "Europe/London"
  },
  {
    "name": "Dundee",
    "country": "GB",
    "lat": 56.46913,
    "long": -2.97489,
    "zone": "Europe/London"
  },
  {
    "name": "Dudley",
    "country": "GB",
    "lat": 52.5,
    "long": -2.08333,
    "zone": "Europe/London"
  },
  {
    "name": "Derby",
    "country": "GB",
    "lat": 52.92277,
    "long": -1.47663,
    "zone": "Europe/London"
  },
  {
    "name": "Dagenham",
    "country": "GB",
    "lat": 51.55,
    "long": 0.16667,
    "zone": "Europe/London"
  },
  {
    "name": "Crawley",
    "country": "GB",
    "lat": 51.11303,
    "long": -0.18312,
    "zone": "Europe/London"
  },
  {
    "name": "Coventry",
    "country": "GB",
    "lat": 52.40656,
    "long": -1.51217,
    "zone": "Europe/London"
  },
  {
    "name": "Colchester",
    "country": "GB",
    "lat": 51.88921,
    "long": 0.90421,
    "zone": "Europe/London"
  },
  {
    "name": "Cheltenham",
    "country": "GB",
    "lat": 51.9,
    "long": -2.08333,
    "zone": "Europe/London"
  },
  {
    "name": "Chelmsford",
    "country": "GB",
    "lat": 51.73575,
    "long": 0.46958,
    "zone": "Europe/London"
  },
  {
    "name": "Cardiff",
    "country": "GB",
    "lat": 51.48,
    "long": -3.18,
    "zone": "Europe/London"
  },
  {
    "name": "Cambridge",
    "country": "GB",
    "lat": 52.2,
    "long": 0.11667,
    "zone": "Europe/London"
  },
  {
    "name": "Bristol",
    "country": "GB",
    "lat": 51.45523,
    "long": -2.59665,
    "zone": "Europe/London"
  },
  {
    "name": "Brighton",
    "country": "GB",
    "lat": 50.82838,
    "long": -0.13947,
    "zone": "Europe/London"
  },
  {
    "name": "Bradford",
    "country": "GB",
    "lat": 53.79391,
    "long": -1.75206,
    "zone": "Europe/London"
  },
  {
    "name": "Bournemouth",
    "country": "GB",
    "lat": 50.72048,
    "long": -1.8795,
    "zone": "Europe/London"
  },
  {
    "name": "Bolton",
    "country": "GB",
    "lat": 53.58333,
    "long": -2.43333,
    "zone": "Europe/London"
  },
  {
    "name": "Blackpool",
    "country": "GB",
    "lat": 53.81667,
    "long": -3.05,
    "zone": "Europe/London"
  },
  {
    "name": "Blackburn",
    "country": "GB",
    "lat": 53.75,
    "long": -2.48333,
    "zone": "Europe/London"
  },
  {
    "name": "Birmingham",
    "country": "GB",
    "lat": 52.48142,
    "long": -1.89983,
    "zone": "Europe/London"
  },
  {
    "name": "Bexley",
    "country": "GB",
    "lat": 51.44162,
    "long": 0.14866,
    "zone": "Europe/London"
  },
  {
    "name": "Belfast",
    "country": "GB",
    "lat": 54.58333,
    "long": -5.93333,
    "zone": "Europe/London"
  },
  {
    "name": "Basildon",
    "country": "GB",
    "lat": 51.56844,
    "long": 0.45782,
    "zone": "Europe/London"
  },
  {
    "name": "Aberdeen",
    "country": "GB",
    "lat": 57.14369,
    "long": -2.09814,
    "zone": "Europe/London"
  },
  {
    "name": "Telford",
    "country": "GB",
    "lat": 52.67659,
    "long": -2.44926,
    "zone": "Europe/London"
  },
  {
    "name": "Mendip",
    "country": "GB",
    "lat": 51.2372,
    "long": -2.6266,
    "zone": "Europe/London"
  },
  {
    "name": "Tbilisi",
    "country": "GE",
    "lat": 41.69411,
    "long": 44.83368,
    "zone": "Asia/Tbilisi"
  },
  {
    "name": "Kutaisi",
    "country": "GE",
    "lat": 42.26791,
    "long": 42.69459,
    "zone": "Asia/Tbilisi"
  },
  {
    "name": "Batumi",
    "country": "GE",
    "lat": 41.64228,
    "long": 41.63392,
    "zone": "Asia/Tbilisi"
  },
  {
    "name": "Teshi Old Town",
    "country": "GH",
    "lat": 5.58365,
    "long": -0.10722,
    "zone": "Africa/Accra"
  },
  {
    "name": "Tema",
    "country": "GH",
    "lat": 5.6698,
    "long": -0.01657,
    "zone": "Africa/Accra"
  },
  {
    "name": "Tamale",
    "country": "GH",
    "lat": 9.40079,
    "long": -0.8393,
    "zone": "Africa/Accra"
  },
  {
    "name": "Takoradi",
    "country": "GH",
    "lat": 4.88447,
    "long": -1.75536,
    "zone": "Africa/Accra"
  },
  {
    "name": "Sekondi-Takoradi",
    "country": "GH",
    "lat": 4.934,
    "long": -1.7137,
    "zone": "Africa/Accra"
  },
  {
    "name": "Obuasi",
    "country": "GH",
    "lat": 6.20602,
    "long": -1.66191,
    "zone": "Africa/Accra"
  },
  {
    "name": "Medina Estates",
    "country": "GH",
    "lat": 5.6658,
    "long": -0.16307,
    "zone": "Africa/Accra"
  },
  {
    "name": "Kumasi",
    "country": "GH",
    "lat": 6.68848,
    "long": -1.62443,
    "zone": "Africa/Accra"
  },
  {
    "name": "Cape Coast",
    "country": "GH",
    "lat": 5.10535,
    "long": -1.2466,
    "zone": "Africa/Accra"
  },
  {
    "name": "Achiaman",
    "country": "GH",
    "lat": 5.7,
    "long": -0.33333,
    "zone": "Africa/Accra"
  },
  {
    "name": "Accra",
    "country": "GH",
    "lat": 5.55602,
    "long": -0.1969,
    "zone": "Africa/Accra"
  },
  {
    "name": "Nzérékoré",
    "country": "GN",
    "lat": 7.75624,
    "long": -8.8179,
    "zone": "Africa/Conakry"
  },
  {
    "name": "Kindia",
    "country": "GN",
    "lat": 10.05692,
    "long": -12.86576,
    "zone": "Africa/Conakry"
  },
  {
    "name": "Kankan",
    "country": "GN",
    "lat": 10.38542,
    "long": -9.30568,
    "zone": "Africa/Conakry"
  },
  {
    "name": "Conakry",
    "country": "GN",
    "lat": 9.53795,
    "long": -13.67729,
    "zone": "Africa/Conakry"
  },
  {
    "name": "Camayenne",
    "country": "GN",
    "lat": 9.535,
    "long": -13.68778,
    "zone": "Africa/Conakry"
  },
  {
    "name": "Malabo",
    "country": "GQ",
    "lat": 3.75,
    "long": 8.78333,
    "zone": "Africa/Malabo"
  },
  {
    "name": "Bata",
    "country": "GQ",
    "lat": 1.86391,
    "long": 9.76582,
    "zone": "Africa/Malabo"
  },
  {
    "name": "Piraeus",
    "country": "GR",
    "lat": 37.94745,
    "long": 23.63708,
    "zone": "Europe/Athens"
  },
  {
    "name": "Peristéri",
    "country": "GR",
    "lat": 38.01539,
    "long": 23.69187,
    "zone": "Europe/Athens"
  },
  {
    "name": "Pátra",
    "country": "GR",
    "lat": 38.24444,
    "long": 21.73444,
    "zone": "Europe/Athens"
  },
  {
    "name": "Lárisa",
    "country": "GR",
    "lat": 39.63689,
    "long": 22.41761,
    "zone": "Europe/Athens"
  },
  {
    "name": "Kallithéa",
    "country": "GR",
    "lat": 37.95,
    "long": 23.7,
    "zone": "Europe/Athens"
  },
  {
    "name": "Irákleion",
    "country": "GR",
    "lat": 35.32787,
    "long": 25.14341,
    "zone": "Europe/Athens"
  },
  {
    "name": "Athens",
    "country": "GR",
    "lat": 37.97945,
    "long": 23.71622,
    "zone": "Europe/Athens"
  },
  {
    "name": "Thessaloníki",
    "country": "GR",
    "lat": 40.64361,
    "long": 22.93086,
    "zone": "Europe/Athens"
  },
  {
    "name": "Villa Nueva",
    "country": "GT",
    "lat": 14.52694,
    "long": -90.5875,
    "zone": "America/Guatemala"
  },
  {
    "name": "Villa Canales",
    "country": "GT",
    "lat": 14.48139,
    "long": -90.53167,
    "zone": "America/Guatemala"
  },
  {
    "name": "San Juan Sacatepéquez",
    "country": "GT",
    "lat": 14.71889,
    "long": -90.64417,
    "zone": "America/Guatemala"
  },
  {
    "name": "Quetzaltenango",
    "country": "GT",
    "lat": 14.83472,
    "long": -91.51806,
    "zone": "America/Guatemala"
  },
  {
    "name": "Petapa",
    "country": "GT",
    "lat": 14.50278,
    "long": -90.55167,
    "zone": "America/Guatemala"
  },
  {
    "name": "Mixco",
    "country": "GT",
    "lat": 14.63333,
    "long": -90.60639,
    "zone": "America/Guatemala"
  },
  {
    "name": "Escuintla",
    "country": "GT",
    "lat": 14.305,
    "long": -90.785,
    "zone": "America/Guatemala"
  },
  {
    "name": "Guatemala City",
    "country": "GT",
    "lat": 14.64072,
    "long": -90.51327,
    "zone": "America/Guatemala"
  },
  {
    "name": "Bissau",
    "country": "GW",
    "lat": 11.86357,
    "long": -15.59767,
    "zone": "Africa/Bissau"
  },
  {
    "name": "Georgetown",
    "country": "GY",
    "lat": 6.80448,
    "long": -58.15527,
    "zone": "America/Guyana"
  },
  {
    "name": "Tsuen Wan",
    "country": "HK",
    "lat": 22.37066,
    "long": 114.10479,
    "zone": "Asia/Hong_Kong"
  },
  {
    "name": "Yuen Long Kau Hui",
    "country": "HK",
    "lat": 22.45,
    "long": 114.03333,
    "zone": "Asia/Hong_Kong"
  },
  {
    "name": "Kowloon",
    "country": "HK",
    "lat": 22.31667,
    "long": 114.18333,
    "zone": "Asia/Hong_Kong"
  },
  {
    "name": "Hong Kong",
    "country": "HK",
    "lat": 22.28552,
    "long": 114.15769,
    "zone": "Asia/Hong_Kong"
  },
  {
    "name": "Tegucigalpa",
    "country": "HN",
    "lat": 14.0818,
    "long": -87.20681,
    "zone": "America/Tegucigalpa"
  },
  {
    "name": "San Pedro Sula",
    "country": "HN",
    "lat": 15.50417,
    "long": -88.025,
    "zone": "America/Tegucigalpa"
  },
  {
    "name": "La Ceiba",
    "country": "HN",
    "lat": 15.75971,
    "long": -86.78221,
    "zone": "America/Tegucigalpa"
  },
  {
    "name": "El Progreso",
    "country": "HN",
    "lat": 15.4,
    "long": -87.8,
    "zone": "America/Tegucigalpa"
  },
  {
    "name": "Choloma",
    "country": "HN",
    "lat": 15.61444,
    "long": -87.95302,
    "zone": "America/Tegucigalpa"
  },
  {
    "name": "Zagreb",
    "country": "HR",
    "lat": 45.81444,
    "long": 15.97798,
    "zone": "Europe/Zagreb"
  },
  {
    "name": "Split",
    "country": "HR",
    "lat": 43.50891,
    "long": 16.43915,
    "zone": "Europe/Zagreb"
  },
  {
    "name": "Rijeka",
    "country": "HR",
    "lat": 45.34306,
    "long": 14.40917,
    "zone": "Europe/Zagreb"
  },
  {
    "name": "Zagreb - Centar",
    "country": "HR",
    "lat": 45.81313,
    "long": 15.97753,
    "zone": "Europe/Zagreb"
  },
  {
    "name": "Port-de-Paix",
    "country": "HT",
    "lat": 19.9389,
    "long": -72.83257,
    "zone": "America/Port-au-Prince"
  },
  {
    "name": "Port-au-Prince",
    "country": "HT",
    "lat": 18.53917,
    "long": -72.335,
    "zone": "America/Port-au-Prince"
  },
  {
    "name": "Tigwav",
    "country": "HT",
    "lat": 18.42939,
    "long": -72.86297,
    "zone": "America/Port-au-Prince"
  },
  {
    "name": "Pétionville",
    "country": "HT",
    "lat": 18.5125,
    "long": -72.28528,
    "zone": "America/Port-au-Prince"
  },
  {
    "name": "Léogâne",
    "country": "HT",
    "lat": 18.50959,
    "long": -72.63147,
    "zone": "America/Port-au-Prince"
  },
  {
    "name": "Jacmel",
    "country": "HT",
    "lat": 18.23427,
    "long": -72.53539,
    "zone": "America/Port-au-Prince"
  },
  {
    "name": "Delmas 73",
    "country": "HT",
    "lat": 18.54472,
    "long": -72.30278,
    "zone": "America/Port-au-Prince"
  },
  {
    "name": "Croix des Bouquets",
    "country": "HT",
    "lat": 18.57512,
    "long": -72.22302,
    "zone": "America/Port-au-Prince"
  },
  {
    "name": "Les Cayes",
    "country": "HT",
    "lat": 18.19331,
    "long": -73.74601,
    "zone": "America/Port-au-Prince"
  },
  {
    "name": "Carrefour",
    "country": "HT",
    "lat": 18.54114,
    "long": -72.39922,
    "zone": "America/Port-au-Prince"
  },
  {
    "name": "Okap",
    "country": "HT",
    "lat": 19.75938,
    "long": -72.19815,
    "zone": "America/Port-au-Prince"
  },
  {
    "name": "Szeged",
    "country": "HU",
    "lat": 46.253,
    "long": 20.14824,
    "zone": "Europe/Budapest"
  },
  {
    "name": "Nyíregyháza",
    "country": "HU",
    "lat": 47.95539,
    "long": 21.71671,
    "zone": "Europe/Budapest"
  },
  {
    "name": "Miskolc",
    "country": "HU",
    "lat": 48.1,
    "long": 20.78333,
    "zone": "Europe/Budapest"
  },
  {
    "name": "Debrecen",
    "country": "HU",
    "lat": 47.53333,
    "long": 21.63333,
    "zone": "Europe/Budapest"
  },
  {
    "name": "Székesfehérvár",
    "country": "HU",
    "lat": 47.18995,
    "long": 18.41034,
    "zone": "Europe/Budapest"
  },
  {
    "name": "Pécs",
    "country": "HU",
    "lat": 46.08333,
    "long": 18.23333,
    "zone": "Europe/Budapest"
  },
  {
    "name": "Kecskemét",
    "country": "HU",
    "lat": 46.90618,
    "long": 19.69128,
    "zone": "Europe/Budapest"
  },
  {
    "name": "Győr",
    "country": "HU",
    "lat": 47.68333,
    "long": 17.63512,
    "zone": "Europe/Budapest"
  },
  {
    "name": "Budapest",
    "country": "HU",
    "lat": 47.49801,
    "long": 19.03991,
    "zone": "Europe/Budapest"
  },
  {
    "name": "Budapest XI. kerület",
    "country": "HU",
    "lat": 47.47603,
    "long": 19.03605,
    "zone": "Europe/Budapest"
  },
  {
    "name": "Budapest XIV. kerület",
    "country": "HU",
    "lat": 47.5183,
    "long": 19.10789,
    "zone": "Europe/Budapest"
  },
  {
    "name": "Budapest XIII. kerület",
    "country": "HU",
    "lat": 47.52978,
    "long": 19.08068,
    "zone": "Europe/Budapest"
  },
  {
    "name": "Budapest III. kerület",
    "country": "HU",
    "lat": 47.54157,
    "long": 19.04501,
    "zone": "Europe/Budapest"
  },
  {
    "name": "Tebingtinggi",
    "country": "ID",
    "lat": 3.3285,
    "long": 99.1625,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Tanjungbalai",
    "country": "ID",
    "lat": 2.96667,
    "long": 99.8,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Sunggal",
    "country": "ID",
    "lat": 3.5765,
    "long": 98.6151,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Rantauprapat",
    "country": "ID",
    "lat": 2.1,
    "long": 99.83333,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Percut",
    "country": "ID",
    "lat": 3.6253,
    "long": 98.864,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Perbaungan",
    "country": "ID",
    "lat": 3.5679,
    "long": 98.956,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Pematangsiantar",
    "country": "ID",
    "lat": 2.9595,
    "long": 99.0687,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Padangsidempuan",
    "country": "ID",
    "lat": 1.37952,
    "long": 99.27146,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Medan",
    "country": "ID",
    "lat": 3.58333,
    "long": 98.66667,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Kisaran",
    "country": "ID",
    "lat": 2.9845,
    "long": 99.6158,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Binjai",
    "country": "ID",
    "lat": 3.6001,
    "long": 98.4854,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Belawan",
    "country": "ID",
    "lat": 3.7755,
    "long": 98.6832,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Banda Aceh",
    "country": "ID",
    "lat": 5.5577,
    "long": 95.3222,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Yogyakarta",
    "country": "ID",
    "lat": -7.78278,
    "long": 110.36083,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Weru",
    "country": "ID",
    "lat": -6.711,
    "long": 108.5037,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Ungaran",
    "country": "ID",
    "lat": -7.13972,
    "long": 110.405,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Makassar",
    "country": "ID",
    "lat": -5.14,
    "long": 119.4221,
    "zone": "Asia/Makassar"
  },
  {
    "name": "Ternate",
    "country": "ID",
    "lat": 0.79065,
    "long": 127.38424,
    "zone": "Asia/Jayapura"
  },
  {
    "name": "Tegal",
    "country": "ID",
    "lat": -6.8694,
    "long": 109.1402,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Tasikmalaya",
    "country": "ID",
    "lat": -7.3274,
    "long": 108.2207,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Tanjungpinang",
    "country": "ID",
    "lat": 0.91667,
    "long": 104.45,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Bandarlampung",
    "country": "ID",
    "lat": -5.42544,
    "long": 105.25803,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Tangerang",
    "country": "ID",
    "lat": -6.17806,
    "long": 106.63,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Surakarta",
    "country": "ID",
    "lat": -7.55611,
    "long": 110.83167,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Surabaya",
    "country": "ID",
    "lat": -7.24917,
    "long": 112.75083,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Sumedang Utara",
    "country": "ID",
    "lat": -6.85,
    "long": 107.91667,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Sukabumi",
    "country": "ID",
    "lat": -6.91806,
    "long": 106.92667,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Sorong",
    "country": "ID",
    "lat": -0.87956,
    "long": 131.26104,
    "zone": "Asia/Jayapura"
  },
  {
    "name": "Soreang",
    "country": "ID",
    "lat": -7.03306,
    "long": 107.51833,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Situbondo",
    "country": "ID",
    "lat": -7.70623,
    "long": 114.00976,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Singkawang",
    "country": "ID",
    "lat": 0.90925,
    "long": 108.98463,
    "zone": "Asia/Pontianak"
  },
  {
    "name": "Singaraja",
    "country": "ID",
    "lat": -8.112,
    "long": 115.08818,
    "zone": "Asia/Makassar"
  },
  {
    "name": "Sidoarjo",
    "country": "ID",
    "lat": -7.4478,
    "long": 112.7183,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Serang",
    "country": "ID",
    "lat": -6.1149,
    "long": 106.1502,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Sepatan",
    "country": "ID",
    "lat": -6.11889,
    "long": 106.575,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Semarang",
    "country": "ID",
    "lat": -6.9932,
    "long": 110.4203,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Sawangan",
    "country": "ID",
    "lat": -6.40278,
    "long": 106.77444,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Samarinda",
    "country": "ID",
    "lat": -0.48585,
    "long": 117.1466,
    "zone": "Asia/Makassar"
  },
  {
    "name": "Salatiga",
    "country": "ID",
    "lat": -7.33194,
    "long": 110.49278,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Rengasdengklok",
    "country": "ID",
    "lat": -6.15917,
    "long": 107.29806,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Rangkasbitung",
    "country": "ID",
    "lat": -6.3591,
    "long": 106.2494,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Purwokerto",
    "country": "ID",
    "lat": -7.42139,
    "long": 109.23444,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Purwodadi",
    "country": "ID",
    "lat": -7.0868,
    "long": 110.9158,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Purwakarta",
    "country": "ID",
    "lat": -6.55694,
    "long": 107.44333,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Probolinggo",
    "country": "ID",
    "lat": -7.7543,
    "long": 113.2159,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Pontianak",
    "country": "ID",
    "lat": -0.03109,
    "long": 109.32199,
    "zone": "Asia/Pontianak"
  },
  {
    "name": "Plumbon",
    "country": "ID",
    "lat": -6.705,
    "long": 108.47278,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Prabumulih",
    "country": "ID",
    "lat": -3.43447,
    "long": 104.23056,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Pemalang",
    "country": "ID",
    "lat": -6.9,
    "long": 109.36667,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Pekanbaru",
    "country": "ID",
    "lat": 0.53333,
    "long": 101.45,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Pekalongan",
    "country": "ID",
    "lat": -6.8886,
    "long": 109.6753,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Payakumbuh",
    "country": "ID",
    "lat": -0.2159,
    "long": 100.6334,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Pati",
    "country": "ID",
    "lat": -6.7559,
    "long": 111.038,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Pasuruan",
    "country": "ID",
    "lat": -7.6453,
    "long": 112.9075,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Paseh",
    "country": "ID",
    "lat": -7.1026,
    "long": 107.7641,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Pasarkemis",
    "country": "ID",
    "lat": -6.17028,
    "long": 106.53028,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Parung",
    "country": "ID",
    "lat": -6.42139,
    "long": 106.73306,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Parepare",
    "country": "ID",
    "lat": -4.0135,
    "long": 119.6255,
    "zone": "Asia/Makassar"
  },
  {
    "name": "Pangkalpinang",
    "country": "ID",
    "lat": -2.12914,
    "long": 106.11377,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Pamulang",
    "country": "ID",
    "lat": -6.34278,
    "long": 106.73833,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Pamanukan",
    "country": "ID",
    "lat": -6.28417,
    "long": 107.81056,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Palu",
    "country": "ID",
    "lat": -0.8917,
    "long": 119.8707,
    "zone": "Asia/Makassar"
  },
  {
    "name": "Palopo",
    "country": "ID",
    "lat": -2.9925,
    "long": 120.19694,
    "zone": "Asia/Makassar"
  },
  {
    "name": "Palembang",
    "country": "ID",
    "lat": -2.91673,
    "long": 104.7458,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Palangkaraya",
    "country": "ID",
    "lat": -2.2136,
    "long": 113.9108,
    "zone": "Asia/Pontianak"
  },
  {
    "name": "Padang",
    "country": "ID",
    "lat": -0.94924,
    "long": 100.35427,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Mojokerto",
    "country": "ID",
    "lat": -7.4664,
    "long": 112.4338,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Metro",
    "country": "ID",
    "lat": -5.11306,
    "long": 105.30667,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Mataram",
    "country": "ID",
    "lat": -8.58333,
    "long": 116.11667,
    "zone": "Asia/Makassar"
  },
  {
    "name": "Martapura",
    "country": "ID",
    "lat": -3.4109,
    "long": 114.8642,
    "zone": "Asia/Makassar"
  },
  {
    "name": "Manado",
    "country": "ID",
    "lat": 1.48218,
    "long": 124.84892,
    "zone": "Asia/Makassar"
  },
  {
    "name": "Malang",
    "country": "ID",
    "lat": -7.9797,
    "long": 112.6304,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Magelang",
    "country": "ID",
    "lat": -7.47056,
    "long": 110.21778,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Madiun",
    "country": "ID",
    "lat": -7.6298,
    "long": 111.5239,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Lumajang",
    "country": "ID",
    "lat": -8.1335,
    "long": 113.2248,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Lubuklinggau",
    "country": "ID",
    "lat": -3.2945,
    "long": 102.8614,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Loa Janan",
    "country": "ID",
    "lat": -0.58295,
    "long": 117.09503,
    "zone": "Asia/Makassar"
  },
  {
    "name": "Lembang",
    "country": "ID",
    "lat": -6.81167,
    "long": 107.6175,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Lawang",
    "country": "ID",
    "lat": -7.8353,
    "long": 112.6947,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Labuhanbajo",
    "country": "ID",
    "lat": -8.4964,
    "long": 119.8877,
    "zone": "Asia/Makassar"
  },
  {
    "name": "Kresek",
    "country": "ID",
    "lat": -6.13139,
    "long": 106.37972,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Klaten",
    "country": "ID",
    "lat": -7.70583,
    "long": 110.60639,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Kendari",
    "country": "ID",
    "lat": -3.9778,
    "long": 122.51507,
    "zone": "Asia/Makassar"
  },
  {
    "name": "Kedungwuni",
    "country": "ID",
    "lat": -6.97038,
    "long": 109.64794,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Kediri",
    "country": "ID",
    "lat": -7.81667,
    "long": 112.01667,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Jombang",
    "country": "ID",
    "lat": -7.54595,
    "long": 112.23307,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Jember",
    "country": "ID",
    "lat": -8.17211,
    "long": 113.69953,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Jambi City",
    "country": "ID",
    "lat": -1.6,
    "long": 103.61667,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Jakarta",
    "country": "ID",
    "lat": -6.21462,
    "long": 106.84513,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Indramayu",
    "country": "ID",
    "lat": -6.32639,
    "long": 108.32,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Grogol",
    "country": "ID",
    "lat": -7.60111,
    "long": 110.81861,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Gorontalo",
    "country": "ID",
    "lat": 0.5412,
    "long": 123.0595,
    "zone": "Asia/Makassar"
  },
  {
    "name": "Dumai",
    "country": "ID",
    "lat": 1.66711,
    "long": 101.44316,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Depok",
    "country": "ID",
    "lat": -7.7625,
    "long": 110.43167,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Depok",
    "country": "ID",
    "lat": -6.4,
    "long": 106.81861,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Denpasar",
    "country": "ID",
    "lat": -8.65,
    "long": 115.21667,
    "zone": "Asia/Makassar"
  },
  {
    "name": "Curug",
    "country": "ID",
    "lat": -6.26583,
    "long": 106.55639,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Citeureup",
    "country": "ID",
    "lat": -6.48556,
    "long": 106.88194,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Cirebon",
    "country": "ID",
    "lat": -6.7063,
    "long": 108.557,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Ciputat",
    "country": "ID",
    "lat": -6.2375,
    "long": 106.69556,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Cimahi",
    "country": "ID",
    "lat": -6.87222,
    "long": 107.5425,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Cileunyi",
    "country": "ID",
    "lat": -6.93889,
    "long": 107.75278,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Cileungsir",
    "country": "ID",
    "lat": -6.39472,
    "long": 106.95917,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Cikarang",
    "country": "ID",
    "lat": -6.26111,
    "long": 107.15278,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Cikampek",
    "country": "ID",
    "lat": -6.41972,
    "long": 107.45583,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Cibinong",
    "country": "ID",
    "lat": -6.48167,
    "long": 106.85417,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Ciamis",
    "country": "ID",
    "lat": -7.3257,
    "long": 108.3534,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Ciampea",
    "country": "ID",
    "lat": -6.55472,
    "long": 106.70083,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Bontang",
    "country": "ID",
    "lat": 0.1324,
    "long": 117.4854,
    "zone": "Asia/Makassar"
  },
  {
    "name": "Bogor",
    "country": "ID",
    "lat": -6.59444,
    "long": 106.78917,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Blitar",
    "country": "ID",
    "lat": -8.0983,
    "long": 112.1681,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Bitung",
    "country": "ID",
    "lat": 1.45697,
    "long": 125.1895,
    "zone": "Asia/Makassar"
  },
  {
    "name": "Bengkulu",
    "country": "ID",
    "lat": -3.80044,
    "long": 102.26554,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Bekasi",
    "country": "ID",
    "lat": -6.2349,
    "long": 106.9896,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Baturaja",
    "country": "ID",
    "lat": -4.12891,
    "long": 104.16695,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Batang",
    "country": "ID",
    "lat": -6.4846,
    "long": 110.7083,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Banyuwangi",
    "country": "ID",
    "lat": -8.2325,
    "long": 114.35755,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Banjarmasin",
    "country": "ID",
    "lat": -3.31987,
    "long": 114.59075,
    "zone": "Asia/Makassar"
  },
  {
    "name": "Banjaran",
    "country": "ID",
    "lat": -7.04528,
    "long": 107.58778,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Bangil",
    "country": "ID",
    "lat": -7.59939,
    "long": 112.8186,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Bandung",
    "country": "ID",
    "lat": -6.90389,
    "long": 107.61861,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Balikpapan",
    "country": "ID",
    "lat": -1.26753,
    "long": 116.82887,
    "zone": "Asia/Makassar"
  },
  {
    "name": "Astanajapura",
    "country": "ID",
    "lat": -6.8017,
    "long": 108.6311,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Arjawinangun",
    "country": "ID",
    "lat": -6.64528,
    "long": 108.41028,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Ambon",
    "country": "ID",
    "lat": -3.69543,
    "long": 128.18141,
    "zone": "Asia/Jayapura"
  },
  {
    "name": "Adiwerna",
    "country": "ID",
    "lat": -6.9375,
    "long": 109.1325,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Padalarang",
    "country": "ID",
    "lat": -6.83778,
    "long": 107.47278,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Cikupa",
    "country": "ID",
    "lat": -6.23639,
    "long": 106.50833,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Teluknaga",
    "country": "ID",
    "lat": -6.09889,
    "long": 106.63806,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Kupang",
    "country": "ID",
    "lat": -10.1718,
    "long": 123.6075,
    "zone": "Asia/Makassar"
  },
  {
    "name": "Jayapura",
    "country": "ID",
    "lat": -2.53371,
    "long": 140.71813,
    "zone": "Asia/Jayapura"
  },
  {
    "name": "City of Balikpapan",
    "country": "ID",
    "lat": -1.24204,
    "long": 116.89419,
    "zone": "Asia/Makassar"
  },
  {
    "name": "South Tangerang",
    "country": "ID",
    "lat": -6.28862,
    "long": 106.71789,
    "zone": "Asia/Jakarta"
  },
  {
    "name": "Dún Laoghaire",
    "country": "IE",
    "lat": 53.29395,
    "long": -6.13586,
    "zone": "Europe/Dublin"
  },
  {
    "name": "Dublin",
    "country": "IE",
    "lat": 53.33306,
    "long": -6.24889,
    "zone": "Europe/Dublin"
  },
  {
    "name": "Cork",
    "country": "IE",
    "lat": 51.89797,
    "long": -8.47061,
    "zone": "Europe/Dublin"
  },
  {
    "name": "Jerusalem",
    "country": "IL",
    "lat": 31.76904,
    "long": 35.21633,
    "zone": "Asia/Jerusalem"
  },
  {
    "name": "Tel Aviv",
    "country": "IL",
    "lat": 32.08088,
    "long": 34.78057,
    "zone": "Asia/Jerusalem"
  },
  {
    "name": "Rishon LeẔiyyon",
    "country": "IL",
    "lat": 31.97102,
    "long": 34.78939,
    "zone": "Asia/Jerusalem"
  },
  {
    "name": "Ramat Gan",
    "country": "IL",
    "lat": 32.08227,
    "long": 34.81065,
    "zone": "Asia/Jerusalem"
  },
  {
    "name": "Petaẖ Tiqwa",
    "country": "IL",
    "lat": 32.08707,
    "long": 34.88747,
    "zone": "Asia/Jerusalem"
  },
  {
    "name": "Netanya",
    "country": "IL",
    "lat": 32.33291,
    "long": 34.85992,
    "zone": "Asia/Jerusalem"
  },
  {
    "name": "H̱olon",
    "country": "IL",
    "lat": 32.01034,
    "long": 34.77918,
    "zone": "Asia/Jerusalem"
  },
  {
    "name": "Haifa",
    "country": "IL",
    "lat": 32.81841,
    "long": 34.9885,
    "zone": "Asia/Jerusalem"
  },
  {
    "name": "Bené Beraq",
    "country": "IL",
    "lat": 32.08074,
    "long": 34.8338,
    "zone": "Asia/Jerusalem"
  },
  {
    "name": "Beersheba",
    "country": "IL",
    "lat": 31.25181,
    "long": 34.7913,
    "zone": "Asia/Jerusalem"
  },
  {
    "name": "Bat Yam",
    "country": "IL",
    "lat": 32.02379,
    "long": 34.75185,
    "zone": "Asia/Jerusalem"
  },
  {
    "name": "Ashqelon",
    "country": "IL",
    "lat": 31.66926,
    "long": 34.57149,
    "zone": "Asia/Jerusalem"
  },
  {
    "name": "Ashdod",
    "country": "IL",
    "lat": 31.79213,
    "long": 34.64966,
    "zone": "Asia/Jerusalem"
  },
  {
    "name": "West Jerusalem",
    "country": "IL",
    "lat": 31.78199,
    "long": 35.21961,
    "zone": "Asia/Jerusalem"
  },
  {
    "name": "Yelahanka",
    "country": "IN",
    "lat": 13.10129,
    "long": 77.59626,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Yavatmāl",
    "country": "IN",
    "lat": 20.39324,
    "long": 78.13201,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Yamunānagar",
    "country": "IN",
    "lat": 30.12796,
    "long": 77.28371,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Wardha",
    "country": "IN",
    "lat": 20.73807,
    "long": 78.59671,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Warangal",
    "country": "IN",
    "lat": 18,
    "long": 79.58333,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Vizianagaram",
    "country": "IN",
    "lat": 18.11692,
    "long": 83.41148,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Visakhapatnam",
    "country": "IN",
    "lat": 17.68009,
    "long": 83.20161,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Virār",
    "country": "IN",
    "lat": 19.45591,
    "long": 72.81136,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Vijayawāda",
    "country": "IN",
    "lat": 16.51928,
    "long": 80.63049,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Vidisha",
    "country": "IN",
    "lat": 23.52435,
    "long": 77.80972,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Verāval",
    "country": "IN",
    "lat": 20.9077,
    "long": 70.36786,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Vellore",
    "country": "IN",
    "lat": 12.9184,
    "long": 79.13255,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Vejalpur",
    "country": "IN",
    "lat": 22.69021,
    "long": 73.56299,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Vāsco Da Gāma",
    "country": "IN",
    "lat": 15.39585,
    "long": 73.81568,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Varanasi",
    "country": "IN",
    "lat": 25.31668,
    "long": 83.01041,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Vadodara",
    "country": "IN",
    "lat": 22.29941,
    "long": 73.20812,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Uppal Kalan",
    "country": "IN",
    "lat": 17.40577,
    "long": 78.55911,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Unnāo",
    "country": "IN",
    "lat": 26.54706,
    "long": 80.48781,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Ulhasnagar",
    "country": "IN",
    "lat": 19.21667,
    "long": 73.15,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Ujjain",
    "country": "IN",
    "lat": 23.18239,
    "long": 75.77643,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Udipi",
    "country": "IN",
    "lat": 13.33467,
    "long": 74.74617,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Udgīr",
    "country": "IN",
    "lat": 18.39258,
    "long": 77.11756,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Udaipur",
    "country": "IN",
    "lat": 24.57117,
    "long": 73.69183,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Tumkūr",
    "country": "IN",
    "lat": 13.34149,
    "long": 77.101,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Thiruvananthapuram",
    "country": "IN",
    "lat": 8.4855,
    "long": 76.94924,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Trichūr",
    "country": "IN",
    "lat": 10.51667,
    "long": 76.21667,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Tonk",
    "country": "IN",
    "lat": 26.16638,
    "long": 75.78824,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Titāgarh",
    "country": "IN",
    "lat": 22.74252,
    "long": 88.37326,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Tiruvottiyūr",
    "country": "IN",
    "lat": 13.15823,
    "long": 80.30181,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Tiruvannāmalai",
    "country": "IN",
    "lat": 12.22662,
    "long": 79.07461,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Tiruppur",
    "country": "IN",
    "lat": 11.11541,
    "long": 77.35456,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Tirupati",
    "country": "IN",
    "lat": 13.63551,
    "long": 79.41989,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Tirunelveli",
    "country": "IN",
    "lat": 8.72518,
    "long": 77.68452,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Tiruchirappalli",
    "country": "IN",
    "lat": 10.8155,
    "long": 78.69651,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Thanjāvūr",
    "country": "IN",
    "lat": 10.78523,
    "long": 79.13909,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Thānesar",
    "country": "IN",
    "lat": 29.97323,
    "long": 76.83214,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Thāne",
    "country": "IN",
    "lat": 19.19704,
    "long": 72.96355,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Teni",
    "country": "IN",
    "lat": 10.01531,
    "long": 77.482,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Tādepallegūdem",
    "country": "IN",
    "lat": 16.81304,
    "long": 81.52874,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Suriāpet",
    "country": "IN",
    "lat": 17.14054,
    "long": 79.62045,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Surendranagar",
    "country": "IN",
    "lat": 22.72706,
    "long": 71.64856,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Sūrat",
    "country": "IN",
    "lat": 21.19594,
    "long": 72.83023,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Sultānpur",
    "country": "IN",
    "lat": 26.25996,
    "long": 82.07314,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Sūjāngarh",
    "country": "IN",
    "lat": 27.7,
    "long": 74.46667,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Srinagar",
    "country": "IN",
    "lat": 34.08842,
    "long": 74.80298,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Srīkākulam",
    "country": "IN",
    "lat": 18.29692,
    "long": 83.89732,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Sonīpat",
    "country": "IN",
    "lat": 28.99478,
    "long": 77.01937,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Siwān",
    "country": "IN",
    "lat": 26.22152,
    "long": 84.35879,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Sītāpur",
    "country": "IN",
    "lat": 27.56192,
    "long": 80.68265,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Sirsa",
    "country": "IN",
    "lat": 29.53489,
    "long": 75.02898,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Shimla",
    "country": "IN",
    "lat": 31.10442,
    "long": 77.16662,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Silchar",
    "country": "IN",
    "lat": 24.82733,
    "long": 92.79787,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Sīkar",
    "country": "IN",
    "lat": 27.61206,
    "long": 75.13996,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Shyamnagar",
    "country": "IN",
    "lat": 22.83333,
    "long": 88.36667,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Shrīrāmpur",
    "country": "IN",
    "lat": 22.75278,
    "long": 88.34222,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Solāpur",
    "country": "IN",
    "lat": 17.67152,
    "long": 75.91044,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Shivpurī",
    "country": "IN",
    "lat": 25.42348,
    "long": 77.66067,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Shimoga",
    "country": "IN",
    "lat": 13.93157,
    "long": 75.56791,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Shillong",
    "country": "IN",
    "lat": 25.56892,
    "long": 91.88313,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Shiliguri",
    "country": "IN",
    "lat": 26.71004,
    "long": 88.42851,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Shāntipur",
    "country": "IN",
    "lat": 23.24723,
    "long": 88.43302,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Shāhjahānpur",
    "country": "IN",
    "lat": 27.88142,
    "long": 79.9109,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Seonī",
    "country": "IN",
    "lat": 22.08664,
    "long": 79.55043,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Secunderabad",
    "country": "IN",
    "lat": 17.50427,
    "long": 78.54263,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Sawāi Mādhopur",
    "country": "IN",
    "lat": 26.02301,
    "long": 76.34408,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Satna",
    "country": "IN",
    "lat": 24.58225,
    "long": 80.8248,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Sātāra",
    "country": "IN",
    "lat": 17.68589,
    "long": 73.99333,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Sāngli",
    "country": "IN",
    "lat": 16.85438,
    "long": 74.56417,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Sambhal",
    "country": "IN",
    "lat": 28.58323,
    "long": 78.56689,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Sambalpur",
    "country": "IN",
    "lat": 21.45,
    "long": 83.96667,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Salem",
    "country": "IN",
    "lat": 11.65117,
    "long": 78.15867,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Saharsa",
    "country": "IN",
    "lat": 25.88505,
    "long": 86.59471,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Sahāranpur",
    "country": "IN",
    "lat": 29.9679,
    "long": 77.54522,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Sāgar",
    "country": "IN",
    "lat": 23.84251,
    "long": 78.74386,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Roorkee",
    "country": "IN",
    "lat": 29.86632,
    "long": 77.89118,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Rohtak",
    "country": "IN",
    "lat": 28.89447,
    "long": 76.58917,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Robertsonpet",
    "country": "IN",
    "lat": 12.95629,
    "long": 78.27543,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Rishra",
    "country": "IN",
    "lat": 22.72394,
    "long": 88.34563,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Rewāri",
    "country": "IN",
    "lat": 28.199,
    "long": 76.6183,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Rewa",
    "country": "IN",
    "lat": 24.53399,
    "long": 81.29596,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Ratlām",
    "country": "IN",
    "lat": 23.33033,
    "long": 75.04032,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Rānīganj",
    "country": "IN",
    "lat": 23.6164,
    "long": 87.13061,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Ranchi",
    "country": "IN",
    "lat": 23.34777,
    "long": 85.33856,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Rāmpur",
    "country": "IN",
    "lat": 28.80904,
    "long": 79.02895,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Rāmgundam",
    "country": "IN",
    "lat": 18.80084,
    "long": 79.45206,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Rāj Nāndgaon",
    "country": "IN",
    "lat": 21.1,
    "long": 81.03333,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Rājkot",
    "country": "IN",
    "lat": 22.29161,
    "long": 70.79322,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Rajapalaiyam",
    "country": "IN",
    "lat": 9.45296,
    "long": 77.55335,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Rājahmundry",
    "country": "IN",
    "lat": 17.00517,
    "long": 81.77784,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Raipur",
    "country": "IN",
    "lat": 21.23333,
    "long": 81.63333,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Raigarh",
    "country": "IN",
    "lat": 21.9,
    "long": 83.4,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Rāiganj",
    "country": "IN",
    "lat": 25.61281,
    "long": 88.12449,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Rāichūr",
    "country": "IN",
    "lat": 16.2047,
    "long": 77.354,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Rāe Bareli",
    "country": "IN",
    "lat": 26.2191,
    "long": 81.24499,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Kollam",
    "country": "IN",
    "lat": 8.88113,
    "long": 76.58469,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Puruliya",
    "country": "IN",
    "lat": 23.33062,
    "long": 86.36303,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Purnia",
    "country": "IN",
    "lat": 25.77895,
    "long": 87.47422,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Puri",
    "country": "IN",
    "lat": 19.79825,
    "long": 85.82494,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Pune",
    "country": "IN",
    "lat": 18.51957,
    "long": 73.85535,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Punāsa",
    "country": "IN",
    "lat": 22.23544,
    "long": 76.39295,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Pudukkottai",
    "country": "IN",
    "lat": 10.38128,
    "long": 78.82141,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Proddatūr",
    "country": "IN",
    "lat": 14.7502,
    "long": 78.54813,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Port Blair",
    "country": "IN",
    "lat": 11.66667,
    "long": 92.75,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Porbandar",
    "country": "IN",
    "lat": 21.64219,
    "long": 69.60929,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Ponnāni",
    "country": "IN",
    "lat": 10.76695,
    "long": 75.92523,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Puducherry",
    "country": "IN",
    "lat": 11.93381,
    "long": 79.82979,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Pimpri",
    "country": "IN",
    "lat": 18.62292,
    "long": 73.80696,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Pīlībhīt",
    "country": "IN",
    "lat": 28.63098,
    "long": 79.80338,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Phagwāra",
    "country": "IN",
    "lat": 31.2185,
    "long": 75.77166,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Patna",
    "country": "IN",
    "lat": 25.60222,
    "long": 85.11936,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Patiāla",
    "country": "IN",
    "lat": 30.32715,
    "long": 76.40266,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Pathankot",
    "country": "IN",
    "lat": 32.27306,
    "long": 75.65256,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Pātan",
    "country": "IN",
    "lat": 23.8507,
    "long": 72.12963,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Parbhani",
    "country": "IN",
    "lat": 19.26855,
    "long": 76.77081,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Panvel",
    "country": "IN",
    "lat": 18.98878,
    "long": 73.11013,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Pānīpat",
    "country": "IN",
    "lat": 29.39005,
    "long": 76.96949,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Pānihāti",
    "country": "IN",
    "lat": 22.69089,
    "long": 88.37404,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Palwal",
    "country": "IN",
    "lat": 28.14327,
    "long": 77.32698,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Pallāvaram",
    "country": "IN",
    "lat": 12.96796,
    "long": 80.15025,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Pāli",
    "country": "IN",
    "lat": 25.77276,
    "long": 73.32335,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Palakkad",
    "country": "IN",
    "lat": 10.7744,
    "long": 76.65625,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Pālanpur",
    "country": "IN",
    "lat": 24.17097,
    "long": 72.43821,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Orai",
    "country": "IN",
    "lat": 25.99074,
    "long": 79.45315,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Ongole",
    "country": "IN",
    "lat": 15.50642,
    "long": 80.04867,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Nowrangapur",
    "country": "IN",
    "lat": 19.23114,
    "long": 82.54826,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Nizāmābād",
    "country": "IN",
    "lat": 18.67154,
    "long": 78.0988,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "New Delhi",
    "country": "IN",
    "lat": 28.63576,
    "long": 77.22445,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Nellore",
    "country": "IN",
    "lat": 14.45363,
    "long": 79.98674,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Navadwīp",
    "country": "IN",
    "lat": 23.4067,
    "long": 88.36861,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Nashik",
    "country": "IN",
    "lat": 19.99727,
    "long": 73.79096,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Nāngloi Jāt",
    "country": "IN",
    "lat": 28.67957,
    "long": 77.06799,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Nandyāl",
    "country": "IN",
    "lat": 15.48879,
    "long": 78.48648,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Nandurbār",
    "country": "IN",
    "lat": 21.36608,
    "long": 74.23955,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Nanded",
    "country": "IN",
    "lat": 19.16023,
    "long": 77.31497,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Nalgonda",
    "country": "IN",
    "lat": 17.05439,
    "long": 79.26707,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Naihāti",
    "country": "IN",
    "lat": 22.89396,
    "long": 88.41521,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Nagpur",
    "country": "IN",
    "lat": 21.14631,
    "long": 79.08491,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Nāgercoil",
    "country": "IN",
    "lat": 8.17731,
    "long": 77.43437,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Nagda",
    "country": "IN",
    "lat": 23.45834,
    "long": 75.41759,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Nadiād",
    "country": "IN",
    "lat": 22.69385,
    "long": 72.86157,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Mysore",
    "country": "IN",
    "lat": 12.29791,
    "long": 76.63925,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Muzaffarpur",
    "country": "IN",
    "lat": 26.12259,
    "long": 85.39055,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Muzaffarnagar",
    "country": "IN",
    "lat": 29.47394,
    "long": 77.70414,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Murwāra",
    "country": "IN",
    "lat": 23.83677,
    "long": 80.39482,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Munger",
    "country": "IN",
    "lat": 25.37556,
    "long": 86.47352,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Motīhāri",
    "country": "IN",
    "lat": 26.65738,
    "long": 84.91922,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Morena",
    "country": "IN",
    "lat": 26.50286,
    "long": 78.00163,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Morbi",
    "country": "IN",
    "lat": 22.81731,
    "long": 70.8377,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Morādābād",
    "country": "IN",
    "lat": 28.83893,
    "long": 78.77684,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Moga",
    "country": "IN",
    "lat": 30.81383,
    "long": 75.16878,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Mirzāpur",
    "country": "IN",
    "lat": 25.14582,
    "long": 82.56975,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Miriālgūda",
    "country": "IN",
    "lat": 16.8722,
    "long": 79.56247,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Meerut",
    "country": "IN",
    "lat": 28.98002,
    "long": 77.70636,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Medinīpur",
    "country": "IN",
    "lat": 22.42114,
    "long": 87.32257,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Mau",
    "country": "IN",
    "lat": 25.94167,
    "long": 83.56111,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Mathura",
    "country": "IN",
    "lat": 27.50199,
    "long": 77.6833,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Marmagao",
    "country": "IN",
    "lat": 15.40927,
    "long": 73.78869,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Mangalore",
    "country": "IN",
    "lat": 12.91723,
    "long": 74.85603,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Mandya",
    "country": "IN",
    "lat": 12.52145,
    "long": 76.89527,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Māndu",
    "country": "IN",
    "lat": 22.36667,
    "long": 75.38333,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Mandsaur",
    "country": "IN",
    "lat": 24.07184,
    "long": 75.06986,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Māler Kotla",
    "country": "IN",
    "lat": 30.5309,
    "long": 75.87949,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Mālegaon",
    "country": "IN",
    "lat": 20.5537,
    "long": 74.52881,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Mahbūbnagar",
    "country": "IN",
    "lat": 16.74385,
    "long": 77.98597,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Madurai",
    "country": "IN",
    "lat": 9.91735,
    "long": 78.11962,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Chennai",
    "country": "IN",
    "lat": 13.08784,
    "long": 80.27847,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Madhyamgram",
    "country": "IN",
    "lat": 22.68944,
    "long": 88.44594,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Madanapalle",
    "country": "IN",
    "lat": 13.5503,
    "long": 78.50288,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Machilīpatnam",
    "country": "IN",
    "lat": 16.18747,
    "long": 81.13888,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Ludhiāna",
    "country": "IN",
    "lat": 30.91204,
    "long": 75.85379,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Lucknow",
    "country": "IN",
    "lat": 26.83928,
    "long": 80.92313,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Loni",
    "country": "IN",
    "lat": 28.75143,
    "long": 77.29023,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Latur",
    "country": "IN",
    "lat": 18.39721,
    "long": 76.56784,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Lalitpur",
    "country": "IN",
    "lat": 24.69055,
    "long": 78.41888,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Lakhīmpur",
    "country": "IN",
    "lat": 27.952,
    "long": 80.78257,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Kumbakonam",
    "country": "IN",
    "lat": 10.96209,
    "long": 79.39124,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Kulti",
    "country": "IN",
    "lat": 23.73166,
    "long": 86.84372,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Kūkatpalli",
    "country": "IN",
    "lat": 17.48486,
    "long": 78.41376,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Krishnanagar",
    "country": "IN",
    "lat": 23.40576,
    "long": 88.49073,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Kozhikode",
    "country": "IN",
    "lat": 11.24802,
    "long": 75.7804,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Kota",
    "country": "IN",
    "lat": 25.18254,
    "long": 75.83907,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Korba",
    "country": "IN",
    "lat": 22.3458,
    "long": 82.69633,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Kolhāpur",
    "country": "IN",
    "lat": 16.69563,
    "long": 74.23167,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Kolār",
    "country": "IN",
    "lat": 13.13671,
    "long": 78.12917,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Kishangarh",
    "country": "IN",
    "lat": 26.5741,
    "long": 74.86685,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Khurja",
    "country": "IN",
    "lat": 28.25436,
    "long": 77.85436,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Khardah",
    "country": "IN",
    "lat": 22.71861,
    "long": 88.37806,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Kharagpur",
    "country": "IN",
    "lat": 22.33971,
    "long": 87.32501,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Khanna",
    "country": "IN",
    "lat": 30.703,
    "long": 76.22106,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Khandwa",
    "country": "IN",
    "lat": 21.82451,
    "long": 76.35202,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Khammam",
    "country": "IN",
    "lat": 17.24767,
    "long": 80.14368,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Katihar",
    "country": "IN",
    "lat": 25.53852,
    "long": 87.57044,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Kashipur",
    "country": "IN",
    "lat": 29.21399,
    "long": 78.95693,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Karol Bāgh",
    "country": "IN",
    "lat": 28.65136,
    "long": 77.19072,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Karnāl",
    "country": "IN",
    "lat": 29.69197,
    "long": 76.98448,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Karīmnagar",
    "country": "IN",
    "lat": 18.43915,
    "long": 79.12856,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Kānpur",
    "country": "IN",
    "lat": 26.4478,
    "long": 80.34627,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Kānchipuram",
    "country": "IN",
    "lat": 12.83515,
    "long": 79.70006,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Kāmārhāti",
    "country": "IN",
    "lat": 22.67111,
    "long": 88.37472,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Kalyān",
    "country": "IN",
    "lat": 19.2437,
    "long": 73.13554,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Kākināda",
    "country": "IN",
    "lat": 16.96036,
    "long": 82.23809,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Kaithal",
    "country": "IN",
    "lat": 29.8019,
    "long": 76.39667,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Kānchrāpāra",
    "country": "IN",
    "lat": 22.95998,
    "long": 88.42849,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Jūnāgadh",
    "country": "IN",
    "lat": 21.51966,
    "long": 70.45981,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Jalandhar",
    "country": "IN",
    "lat": 31.32556,
    "long": 75.57917,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Jodhpur",
    "country": "IN",
    "lat": 26.26841,
    "long": 73.00594,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Jīnd",
    "country": "IN",
    "lat": 29.31617,
    "long": 76.31436,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Jhunjhunūn",
    "country": "IN",
    "lat": 28.12559,
    "long": 75.39797,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Jhānsi",
    "country": "IN",
    "lat": 25.45446,
    "long": 78.58221,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Jetpur",
    "country": "IN",
    "lat": 21.75482,
    "long": 70.62347,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Jaunpur",
    "country": "IN",
    "lat": 25.75506,
    "long": 82.68361,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Jāmuria",
    "country": "IN",
    "lat": 23.70468,
    "long": 87.07872,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Jamshedpur",
    "country": "IN",
    "lat": 22.80278,
    "long": 86.18545,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Jāmnagar",
    "country": "IN",
    "lat": 22.47292,
    "long": 70.06673,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Jammu",
    "country": "IN",
    "lat": 32.73569,
    "long": 74.86911,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Jamālpur",
    "country": "IN",
    "lat": 25.31258,
    "long": 86.48888,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Jalpāiguri",
    "country": "IN",
    "lat": 26.51667,
    "long": 88.73333,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Jālna",
    "country": "IN",
    "lat": 19.84102,
    "long": 75.88636,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Jālgaon",
    "country": "IN",
    "lat": 21.01009,
    "long": 75.56843,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Jaipur",
    "country": "IN",
    "lat": 26.91962,
    "long": 75.78781,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Jagādhri",
    "country": "IN",
    "lat": 30.16719,
    "long": 77.30367,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Jabalpur",
    "country": "IN",
    "lat": 23.16697,
    "long": 79.95006,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Itārsi",
    "country": "IN",
    "lat": 22.61477,
    "long": 77.76222,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Ingrāj Bāzār",
    "country": "IN",
    "lat": 25.00447,
    "long": 88.14573,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Indore",
    "country": "IN",
    "lat": 22.71792,
    "long": 75.8333,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Imphal",
    "country": "IN",
    "lat": 24.80805,
    "long": 93.9442,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Ichalkaranji",
    "country": "IN",
    "lat": 16.69117,
    "long": 74.46054,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Hyderabad",
    "country": "IN",
    "lat": 17.38405,
    "long": 78.45636,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Hugli",
    "country": "IN",
    "lat": 22.90877,
    "long": 88.39674,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Hubli",
    "country": "IN",
    "lat": 15.34776,
    "long": 75.13378,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Hosūr",
    "country": "IN",
    "lat": 12.73647,
    "long": 77.83264,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Hospet",
    "country": "IN",
    "lat": 15.26954,
    "long": 76.3871,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Hoshiārpur",
    "country": "IN",
    "lat": 31.53238,
    "long": 75.90799,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Hoshangābād",
    "country": "IN",
    "lat": 22.75357,
    "long": 77.72249,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Hisar",
    "country": "IN",
    "lat": 29.15394,
    "long": 75.72294,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Hindupur",
    "country": "IN",
    "lat": 13.82908,
    "long": 77.4924,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Hazārībāg",
    "country": "IN",
    "lat": 23.99507,
    "long": 85.36109,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Hāthras",
    "country": "IN",
    "lat": 27.59621,
    "long": 78.05237,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Hassan",
    "country": "IN",
    "lat": 13.00715,
    "long": 76.0962,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Haridwar",
    "country": "IN",
    "lat": 29.94791,
    "long": 78.16025,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Hardoī",
    "country": "IN",
    "lat": 27.39433,
    "long": 80.1311,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Hāpur",
    "country": "IN",
    "lat": 28.73041,
    "long": 77.78141,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Hāora",
    "country": "IN",
    "lat": 22.57688,
    "long": 88.31857,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Hanumāngarh",
    "country": "IN",
    "lat": 29.58182,
    "long": 74.32938,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Hālīsahar",
    "country": "IN",
    "lat": 22.93218,
    "long": 88.41859,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Haldwani",
    "country": "IN",
    "lat": 29.22254,
    "long": 79.5286,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Hājīpur",
    "country": "IN",
    "lat": 25.69003,
    "long": 85.20954,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Hābra",
    "country": "IN",
    "lat": 22.84202,
    "long": 88.65606,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Gwalior",
    "country": "IN",
    "lat": 26.22983,
    "long": 78.17337,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Gurgaon",
    "country": "IN",
    "lat": 28.4601,
    "long": 77.02635,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Guntūr",
    "country": "IN",
    "lat": 16.29974,
    "long": 80.45729,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Guntakal",
    "country": "IN",
    "lat": 15.17126,
    "long": 77.36565,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Guna",
    "country": "IN",
    "lat": 24.64761,
    "long": 77.31191,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Gulbarga",
    "country": "IN",
    "lat": 17.33763,
    "long": 76.83787,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Gudivāda",
    "country": "IN",
    "lat": 16.43171,
    "long": 80.9963,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Gosāba",
    "country": "IN",
    "lat": 22.16547,
    "long": 88.8007,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Gorakhpur",
    "country": "IN",
    "lat": 29.44768,
    "long": 75.67206,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Gorakhpur",
    "country": "IN",
    "lat": 26.75479,
    "long": 83.37235,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Gondia",
    "country": "IN",
    "lat": 21.46015,
    "long": 80.19203,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Gondal",
    "country": "IN",
    "lat": 21.96074,
    "long": 70.80255,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Gonda",
    "country": "IN",
    "lat": 27.13253,
    "long": 81.96897,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Godhra",
    "country": "IN",
    "lat": 22.77547,
    "long": 73.61488,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Ghāzīpur",
    "country": "IN",
    "lat": 25.58052,
    "long": 83.58058,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Ghāziābād",
    "country": "IN",
    "lat": 28.66535,
    "long": 77.43915,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Gaya",
    "country": "IN",
    "lat": 24.79686,
    "long": 85.00385,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Guwahati",
    "country": "IN",
    "lat": 26.1844,
    "long": 91.7458,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Gangāwati",
    "country": "IN",
    "lat": 15.43342,
    "long": 76.5293,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Gangāpur",
    "country": "IN",
    "lat": 26.47249,
    "long": 76.71744,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Gangānagar",
    "country": "IN",
    "lat": 29.92009,
    "long": 73.87496,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Ghandinagar",
    "country": "IN",
    "lat": 23.21667,
    "long": 72.68333,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Gāndhīdhām",
    "country": "IN",
    "lat": 23.08333,
    "long": 70.13333,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Gadag",
    "country": "IN",
    "lat": 15.42977,
    "long": 75.62971,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Fīrozpur",
    "country": "IN",
    "lat": 30.92574,
    "long": 74.61311,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Fīrozābād",
    "country": "IN",
    "lat": 27.14941,
    "long": 78.4018,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Fatehpur",
    "country": "IN",
    "lat": 25.93036,
    "long": 80.8139,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Farrukhābād",
    "country": "IN",
    "lat": 27.39048,
    "long": 79.58007,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Farīdābād",
    "country": "IN",
    "lat": 28.41124,
    "long": 77.31316,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Faizābād",
    "country": "IN",
    "lat": 26.77691,
    "long": 82.13292,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Etāwah",
    "country": "IN",
    "lat": 26.7778,
    "long": 79.02159,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Erode",
    "country": "IN",
    "lat": 11.3428,
    "long": 77.72741,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Elūru",
    "country": "IN",
    "lat": 16.71084,
    "long": 81.10559,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Durgāpur",
    "country": "IN",
    "lat": 23.49957,
    "long": 87.32155,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Durg",
    "country": "IN",
    "lat": 21.18333,
    "long": 81.28333,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Dam Dam",
    "country": "IN",
    "lat": 22.63341,
    "long": 88.42286,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Dombivli",
    "country": "IN",
    "lat": 19.21667,
    "long": 73.08333,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Dindigul",
    "country": "IN",
    "lat": 10.36896,
    "long": 77.98036,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Dimāpur",
    "country": "IN",
    "lat": 25.91174,
    "long": 93.7217,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Dibrugarh",
    "country": "IN",
    "lat": 27.47989,
    "long": 94.90837,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Dhule",
    "country": "IN",
    "lat": 20.90251,
    "long": 74.77735,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Dhaulpur",
    "country": "IN",
    "lat": 26.69286,
    "long": 77.87968,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Dharmavaram",
    "country": "IN",
    "lat": 14.41494,
    "long": 77.71995,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Dhanbād",
    "country": "IN",
    "lat": 23.80199,
    "long": 86.44324,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Dewas",
    "country": "IN",
    "lat": 22.96585,
    "long": 76.05526,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Deoria",
    "country": "IN",
    "lat": 26.50167,
    "long": 83.77936,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Delhi",
    "country": "IN",
    "lat": 28.65195,
    "long": 77.23149,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Dehri",
    "country": "IN",
    "lat": 24.90504,
    "long": 84.18289,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Dehradun",
    "country": "IN",
    "lat": 30.32443,
    "long": 78.03392,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Dārjiling",
    "country": "IN",
    "lat": 27.03333,
    "long": 88.26667,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Darbhanga",
    "country": "IN",
    "lat": 26.15216,
    "long": 85.89707,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Dānāpur",
    "country": "IN",
    "lat": 25.6368,
    "long": 85.04586,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Damoh",
    "country": "IN",
    "lat": 23.83653,
    "long": 79.44134,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Cuttack",
    "country": "IN",
    "lat": 20.46497,
    "long": 85.87927,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Cuddapah",
    "country": "IN",
    "lat": 14.4775,
    "long": 78.82353,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Cuddalore",
    "country": "IN",
    "lat": 11.74629,
    "long": 79.76436,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Coimbatore",
    "country": "IN",
    "lat": 11.00555,
    "long": 76.96612,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Cochin",
    "country": "IN",
    "lat": 9.93988,
    "long": 76.26022,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Chūru",
    "country": "IN",
    "lat": 28.30415,
    "long": 74.96718,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Chittaurgarh",
    "country": "IN",
    "lat": 24.88963,
    "long": 74.62403,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Chitradurga",
    "country": "IN",
    "lat": 14.22262,
    "long": 76.40038,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Chikmagalūr",
    "country": "IN",
    "lat": 13.32231,
    "long": 75.774,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Chhindwāra",
    "country": "IN",
    "lat": 22.05697,
    "long": 78.93958,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Chhatarpur",
    "country": "IN",
    "lat": 24.91422,
    "long": 79.58781,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Chhapra",
    "country": "IN",
    "lat": 25.781,
    "long": 84.73089,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Chās",
    "country": "IN",
    "lat": 23.63556,
    "long": 86.16712,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Chandrapur",
    "country": "IN",
    "lat": 19.94711,
    "long": 79.29607,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Chandigarh",
    "country": "IN",
    "lat": 30.73629,
    "long": 76.7884,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Chandausi",
    "country": "IN",
    "lat": 28.45302,
    "long": 78.78295,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Chandannagar",
    "country": "IN",
    "lat": 22.86225,
    "long": 88.36796,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Kolkata",
    "country": "IN",
    "lat": 22.56263,
    "long": 88.36304,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Burhānpur",
    "country": "IN",
    "lat": 21.30898,
    "long": 76.22996,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Bulandshahr",
    "country": "IN",
    "lat": 28.40296,
    "long": 77.85824,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Budaun",
    "country": "IN",
    "lat": 28.0362,
    "long": 79.12631,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Brahmapur",
    "country": "IN",
    "lat": 19.31151,
    "long": 84.7929,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Botād",
    "country": "IN",
    "lat": 22.16917,
    "long": 71.66671,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Borivli",
    "country": "IN",
    "lat": 19.23496,
    "long": 72.85976,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Mumbai",
    "country": "IN",
    "lat": 19.07283,
    "long": 72.88261,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Bokāro",
    "country": "IN",
    "lat": 23.78732,
    "long": 85.95622,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Bilimora",
    "country": "IN",
    "lat": 20.76957,
    "long": 72.96134,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Bilāspur",
    "country": "IN",
    "lat": 22.07402,
    "long": 82.1566,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Bīkāner",
    "country": "IN",
    "lat": 28.02094,
    "long": 73.30749,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Bijapur",
    "country": "IN",
    "lat": 16.82442,
    "long": 75.71537,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Bihār Sharīf",
    "country": "IN",
    "lat": 25.19729,
    "long": 85.52374,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Bīdar",
    "country": "IN",
    "lat": 17.91331,
    "long": 77.53011,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Bhusāwal",
    "country": "IN",
    "lat": 21.04658,
    "long": 75.78175,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Bhuj",
    "country": "IN",
    "lat": 23.25397,
    "long": 69.66928,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Bhubaneshwar",
    "country": "IN",
    "lat": 20.27241,
    "long": 85.83385,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Bhopal",
    "country": "IN",
    "lat": 23.25469,
    "long": 77.40289,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Bhiwāni",
    "country": "IN",
    "lat": 28.79776,
    "long": 76.13833,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Bhiwandi",
    "country": "IN",
    "lat": 19.30023,
    "long": 73.05881,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Bhind",
    "country": "IN",
    "lat": 26.56671,
    "long": 78.78728,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Bhīmavaram",
    "country": "IN",
    "lat": 16.54078,
    "long": 81.52322,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Bhīlwāra",
    "country": "IN",
    "lat": 25.34644,
    "long": 74.63523,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Bhilai",
    "country": "IN",
    "lat": 21.21667,
    "long": 81.43333,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Bhayandar",
    "country": "IN",
    "lat": 19.30157,
    "long": 72.85107,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Bhāvnagar",
    "country": "IN",
    "lat": 21.77445,
    "long": 72.1525,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Bhātpāra",
    "country": "IN",
    "lat": 22.86643,
    "long": 88.40113,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Bhatinda",
    "country": "IN",
    "lat": 30.20747,
    "long": 74.93893,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Bharūch",
    "country": "IN",
    "lat": 21.69482,
    "long": 72.9805,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Bharatpur",
    "country": "IN",
    "lat": 27.21731,
    "long": 77.49009,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Bhāgalpur",
    "country": "IN",
    "lat": 25.24446,
    "long": 86.97183,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Bhadreswar",
    "country": "IN",
    "lat": 22.82449,
    "long": 88.33841,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Bhadrāvati",
    "country": "IN",
    "lat": 13.84846,
    "long": 75.70502,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Bettiah",
    "country": "IN",
    "lat": 26.8024,
    "long": 84.49873,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Bellary",
    "country": "IN",
    "lat": 15.14575,
    "long": 76.91751,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Belgaum",
    "country": "IN",
    "lat": 15.85212,
    "long": 74.50447,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Begusarai",
    "country": "IN",
    "lat": 25.41853,
    "long": 86.13389,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Beāwar",
    "country": "IN",
    "lat": 26.10119,
    "long": 74.32028,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Batāla",
    "country": "IN",
    "lat": 31.81861,
    "long": 75.20278,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Basti",
    "country": "IN",
    "lat": 26.79446,
    "long": 82.73285,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Bārsi",
    "country": "IN",
    "lat": 18.23454,
    "long": 75.69275,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Barnāla",
    "country": "IN",
    "lat": 30.37451,
    "long": 75.5487,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Bareilly",
    "country": "IN",
    "lat": 28.34702,
    "long": 79.42193,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Barddhamān",
    "country": "IN",
    "lat": 23.25572,
    "long": 87.85691,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Bārāsat",
    "country": "IN",
    "lat": 22.72154,
    "long": 88.48198,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Bārāsat",
    "country": "IN",
    "lat": 22.22516,
    "long": 88.45086,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Baranagar",
    "country": "IN",
    "lat": 22.64132,
    "long": 88.37727,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Bārākpur",
    "country": "IN",
    "lat": 22.76602,
    "long": 88.36336,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Bānsbāria",
    "country": "IN",
    "lat": 22.95387,
    "long": 88.40098,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Bānkura",
    "country": "IN",
    "lat": 23.23241,
    "long": 87.0716,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Bangaon",
    "country": "IN",
    "lat": 23.04553,
    "long": 88.83084,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Bangalore",
    "country": "IN",
    "lat": 12.97194,
    "long": 77.59369,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Bānda",
    "country": "IN",
    "lat": 25.47534,
    "long": 80.3358,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Bālurghāt",
    "country": "IN",
    "lat": 25.22099,
    "long": 88.77732,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Bāli",
    "country": "IN",
    "lat": 22.64859,
    "long": 88.34115,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Balasore",
    "country": "IN",
    "lat": 21.49266,
    "long": 86.93348,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Baidyabāti",
    "country": "IN",
    "lat": 22.78498,
    "long": 88.32586,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Bahraich",
    "country": "IN",
    "lat": 27.5743,
    "long": 81.59588,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Baharampur",
    "country": "IN",
    "lat": 24.10473,
    "long": 88.25155,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Bahādurgarh",
    "country": "IN",
    "lat": 28.69108,
    "long": 76.9316,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Bagaha",
    "country": "IN",
    "lat": 27.09918,
    "long": 84.09003,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Badlapur",
    "country": "IN",
    "lat": 19.15516,
    "long": 73.26553,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Āzamgarh",
    "country": "IN",
    "lat": 26.06758,
    "long": 83.18364,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Āvadi",
    "country": "IN",
    "lat": 13.1147,
    "long": 80.10981,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Aurangabad",
    "country": "IN",
    "lat": 19.87757,
    "long": 75.34226,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Āsansol",
    "country": "IN",
    "lat": 23.68333,
    "long": 86.98333,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Ara",
    "country": "IN",
    "lat": 25.56314,
    "long": 84.67137,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Anantapur",
    "country": "IN",
    "lat": 14.6794,
    "long": 77.59877,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Ānand",
    "country": "IN",
    "lat": 22.55251,
    "long": 72.9552,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Amroha",
    "country": "IN",
    "lat": 28.90314,
    "long": 78.46984,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Amritsar",
    "country": "IN",
    "lat": 31.63661,
    "long": 74.87476,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Amrāvati",
    "country": "IN",
    "lat": 20.93333,
    "long": 77.75,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Ambur",
    "country": "IN",
    "lat": 12.79163,
    "long": 78.71644,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Ambattūr",
    "country": "IN",
    "lat": 13.09818,
    "long": 80.16152,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Ambāla",
    "country": "IN",
    "lat": 30.36285,
    "long": 76.79516,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Amarnāth",
    "country": "IN",
    "lat": 19.2,
    "long": 73.16667,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Alwar",
    "country": "IN",
    "lat": 27.56246,
    "long": 76.625,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Alleppey",
    "country": "IN",
    "lat": 9.49004,
    "long": 76.3264,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Allahābād",
    "country": "IN",
    "lat": 25.44894,
    "long": 81.83329,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Alīgarh",
    "country": "IN",
    "lat": 27.88334,
    "long": 78.07475,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Alandur",
    "country": "IN",
    "lat": 13.0025,
    "long": 80.20611,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Akola",
    "country": "IN",
    "lat": 20.70957,
    "long": 76.9981,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Ajmer",
    "country": "IN",
    "lat": 26.44976,
    "long": 74.64116,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Aizawl",
    "country": "IN",
    "lat": 23.72894,
    "long": 92.71791,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Ahmadnagar",
    "country": "IN",
    "lat": 19.09457,
    "long": 74.73843,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Ahmedabad",
    "country": "IN",
    "lat": 23.02579,
    "long": 72.58727,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Āgra",
    "country": "IN",
    "lat": 27.18333,
    "long": 78.01667,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Agartala",
    "country": "IN",
    "lat": 23.83605,
    "long": 91.27939,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Ādoni",
    "country": "IN",
    "lat": 15.62509,
    "long": 77.27536,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Ādilābād",
    "country": "IN",
    "lat": 19.67203,
    "long": 78.5359,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Achalpur",
    "country": "IN",
    "lat": 21.25722,
    "long": 77.50861,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Abohar",
    "country": "IN",
    "lat": 30.14453,
    "long": 74.19552,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Haldia",
    "country": "IN",
    "lat": 22.06046,
    "long": 88.10975,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Nangi",
    "country": "IN",
    "lat": 22.50833,
    "long": 88.21528,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Soyībug",
    "country": "IN",
    "lat": 34.08049,
    "long": 74.70871,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Navi Mumbai",
    "country": "IN",
    "lat": 19.03681,
    "long": 73.01582,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Shivaji Nagar",
    "country": "IN",
    "lat": 18.53017,
    "long": 73.85263,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Greater Noida",
    "country": "IN",
    "lat": 28.49615,
    "long": 77.53601,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Mohali",
    "country": "IN",
    "lat": 30.67995,
    "long": 76.72211,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Noida",
    "country": "IN",
    "lat": 28.58,
    "long": 77.33,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Singrauli",
    "country": "IN",
    "lat": 24.19973,
    "long": 82.67535,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Jaigaon",
    "country": "IN",
    "lat": 26.84766,
    "long": 89.37558,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Lal Bahadur Nagar",
    "country": "IN",
    "lat": 17.34769,
    "long": 78.55757,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Malkajgiri",
    "country": "IN",
    "lat": 17.44781,
    "long": 78.52633,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Gajuwaka",
    "country": "IN",
    "lat": 17.7,
    "long": 83.21667,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Quthbullapur",
    "country": "IN",
    "lat": 17.50107,
    "long": 78.45818,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Serilingampalle",
    "country": "IN",
    "lat": 17.49313,
    "long": 78.30196,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Ashoknagar Kalyangarh",
    "country": "IN",
    "lat": 22.86416,
    "long": 88.63701,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Ramagundam",
    "country": "IN",
    "lat": 18.755,
    "long": 79.474,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Kultali",
    "country": "IN",
    "lat": 21.9,
    "long": 88.4,
    "zone": "Asia/Kolkata"
  },
  {
    "name": "Umm Qaşr",
    "country": "IQ",
    "lat": 30.0362,
    "long": 47.91951,
    "zone": "Asia/Baghdad"
  },
  {
    "name": "Sīnah",
    "country": "IQ",
    "lat": 36.80752,
    "long": 43.03831,
    "zone": "Asia/Baghdad"
  },
  {
    "name": "Sāmarrā’",
    "country": "IQ",
    "lat": 34.1959,
    "long": 43.88568,
    "zone": "Asia/Baghdad"
  },
  {
    "name": "Kirkuk",
    "country": "IQ",
    "lat": 35.46806,
    "long": 44.39222,
    "zone": "Asia/Baghdad"
  },
  {
    "name": "Karbala",
    "country": "IQ",
    "lat": 32.61603,
    "long": 44.02488,
    "zone": "Asia/Baghdad"
  },
  {
    "name": "Erbil",
    "country": "IQ",
    "lat": 36.19257,
    "long": 44.01062,
    "zone": "Asia/Baghdad"
  },
  {
    "name": "Dihok",
    "country": "IQ",
    "lat": 36.86709,
    "long": 42.98845,
    "zone": "Asia/Baghdad"
  },
  {
    "name": "Baqubah",
    "country": "IQ",
    "lat": 33.74659,
    "long": 44.64366,
    "zone": "Asia/Baghdad"
  },
  {
    "name": "Baghdad",
    "country": "IQ",
    "lat": 33.34058,
    "long": 44.40088,
    "zone": "Asia/Baghdad"
  },
  {
    "name": "Az Zubayr",
    "country": "IQ",
    "lat": 30.39213,
    "long": 47.70175,
    "zone": "Asia/Baghdad"
  },
  {
    "name": "As Sulaymānīyah",
    "country": "IQ",
    "lat": 35.56496,
    "long": 45.4329,
    "zone": "Asia/Baghdad"
  },
  {
    "name": "As Samawah",
    "country": "IQ",
    "lat": 31.33198,
    "long": 45.2944,
    "zone": "Asia/Baghdad"
  },
  {
    "name": "Ramadi",
    "country": "IQ",
    "lat": 33.42056,
    "long": 43.30778,
    "zone": "Asia/Baghdad"
  },
  {
    "name": "An Nāşirīyah",
    "country": "IQ",
    "lat": 31.05799,
    "long": 46.25726,
    "zone": "Asia/Baghdad"
  },
  {
    "name": "An Najaf",
    "country": "IQ",
    "lat": 32.02594,
    "long": 44.34625,
    "zone": "Asia/Baghdad"
  },
  {
    "name": "Al Mawşil al Jadīdah",
    "country": "IQ",
    "lat": 36.33306,
    "long": 43.1049,
    "zone": "Asia/Baghdad"
  },
  {
    "name": "Mosul",
    "country": "IQ",
    "lat": 36.335,
    "long": 43.11889,
    "zone": "Asia/Baghdad"
  },
  {
    "name": "Al Kūt",
    "country": "IQ",
    "lat": 32.5128,
    "long": 45.81817,
    "zone": "Asia/Baghdad"
  },
  {
    "name": "Kufa",
    "country": "IQ",
    "lat": 32.05114,
    "long": 44.44017,
    "zone": "Asia/Baghdad"
  },
  {
    "name": "Al Ḩillah",
    "country": "IQ",
    "lat": 32.46367,
    "long": 44.41963,
    "zone": "Asia/Baghdad"
  },
  {
    "name": "Al Fāw",
    "country": "IQ",
    "lat": 29.97421,
    "long": 48.47309,
    "zone": "Asia/Baghdad"
  },
  {
    "name": "Al Fallūjah",
    "country": "IQ",
    "lat": 33.34913,
    "long": 43.78599,
    "zone": "Asia/Baghdad"
  },
  {
    "name": "Al Başrah",
    "country": "IQ",
    "lat": 30.53302,
    "long": 47.79747,
    "zone": "Asia/Baghdad"
  },
  {
    "name": "Al ‘Amārah",
    "country": "IQ",
    "lat": 31.83588,
    "long": 47.14399,
    "zone": "Asia/Baghdad"
  },
  {
    "name": "Ad Dīwānīyah",
    "country": "IQ",
    "lat": 31.99289,
    "long": 44.92552,
    "zone": "Asia/Baghdad"
  },
  {
    "name": "Abū Ghurayb",
    "country": "IQ",
    "lat": 33.30563,
    "long": 44.18477,
    "zone": "Asia/Baghdad"
  },
  {
    "name": "Al Başrah al Qadīmah",
    "country": "IQ",
    "lat": 30.50316,
    "long": 47.81507,
    "zone": "Asia/Baghdad"
  },
  {
    "name": "Āzādshahr",
    "country": "IR",
    "lat": 34.79049,
    "long": 48.57011,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Kahrīz",
    "country": "IR",
    "lat": 34.3838,
    "long": 47.0553,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Qarchak",
    "country": "IR",
    "lat": 35.42867,
    "long": 51.57544,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Zanjān",
    "country": "IR",
    "lat": 36.6736,
    "long": 48.4787,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Yazd",
    "country": "IR",
    "lat": 31.89722,
    "long": 54.3675,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Varāmīn",
    "country": "IR",
    "lat": 35.3242,
    "long": 51.6457,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Torbat-e Ḩeydarīyeh",
    "country": "IR",
    "lat": 35.27401,
    "long": 59.21949,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Tehrān",
    "country": "IR",
    "lat": 35.69439,
    "long": 51.42151,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Tabrīz",
    "country": "IR",
    "lat": 38.08,
    "long": 46.2919,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Sirjan",
    "country": "IR",
    "lat": 29.45137,
    "long": 55.6809,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Shiraz",
    "country": "IR",
    "lat": 29.61031,
    "long": 52.53113,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Shahr-e Kord",
    "country": "IR",
    "lat": 32.32556,
    "long": 50.86444,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Semnān",
    "country": "IR",
    "lat": 35.57691,
    "long": 53.39205,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Sāveh",
    "country": "IR",
    "lat": 35.0213,
    "long": 50.3566,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Sari",
    "country": "IR",
    "lat": 36.56332,
    "long": 53.06009,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Saqqez",
    "country": "IR",
    "lat": 36.24992,
    "long": 46.2735,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Sanandaj",
    "country": "IR",
    "lat": 35.31495,
    "long": 46.99883,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Sabzevar",
    "country": "IR",
    "lat": 36.2126,
    "long": 57.68191,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Rasht",
    "country": "IR",
    "lat": 37.28077,
    "long": 49.58319,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Rafsanjān",
    "country": "IR",
    "lat": 30.4067,
    "long": 55.9939,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Qūchān",
    "country": "IR",
    "lat": 37.106,
    "long": 58.50955,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Qom",
    "country": "IR",
    "lat": 34.6401,
    "long": 50.8764,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Qazvin",
    "country": "IR",
    "lat": 36.26877,
    "long": 50.0041,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Pārsābād",
    "country": "IR",
    "lat": 39.6482,
    "long": 47.9174,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Orūmīyeh",
    "country": "IR",
    "lat": 37.55274,
    "long": 45.07605,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Nīshābūr",
    "country": "IR",
    "lat": 36.21329,
    "long": 58.79575,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Naz̧arābād",
    "country": "IR",
    "lat": 35.95411,
    "long": 50.60607,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Mīāndoāb",
    "country": "IR",
    "lat": 36.96667,
    "long": 46.10961,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Masjed Soleymān",
    "country": "IR",
    "lat": 31.9364,
    "long": 49.3039,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Mashhad",
    "country": "IR",
    "lat": 36.31559,
    "long": 59.56796,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Marand",
    "country": "IR",
    "lat": 38.4329,
    "long": 45.7749,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Malāyer",
    "country": "IR",
    "lat": 34.2969,
    "long": 48.8235,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Mahābād",
    "country": "IR",
    "lat": 36.7631,
    "long": 45.7222,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Kūhdasht",
    "country": "IR",
    "lat": 33.53335,
    "long": 47.60999,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Khvoy",
    "country": "IR",
    "lat": 38.5503,
    "long": 44.9521,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Khorramshahr",
    "country": "IR",
    "lat": 30.44079,
    "long": 48.18428,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Khorramābād",
    "country": "IR",
    "lat": 33.48778,
    "long": 48.35583,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Kermānshāh",
    "country": "IR",
    "lat": 34.31417,
    "long": 47.065,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Kermān",
    "country": "IR",
    "lat": 30.28321,
    "long": 57.07879,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Kāshān",
    "country": "IR",
    "lat": 33.98308,
    "long": 51.43644,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Karaj",
    "country": "IR",
    "lat": 35.83266,
    "long": 50.99155,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Īlām",
    "country": "IR",
    "lat": 33.6374,
    "long": 46.4227,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Hamadān",
    "country": "IR",
    "lat": 34.79922,
    "long": 48.51456,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Gorgān",
    "country": "IR",
    "lat": 36.84165,
    "long": 54.44361,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Gonbad-e Kāvūs",
    "country": "IR",
    "lat": 37.25004,
    "long": 55.16721,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Shahrud",
    "country": "IR",
    "lat": 36.41819,
    "long": 54.97628,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Bandar-e Būshehr",
    "country": "IR",
    "lat": 28.9684,
    "long": 50.8385,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Būkān",
    "country": "IR",
    "lat": 36.521,
    "long": 46.2089,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Borūjerd",
    "country": "IR",
    "lat": 33.8973,
    "long": 48.7516,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Bojnūrd",
    "country": "IR",
    "lat": 37.47473,
    "long": 57.32903,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Bīrjand",
    "country": "IR",
    "lat": 32.86628,
    "long": 59.22114,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Bāneh",
    "country": "IR",
    "lat": 35.9975,
    "long": 45.8853,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Bandar-e Anzalī",
    "country": "IR",
    "lat": 37.47257,
    "long": 49.4593,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Bandar ‘Abbās",
    "country": "IR",
    "lat": 27.1865,
    "long": 56.2808,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Bābol",
    "country": "IR",
    "lat": 36.55132,
    "long": 52.67895,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Ardabīl",
    "country": "IR",
    "lat": 38.2498,
    "long": 48.2933,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Arāk",
    "country": "IR",
    "lat": 34.09174,
    "long": 49.68916,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Āmol",
    "country": "IR",
    "lat": 36.46961,
    "long": 52.35072,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Ahvaz",
    "country": "IR",
    "lat": 31.31901,
    "long": 48.6842,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Abadan",
    "country": "IR",
    "lat": 30.3392,
    "long": 48.3043,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Shāhreẕā",
    "country": "IR",
    "lat": 32.03389,
    "long": 51.87944,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Najafābād",
    "country": "IR",
    "lat": 32.6344,
    "long": 51.3668,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Khomeynī Shahr",
    "country": "IR",
    "lat": 32.6856,
    "long": 51.53609,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Isfahan",
    "country": "IR",
    "lat": 32.65246,
    "long": 51.67462,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Zābol",
    "country": "IR",
    "lat": 31.0306,
    "long": 61.4949,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Zahedan",
    "country": "IR",
    "lat": 29.4963,
    "long": 60.8629,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Īrānshahr",
    "country": "IR",
    "lat": 27.20245,
    "long": 60.68476,
    "zone": "Asia/Tehran"
  },
  {
    "name": "Reykjavík",
    "country": "IS",
    "lat": 64.13548,
    "long": -21.89541,
    "zone": "Atlantic/Reykjavik"
  },
  {
    "name": "Reggio Calabria",
    "country": "IT",
    "lat": 38.11047,
    "long": 15.66129,
    "zone": "Europe/Rome"
  },
  {
    "name": "Palermo",
    "country": "IT",
    "lat": 38.13205,
    "long": 13.33561,
    "zone": "Europe/Rome"
  },
  {
    "name": "Messina",
    "country": "IT",
    "lat": 38.19394,
    "long": 15.55256,
    "zone": "Europe/Rome"
  },
  {
    "name": "Catania",
    "country": "IT",
    "lat": 37.49223,
    "long": 15.07041,
    "zone": "Europe/Rome"
  },
  {
    "name": "Cagliari",
    "country": "IT",
    "lat": 39.23054,
    "long": 9.11917,
    "zone": "Europe/Rome"
  },
  {
    "name": "Vicenza",
    "country": "IT",
    "lat": 45.54672,
    "long": 11.5475,
    "zone": "Europe/Rome"
  },
  {
    "name": "Verona",
    "country": "IT",
    "lat": 45.4299,
    "long": 10.98444,
    "zone": "Europe/Rome"
  },
  {
    "name": "Trieste",
    "country": "IT",
    "lat": 45.64325,
    "long": 13.7903,
    "zone": "Europe/Rome"
  },
  {
    "name": "Turin",
    "country": "IT",
    "lat": 45.07049,
    "long": 7.68682,
    "zone": "Europe/Rome"
  },
  {
    "name": "Taranto",
    "country": "IT",
    "lat": 40.41639,
    "long": 17.25478,
    "zone": "Europe/Rome"
  },
  {
    "name": "Salerno",
    "country": "IT",
    "lat": 40.67545,
    "long": 14.79328,
    "zone": "Europe/Rome"
  },
  {
    "name": "Rome",
    "country": "IT",
    "lat": 41.89193,
    "long": 12.51133,
    "zone": "Europe/Rome"
  },
  {
    "name": "Rimini",
    "country": "IT",
    "lat": 44.05755,
    "long": 12.56528,
    "zone": "Europe/Rome"
  },
  {
    "name": "Reggio nell'Emilia",
    "country": "IT",
    "lat": 44.69825,
    "long": 10.63125,
    "zone": "Europe/Rome"
  },
  {
    "name": "Prato",
    "country": "IT",
    "lat": 43.87309,
    "long": 11.08278,
    "zone": "Europe/Rome"
  },
  {
    "name": "Pescara",
    "country": "IT",
    "lat": 42.4584,
    "long": 14.20283,
    "zone": "Europe/Rome"
  },
  {
    "name": "Perugia",
    "country": "IT",
    "lat": 43.1122,
    "long": 12.38878,
    "zone": "Europe/Rome"
  },
  {
    "name": "Parma",
    "country": "IT",
    "lat": 44.79935,
    "long": 10.32618,
    "zone": "Europe/Rome"
  },
  {
    "name": "Padova",
    "country": "IT",
    "lat": 45.40797,
    "long": 11.88586,
    "zone": "Europe/Rome"
  },
  {
    "name": "Napoli",
    "country": "IT",
    "lat": 40.85631,
    "long": 14.24641,
    "zone": "Europe/Rome"
  },
  {
    "name": "Monza",
    "country": "IT",
    "lat": 45.58005,
    "long": 9.27246,
    "zone": "Europe/Rome"
  },
  {
    "name": "Modena",
    "country": "IT",
    "lat": 44.64783,
    "long": 10.92539,
    "zone": "Europe/Rome"
  },
  {
    "name": "Milano",
    "country": "IT",
    "lat": 45.46427,
    "long": 9.18951,
    "zone": "Europe/Rome"
  },
  {
    "name": "Mestre",
    "country": "IT",
    "lat": 45.47152,
    "long": 12.24017,
    "zone": "Europe/Rome"
  },
  {
    "name": "Livorno",
    "country": "IT",
    "lat": 43.54427,
    "long": 10.32615,
    "zone": "Europe/Rome"
  },
  {
    "name": "Genoa",
    "country": "IT",
    "lat": 44.4264,
    "long": 8.91519,
    "zone": "Europe/Rome"
  },
  {
    "name": "Foggia",
    "country": "IT",
    "lat": 41.45845,
    "long": 15.55188,
    "zone": "Europe/Rome"
  },
  {
    "name": "Florence",
    "country": "IT",
    "lat": 43.77925,
    "long": 11.24626,
    "zone": "Europe/Rome"
  },
  {
    "name": "Brescia",
    "country": "IT",
    "lat": 45.53558,
    "long": 10.21472,
    "zone": "Europe/Rome"
  },
  {
    "name": "Bologna",
    "country": "IT",
    "lat": 44.49381,
    "long": 11.33875,
    "zone": "Europe/Rome"
  },
  {
    "name": "Bergamo",
    "country": "IT",
    "lat": 45.69601,
    "long": 9.66721,
    "zone": "Europe/Rome"
  },
  {
    "name": "Bari",
    "country": "IT",
    "lat": 41.11148,
    "long": 16.8554,
    "zone": "Europe/Rome"
  },
  {
    "name": "Acilia-Castel Fusano-Ostia Antica",
    "country": "IT",
    "lat": 41.76337,
    "long": 12.33078,
    "zone": "Europe/Rome"
  },
  {
    "name": "Spanish Town",
    "country": "JM",
    "lat": 17.99107,
    "long": -76.95742,
    "zone": "America/Jamaica"
  },
  {
    "name": "Portmore",
    "country": "JM",
    "lat": 17.95032,
    "long": -76.88215,
    "zone": "America/Jamaica"
  },
  {
    "name": "New Kingston",
    "country": "JM",
    "lat": 18.00747,
    "long": -76.78319,
    "zone": "America/Jamaica"
  },
  {
    "name": "Kingston",
    "country": "JM",
    "lat": 17.99702,
    "long": -76.79358,
    "zone": "America/Jamaica"
  },
  {
    "name": "Wādī as Sīr",
    "country": "JO",
    "lat": 31.95126,
    "long": 35.81979,
    "zone": "Asia/Amman"
  },
  {
    "name": "Irbid",
    "country": "JO",
    "lat": 32.55556,
    "long": 35.85,
    "zone": "Asia/Amman"
  },
  {
    "name": "Zarqa",
    "country": "JO",
    "lat": 32.07275,
    "long": 36.08796,
    "zone": "Asia/Amman"
  },
  {
    "name": "Amman",
    "country": "JO",
    "lat": 31.95522,
    "long": 35.94503,
    "zone": "Asia/Amman"
  },
  {
    "name": "‘Ajlūn",
    "country": "JO",
    "lat": 32.33326,
    "long": 35.75279,
    "zone": "Asia/Amman"
  },
  {
    "name": "Russeifa",
    "country": "JO",
    "lat": 32.01778,
    "long": 36.04639,
    "zone": "Asia/Amman"
  },
  {
    "name": "Atsugi",
    "country": "JP",
    "lat": 35.43889,
    "long": 139.35972,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Akashi",
    "country": "JP",
    "lat": 34.63333,
    "long": 134.98333,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Zama",
    "country": "JP",
    "lat": 35.48889,
    "long": 139.38861,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Yono",
    "country": "JP",
    "lat": 35.88333,
    "long": 139.63333,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Yonago",
    "country": "JP",
    "lat": 35.43333,
    "long": 133.33333,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Yokosuka",
    "country": "JP",
    "lat": 35.28361,
    "long": 139.66722,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Yokohama",
    "country": "JP",
    "lat": 35.44778,
    "long": 139.6425,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Yokkaichi",
    "country": "JP",
    "lat": 34.96667,
    "long": 136.61667,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Yatsushiro",
    "country": "JP",
    "lat": 32.5045,
    "long": 130.60066,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Yao",
    "country": "JP",
    "lat": 34.61667,
    "long": 135.6,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Yamaguchi-shi",
    "country": "JP",
    "lat": 34.18583,
    "long": 131.47139,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Yaizu",
    "country": "JP",
    "lat": 34.86877,
    "long": 138.31952,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Utsunomiya-shi",
    "country": "JP",
    "lat": 36.56583,
    "long": 139.88361,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Urayasu",
    "country": "JP",
    "lat": 35.67056,
    "long": 139.88861,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Uji",
    "country": "JP",
    "lat": 34.89044,
    "long": 135.80325,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Ueda",
    "country": "JP",
    "lat": 36.40265,
    "long": 138.28161,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Ube",
    "country": "JP",
    "lat": 33.94306,
    "long": 131.25111,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Tsu-shi",
    "country": "JP",
    "lat": 34.73028,
    "long": 136.50861,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Toyota",
    "country": "JP",
    "lat": 35.08333,
    "long": 137.15,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Toyonaka",
    "country": "JP",
    "lat": 34.78244,
    "long": 135.46932,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Toyokawa",
    "country": "JP",
    "lat": 34.81667,
    "long": 137.4,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Toyohashi",
    "country": "JP",
    "lat": 34.76667,
    "long": 137.38333,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Toyama-shi",
    "country": "JP",
    "lat": 36.69528,
    "long": 137.21139,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Tottori",
    "country": "JP",
    "lat": 35.5,
    "long": 134.23333,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Tondabayashichō",
    "country": "JP",
    "lat": 34.50065,
    "long": 135.60211,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Tokyo",
    "country": "JP",
    "lat": 35.6895,
    "long": 139.69171,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Tokuyama",
    "country": "JP",
    "lat": 34.05,
    "long": 131.81667,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Tokushima-shi",
    "country": "JP",
    "lat": 34.06583,
    "long": 134.55945,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Tokorozawa",
    "country": "JP",
    "lat": 35.79916,
    "long": 139.46903,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Nishi-Tokyo-shi",
    "country": "JP",
    "lat": 35.72526,
    "long": 139.5383,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Takatsuki",
    "country": "JP",
    "lat": 34.84833,
    "long": 135.61678,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Takasaki",
    "country": "JP",
    "lat": 36.33333,
    "long": 139.01667,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Takarazuka",
    "country": "JP",
    "lat": 34.79936,
    "long": 135.35697,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Takaoka",
    "country": "JP",
    "lat": 36.75,
    "long": 137.01667,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Takamatsu-shi",
    "country": "JP",
    "lat": 34.34028,
    "long": 134.04333,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Tajimi",
    "country": "JP",
    "lat": 35.31667,
    "long": 137.13333,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Suzuka",
    "country": "JP",
    "lat": 34.88333,
    "long": 136.58333,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Suita",
    "country": "JP",
    "lat": 34.76143,
    "long": 135.51567,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Sōka",
    "country": "JP",
    "lat": 35.82028,
    "long": 139.80444,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Shizuoka-shi",
    "country": "JP",
    "lat": 34.97695,
    "long": 138.38306,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Shimonoseki",
    "country": "JP",
    "lat": 33.95,
    "long": 130.95,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Minato",
    "country": "JP",
    "lat": 34.2152,
    "long": 135.1501,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Seto",
    "country": "JP",
    "lat": 35.23333,
    "long": 137.1,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Sasebo",
    "country": "JP",
    "lat": 33.15917,
    "long": 129.72278,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Sandachō",
    "country": "JP",
    "lat": 34.88444,
    "long": 135.22694,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Sakata",
    "country": "JP",
    "lat": 38.91667,
    "long": 139.855,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Sakai",
    "country": "JP",
    "lat": 34.58333,
    "long": 135.46667,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Saga-shi",
    "country": "JP",
    "lat": 33.24932,
    "long": 130.2988,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Oyama",
    "country": "JP",
    "lat": 36.3,
    "long": 139.8,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Ōtsu-shi",
    "country": "JP",
    "lat": 35.00444,
    "long": 135.86833,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Ōta",
    "country": "JP",
    "lat": 36.3,
    "long": 139.36667,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Ōsaka-shi",
    "country": "JP",
    "lat": 34.69374,
    "long": 135.50218,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Ōmuta",
    "country": "JP",
    "lat": 33.03333,
    "long": 130.45,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Ōme",
    "country": "JP",
    "lat": 35.78389,
    "long": 139.24306,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Okazaki",
    "country": "JP",
    "lat": 34.95,
    "long": 137.16667,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Okayama-shi",
    "country": "JP",
    "lat": 34.66167,
    "long": 133.935,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Ōita",
    "country": "JP",
    "lat": 33.23806,
    "long": 131.6125,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Ōgaki",
    "country": "JP",
    "lat": 35.35,
    "long": 136.61667,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Odawara",
    "country": "JP",
    "lat": 35.25556,
    "long": 139.15972,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Numazu",
    "country": "JP",
    "lat": 35.1,
    "long": 138.86667,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Noda",
    "country": "JP",
    "lat": 35.94111,
    "long": 139.85806,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Nobeoka",
    "country": "JP",
    "lat": 32.58333,
    "long": 131.66667,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Nishio",
    "country": "JP",
    "lat": 34.86667,
    "long": 137.05,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Nishinomiya-hama",
    "country": "JP",
    "lat": 34.71562,
    "long": 135.33199,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Niihama",
    "country": "JP",
    "lat": 33.96047,
    "long": 133.30522,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Niigata-shi",
    "country": "JP",
    "lat": 37.90222,
    "long": 139.02361,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Nara-shi",
    "country": "JP",
    "lat": 34.68505,
    "long": 135.80485,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Naha-shi",
    "country": "JP",
    "lat": 26.2125,
    "long": 127.68111,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Nagoya-shi",
    "country": "JP",
    "lat": 35.18147,
    "long": 136.90641,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Nagasaki-shi",
    "country": "JP",
    "lat": 32.74472,
    "long": 129.87361,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Nagareyama",
    "country": "JP",
    "lat": 35.8563,
    "long": 139.90266,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Nagaoka",
    "country": "JP",
    "lat": 37.45,
    "long": 138.85,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Nagano-shi",
    "country": "JP",
    "lat": 36.65139,
    "long": 138.18111,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Musashino",
    "country": "JP",
    "lat": 35.70611,
    "long": 139.55944,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Moriguchi",
    "country": "JP",
    "lat": 34.73333,
    "long": 135.56667,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Miyazaki-shi",
    "country": "JP",
    "lat": 31.91111,
    "long": 131.42389,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Miyakonojō",
    "country": "JP",
    "lat": 31.73333,
    "long": 131.06667,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Mitaka-shi",
    "country": "JP",
    "lat": 35.68351,
    "long": 139.55963,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Mishima",
    "country": "JP",
    "lat": 35.11667,
    "long": 138.91667,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Mino",
    "country": "JP",
    "lat": 34.82691,
    "long": 135.47057,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Minami-rinkan",
    "country": "JP",
    "lat": 35.48333,
    "long": 139.45,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Matsumoto",
    "country": "JP",
    "lat": 36.23333,
    "long": 137.96667,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Matsue-shi",
    "country": "JP",
    "lat": 35.47222,
    "long": 133.05056,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Matsudo",
    "country": "JP",
    "lat": 35.78333,
    "long": 139.9,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Matsubara",
    "country": "JP",
    "lat": 34.56667,
    "long": 135.55,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Maebashi-shi",
    "country": "JP",
    "lat": 36.39111,
    "long": 139.06083,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Machida",
    "country": "JP",
    "lat": 35.54028,
    "long": 139.45083,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Kyoto",
    "country": "JP",
    "lat": 35.02107,
    "long": 135.75385,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Kusatsu",
    "country": "JP",
    "lat": 35.01667,
    "long": 135.96667,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Kurume",
    "country": "JP",
    "lat": 33.31667,
    "long": 130.51667,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Kure",
    "country": "JP",
    "lat": 34.23222,
    "long": 132.56658,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Kurashiki",
    "country": "JP",
    "lat": 34.58333,
    "long": 133.76667,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Kumamoto",
    "country": "JP",
    "lat": 32.80589,
    "long": 130.69181,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Kumagaya",
    "country": "JP",
    "lat": 36.13497,
    "long": 139.39004,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Koshigaya",
    "country": "JP",
    "lat": 35.88333,
    "long": 139.78333,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Kōnan",
    "country": "JP",
    "lat": 35.33165,
    "long": 136.87042,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Komatsu",
    "country": "JP",
    "lat": 36.40263,
    "long": 136.45088,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Komaki",
    "country": "JP",
    "lat": 35.28333,
    "long": 136.91667,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Kokubunji",
    "country": "JP",
    "lat": 35.70222,
    "long": 139.47556,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Kōfu-shi",
    "country": "JP",
    "lat": 35.66389,
    "long": 138.56833,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Kōchi-shi",
    "country": "JP",
    "lat": 33.55972,
    "long": 133.53111,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Kobe",
    "country": "JP",
    "lat": 34.6913,
    "long": 135.183,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Kitakyūshū",
    "country": "JP",
    "lat": 33.83333,
    "long": 130.83333,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Kishiwada",
    "country": "JP",
    "lat": 34.46667,
    "long": 135.36667,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Kisarazu",
    "country": "JP",
    "lat": 35.37472,
    "long": 139.9225,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Kiryū",
    "country": "JP",
    "lat": 36.4,
    "long": 139.33333,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Kawasaki",
    "country": "JP",
    "lat": 35.52056,
    "long": 139.71722,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Kawanishi",
    "country": "JP",
    "lat": 34.81667,
    "long": 135.41667,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Kawaguchi",
    "country": "JP",
    "lat": 35.80521,
    "long": 139.71072,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Kawagoe",
    "country": "JP",
    "lat": 35.90861,
    "long": 139.48528,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Kasukabe",
    "country": "JP",
    "lat": 35.98122,
    "long": 139.74424,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Kasugai",
    "country": "JP",
    "lat": 35.24762,
    "long": 136.97229,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Kashiwa",
    "country": "JP",
    "lat": 35.85444,
    "long": 139.96889,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Kashihara-shi",
    "country": "JP",
    "lat": 34.50896,
    "long": 135.7929,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Kariya",
    "country": "JP",
    "lat": 34.98333,
    "long": 136.98333,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Kanazawa-shi",
    "country": "JP",
    "lat": 36.59445,
    "long": 136.62556,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Kamirenjaku",
    "country": "JP",
    "lat": 35.70034,
    "long": 139.55665,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Kamakura",
    "country": "JP",
    "lat": 35.30889,
    "long": 139.55028,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Kakogawachō-honmachi",
    "country": "JP",
    "lat": 34.76943,
    "long": 134.82905,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Kakamigahara",
    "country": "JP",
    "lat": 35.41667,
    "long": 136.86667,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Kagoshima-shi",
    "country": "JP",
    "lat": 31.56019,
    "long": 130.55814,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Kadoma",
    "country": "JP",
    "lat": 34.7381,
    "long": 135.57442,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Izumi",
    "country": "JP",
    "lat": 34.48333,
    "long": 135.43333,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Iwatsuki",
    "country": "JP",
    "lat": 35.95225,
    "long": 139.68502,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Iwakuni",
    "country": "JP",
    "lat": 34.16297,
    "long": 132.22,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Itami",
    "country": "JP",
    "lat": 34.78427,
    "long": 135.40126,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Isesaki",
    "country": "JP",
    "lat": 36.31667,
    "long": 139.2,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Isehara",
    "country": "JP",
    "lat": 35.39056,
    "long": 139.30778,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Inazawa",
    "country": "JP",
    "lat": 35.25,
    "long": 136.78333,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Ikoma",
    "country": "JP",
    "lat": 34.68333,
    "long": 135.7,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Iida",
    "country": "JP",
    "lat": 35.51965,
    "long": 137.82074,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Ichinomiya",
    "country": "JP",
    "lat": 35.3,
    "long": 136.8,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Ibaraki",
    "country": "JP",
    "lat": 34.81641,
    "long": 135.56828,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Hōfu",
    "country": "JP",
    "lat": 34.05,
    "long": 131.56667,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Hiroshima-shi",
    "country": "JP",
    "lat": 34.39627,
    "long": 132.45937,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Hiratsuka",
    "country": "JP",
    "lat": 35.32306,
    "long": 139.34222,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Hirakata",
    "country": "JP",
    "lat": 34.81352,
    "long": 135.64914,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Hino",
    "country": "JP",
    "lat": 35.67306,
    "long": 139.40028,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Himeji",
    "country": "JP",
    "lat": 34.81667,
    "long": 134.7,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Hikone",
    "country": "JP",
    "lat": 35.25,
    "long": 136.25,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Handa",
    "country": "JP",
    "lat": 34.88333,
    "long": 136.93333,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Hamamatsu",
    "country": "JP",
    "lat": 34.7,
    "long": 137.73333,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Hadano",
    "country": "JP",
    "lat": 35.37111,
    "long": 139.22361,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Hachiōji",
    "country": "JP",
    "lat": 35.65583,
    "long": 139.32389,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Gifu-shi",
    "country": "JP",
    "lat": 35.42291,
    "long": 136.76039,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Funabashi",
    "country": "JP",
    "lat": 35.69306,
    "long": 139.98333,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Fukuyama",
    "country": "JP",
    "lat": 34.48333,
    "long": 133.36667,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Fukuoka-shi",
    "country": "JP",
    "lat": 33.60639,
    "long": 130.41806,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Fukui-shi",
    "country": "JP",
    "lat": 36.06443,
    "long": 136.22257,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Fukayachō",
    "country": "JP",
    "lat": 36.2,
    "long": 139.28333,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Fujisawa",
    "country": "JP",
    "lat": 35.34194,
    "long": 139.47,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Fujinomiya",
    "country": "JP",
    "lat": 35.21667,
    "long": 138.61667,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Fujieda",
    "country": "JP",
    "lat": 34.86667,
    "long": 138.26667,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Fuji",
    "country": "JP",
    "lat": 35.16667,
    "long": 138.68333,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Daitōchō",
    "country": "JP",
    "lat": 34.71378,
    "long": 135.62033,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Chōfugaoka",
    "country": "JP",
    "lat": 35.65924,
    "long": 139.54837,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Chikushino-shi",
    "country": "JP",
    "lat": 33.49631,
    "long": 130.5156,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Chigasaki",
    "country": "JP",
    "lat": 35.32611,
    "long": 139.40389,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Beppu",
    "country": "JP",
    "lat": 33.27945,
    "long": 131.49751,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Ashikaga",
    "country": "JP",
    "lat": 36.33333,
    "long": 139.45,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Anjō",
    "country": "JP",
    "lat": 34.95828,
    "long": 137.08054,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Amagasaki",
    "country": "JP",
    "lat": 34.71667,
    "long": 135.41667,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Ageoshimo",
    "country": "JP",
    "lat": 35.97145,
    "long": 139.61382,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Okinawa",
    "country": "JP",
    "lat": 26.33583,
    "long": 127.80139,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Sayama",
    "country": "JP",
    "lat": 35.85295,
    "long": 139.41212,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Asaka",
    "country": "JP",
    "lat": 35.80472,
    "long": 139.60194,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Shimotoda",
    "country": "JP",
    "lat": 35.81251,
    "long": 139.6856,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Wakayama-shi",
    "country": "JP",
    "lat": 34.22611,
    "long": 135.1675,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Matsuyama",
    "country": "JP",
    "lat": 33.83916,
    "long": 132.76574,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Yamagata-shi",
    "country": "JP",
    "lat": 38.24056,
    "long": 140.36333,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Tsukuba",
    "country": "JP",
    "lat": 36.2,
    "long": 140.1,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Sendai-shi",
    "country": "JP",
    "lat": 38.26889,
    "long": 140.87195,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Sakura",
    "country": "JP",
    "lat": 35.71667,
    "long": 140.23333,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Narita",
    "country": "JP",
    "lat": 35.78333,
    "long": 140.31667,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Morioka-shi",
    "country": "JP",
    "lat": 39.70361,
    "long": 141.1525,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Mito-shi",
    "country": "JP",
    "lat": 36.34139,
    "long": 140.44667,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Kōriyama",
    "country": "JP",
    "lat": 37.4,
    "long": 140.38333,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Katsuta",
    "country": "JP",
    "lat": 36.38333,
    "long": 140.53333,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Iwaki",
    "country": "JP",
    "lat": 37.05,
    "long": 140.88333,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Ishinomaki",
    "country": "JP",
    "lat": 38.41667,
    "long": 141.3,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Ichihara",
    "country": "JP",
    "lat": 35.51667,
    "long": 140.08333,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Hitachi",
    "country": "JP",
    "lat": 36.6,
    "long": 140.65,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Fukushima-shi",
    "country": "JP",
    "lat": 37.75,
    "long": 140.46778,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Chiba",
    "country": "JP",
    "lat": 35.60472,
    "long": 140.12333,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Akita",
    "country": "JP",
    "lat": 39.71667,
    "long": 140.11667,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Abiko",
    "country": "JP",
    "lat": 35.86667,
    "long": 140.01667,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Akita Shi",
    "country": "JP",
    "lat": 39.71806,
    "long": 140.10333,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Tomakomai",
    "country": "JP",
    "lat": 42.63694,
    "long": 141.60333,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Sapporo",
    "country": "JP",
    "lat": 43.06417,
    "long": 141.34695,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Otaru",
    "country": "JP",
    "lat": 43.18944,
    "long": 141.00222,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Obihiro",
    "country": "JP",
    "lat": 42.91722,
    "long": 143.20444,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Kushiro",
    "country": "JP",
    "lat": 42.975,
    "long": 144.37472,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Kitami",
    "country": "JP",
    "lat": 43.80306,
    "long": 143.89083,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Hirosaki",
    "country": "JP",
    "lat": 40.59306,
    "long": 140.4725,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Hakodate",
    "country": "JP",
    "lat": 41.77583,
    "long": 140.73667,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Hachinohe",
    "country": "JP",
    "lat": 40.5,
    "long": 141.5,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Ebetsu",
    "country": "JP",
    "lat": 43.10806,
    "long": 141.55056,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Asahikawa",
    "country": "JP",
    "lat": 43.77063,
    "long": 142.36489,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Aomori Shi",
    "country": "JP",
    "lat": 40.82444,
    "long": 140.74,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Neyagawa",
    "country": "JP",
    "lat": 34.76615,
    "long": 135.62759,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Hitachi-Naka",
    "country": "JP",
    "lat": 36.39659,
    "long": 140.53479,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Jōetsu",
    "country": "JP",
    "lat": 37.14828,
    "long": 138.23642,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Saitama",
    "country": "JP",
    "lat": 35.90807,
    "long": 139.65657,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Higashimurayama-shi",
    "country": "JP",
    "lat": 35.75459,
    "long": 139.46852,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Sendai",
    "country": "JP",
    "lat": 38.25759,
    "long": 140.8667,
    "zone": "Asia/Tokyo"
  },
  {
    "name": "Thika",
    "country": "KE",
    "lat": -1.03326,
    "long": 37.06933,
    "zone": "Africa/Nairobi"
  },
  {
    "name": "Nakuru",
    "country": "KE",
    "lat": -0.28333,
    "long": 36.06667,
    "zone": "Africa/Nairobi"
  },
  {
    "name": "Nairobi",
    "country": "KE",
    "lat": -1.28333,
    "long": 36.81667,
    "zone": "Africa/Nairobi"
  },
  {
    "name": "Mombasa",
    "country": "KE",
    "lat": -4.05466,
    "long": 39.66359,
    "zone": "Africa/Nairobi"
  },
  {
    "name": "Malindi",
    "country": "KE",
    "lat": -3.21799,
    "long": 40.11692,
    "zone": "Africa/Nairobi"
  },
  {
    "name": "Kisumu",
    "country": "KE",
    "lat": -0.10221,
    "long": 34.76171,
    "zone": "Africa/Nairobi"
  },
  {
    "name": "Eldoret",
    "country": "KE",
    "lat": 0.52036,
    "long": 35.26993,
    "zone": "Africa/Nairobi"
  },
  {
    "name": "Osh",
    "country": "KG",
    "lat": 40.51506,
    "long": 72.80826,
    "zone": "Asia/Bishkek"
  },
  {
    "name": "Bishkek",
    "country": "KG",
    "lat": 42.87,
    "long": 74.59,
    "zone": "Asia/Bishkek"
  },
  {
    "name": "Phnom Penh",
    "country": "KH",
    "lat": 11.56245,
    "long": 104.91601,
    "zone": "Asia/Phnom_Penh"
  },
  {
    "name": "Takeo",
    "country": "KH",
    "lat": 10.99081,
    "long": 104.78498,
    "zone": "Asia/Phnom_Penh"
  },
  {
    "name": "Siem Reap",
    "country": "KH",
    "lat": 13.36179,
    "long": 103.86056,
    "zone": "Asia/Phnom_Penh"
  },
  {
    "name": "Sihanoukville",
    "country": "KH",
    "lat": 10.60932,
    "long": 103.52958,
    "zone": "Asia/Phnom_Penh"
  },
  {
    "name": "Battambang",
    "country": "KH",
    "lat": 13.10271,
    "long": 103.19822,
    "zone": "Asia/Phnom_Penh"
  },
  {
    "name": "Wŏnsan",
    "country": "KP",
    "lat": 39.15278,
    "long": 127.44361,
    "zone": "Asia/Pyongyang"
  },
  {
    "name": "Songnim",
    "country": "KP",
    "lat": 38.75417,
    "long": 125.645,
    "zone": "Asia/Pyongyang"
  },
  {
    "name": "Sariwŏn",
    "country": "KP",
    "lat": 38.50722,
    "long": 125.75583,
    "zone": "Asia/Pyongyang"
  },
  {
    "name": "Pyongyang",
    "country": "KP",
    "lat": 39.03385,
    "long": 125.75432,
    "zone": "Asia/Pyongyang"
  },
  {
    "name": "Namp’o",
    "country": "KP",
    "lat": 38.7375,
    "long": 125.40778,
    "zone": "Asia/Pyongyang"
  },
  {
    "name": "Kaesŏng",
    "country": "KP",
    "lat": 37.97083,
    "long": 126.55444,
    "zone": "Asia/Pyongyang"
  },
  {
    "name": "Hŭngnam",
    "country": "KP",
    "lat": 39.83167,
    "long": 127.61861,
    "zone": "Asia/Pyongyang"
  },
  {
    "name": "Hamhŭng",
    "country": "KP",
    "lat": 39.91833,
    "long": 127.53639,
    "zone": "Asia/Pyongyang"
  },
  {
    "name": "Haeju",
    "country": "KP",
    "lat": 38.04056,
    "long": 125.71472,
    "zone": "Asia/Pyongyang"
  },
  {
    "name": "Sinŭiju",
    "country": "KP",
    "lat": 40.10056,
    "long": 124.39806,
    "zone": "Asia/Pyongyang"
  },
  {
    "name": "Kanggye-si",
    "country": "KP",
    "lat": 40.96946,
    "long": 126.58523,
    "zone": "Asia/Pyongyang"
  },
  {
    "name": "Hyesan-si",
    "country": "KP",
    "lat": 41.40167,
    "long": 128.17778,
    "zone": "Asia/Pyongyang"
  },
  {
    "name": "Chongjin",
    "country": "KP",
    "lat": 41.79556,
    "long": 129.77583,
    "zone": "Asia/Pyongyang"
  },
  {
    "name": "Yangju",
    "country": "KR",
    "lat": 37.83311,
    "long": 127.06169,
    "zone": "Asia/Seoul"
  },
  {
    "name": "Wŏnju",
    "country": "KR",
    "lat": 37.35139,
    "long": 127.94528,
    "zone": "Asia/Seoul"
  },
  {
    "name": "Ulsan",
    "country": "KR",
    "lat": 35.53722,
    "long": 129.31667,
    "zone": "Asia/Seoul"
  },
  {
    "name": "Uijeongbu-si",
    "country": "KR",
    "lat": 37.7415,
    "long": 127.0474,
    "zone": "Asia/Seoul"
  },
  {
    "name": "Daejeon",
    "country": "KR",
    "lat": 36.32139,
    "long": 127.41972,
    "zone": "Asia/Seoul"
  },
  {
    "name": "Daegu",
    "country": "KR",
    "lat": 35.87028,
    "long": 128.59111,
    "zone": "Asia/Seoul"
  },
  {
    "name": "Suwon-si",
    "country": "KR",
    "lat": 37.29111,
    "long": 127.00889,
    "zone": "Asia/Seoul"
  },
  {
    "name": "Suncheon",
    "country": "KR",
    "lat": 34.94808,
    "long": 127.48947,
    "zone": "Asia/Seoul"
  },
  {
    "name": "Seoul",
    "country": "KR",
    "lat": 37.566,
    "long": 126.9784,
    "zone": "Asia/Seoul"
  },
  {
    "name": "Busan",
    "country": "KR",
    "lat": 35.10278,
    "long": 129.04028,
    "zone": "Asia/Seoul"
  },
  {
    "name": "Bucheon-si",
    "country": "KR",
    "lat": 37.49889,
    "long": 126.78306,
    "zone": "Asia/Seoul"
  },
  {
    "name": "Pohang",
    "country": "KR",
    "lat": 36.03222,
    "long": 129.365,
    "zone": "Asia/Seoul"
  },
  {
    "name": "Osan",
    "country": "KR",
    "lat": 37.15222,
    "long": 127.07056,
    "zone": "Asia/Seoul"
  },
  {
    "name": "Moppo",
    "country": "KR",
    "lat": 34.79361,
    "long": 126.38861,
    "zone": "Asia/Seoul"
  },
  {
    "name": "Gyeongsan-si",
    "country": "KR",
    "lat": 35.82333,
    "long": 128.73778,
    "zone": "Asia/Seoul"
  },
  {
    "name": "Kyonju",
    "country": "KR",
    "lat": 35.84278,
    "long": 129.21167,
    "zone": "Asia/Seoul"
  },
  {
    "name": "Gwangju",
    "country": "KR",
    "lat": 35.15472,
    "long": 126.91556,
    "zone": "Asia/Seoul"
  },
  {
    "name": "Guri-si",
    "country": "KR",
    "lat": 37.5986,
    "long": 127.1394,
    "zone": "Asia/Seoul"
  },
  {
    "name": "Kunsan",
    "country": "KR",
    "lat": 35.97861,
    "long": 126.71139,
    "zone": "Asia/Seoul"
  },
  {
    "name": "Gumi",
    "country": "KR",
    "lat": 36.1136,
    "long": 128.336,
    "zone": "Asia/Seoul"
  },
  {
    "name": "Goyang-si",
    "country": "KR",
    "lat": 37.65639,
    "long": 126.835,
    "zone": "Asia/Seoul"
  },
  {
    "name": "Kimhae",
    "country": "KR",
    "lat": 35.23417,
    "long": 128.88111,
    "zone": "Asia/Seoul"
  },
  {
    "name": "Gimcheon",
    "country": "KR",
    "lat": 36.12176,
    "long": 128.11981,
    "zone": "Asia/Seoul"
  },
  {
    "name": "Kang-neung",
    "country": "KR",
    "lat": 37.75556,
    "long": 128.89611,
    "zone": "Asia/Seoul"
  },
  {
    "name": "Iksan",
    "country": "KR",
    "lat": 35.94389,
    "long": 126.95444,
    "zone": "Asia/Seoul"
  },
  {
    "name": "Incheon",
    "country": "KR",
    "lat": 37.45646,
    "long": 126.70515,
    "zone": "Asia/Seoul"
  },
  {
    "name": "Icheon-si",
    "country": "KR",
    "lat": 37.27917,
    "long": 127.4425,
    "zone": "Asia/Seoul"
  },
  {
    "name": "Hwaseong-si",
    "country": "KR",
    "lat": 37.20682,
    "long": 126.8169,
    "zone": "Asia/Seoul"
  },
  {
    "name": "Chuncheon",
    "country": "KR",
    "lat": 37.87472,
    "long": 127.73417,
    "zone": "Asia/Seoul"
  },
  {
    "name": "Jeonju",
    "country": "KR",
    "lat": 35.82194,
    "long": 127.14889,
    "zone": "Asia/Seoul"
  },
  {
    "name": "Cheongju-si",
    "country": "KR",
    "lat": 36.63722,
    "long": 127.48972,
    "zone": "Asia/Seoul"
  },
  {
    "name": "Cheonan",
    "country": "KR",
    "lat": 36.8065,
    "long": 127.1522,
    "zone": "Asia/Seoul"
  },
  {
    "name": "Chinju",
    "country": "KR",
    "lat": 35.19278,
    "long": 128.08472,
    "zone": "Asia/Seoul"
  },
  {
    "name": "Jeju-si",
    "country": "KR",
    "lat": 33.50972,
    "long": 126.52194,
    "zone": "Asia/Seoul"
  },
  {
    "name": "Changwon",
    "country": "KR",
    "lat": 35.22806,
    "long": 128.68111,
    "zone": "Asia/Seoul"
  },
  {
    "name": "Anyang-si",
    "country": "KR",
    "lat": 37.3925,
    "long": 126.92694,
    "zone": "Asia/Seoul"
  },
  {
    "name": "Ansan-si",
    "country": "KR",
    "lat": 37.32361,
    "long": 126.82194,
    "zone": "Asia/Seoul"
  },
  {
    "name": "Andong",
    "country": "KR",
    "lat": 36.56556,
    "long": 128.725,
    "zone": "Asia/Seoul"
  },
  {
    "name": "Yeosu",
    "country": "KR",
    "lat": 34.76278,
    "long": 127.66528,
    "zone": "Asia/Seoul"
  },
  {
    "name": "Tonghae",
    "country": "KR",
    "lat": 37.54389,
    "long": 129.10694,
    "zone": "Asia/Seoul"
  },
  {
    "name": "Seongnam-si",
    "country": "KR",
    "lat": 37.43861,
    "long": 127.13778,
    "zone": "Asia/Seoul"
  },
  {
    "name": "Hanam",
    "country": "KR",
    "lat": 37.54,
    "long": 127.20556,
    "zone": "Asia/Seoul"
  },
  {
    "name": "Hwado",
    "country": "KR",
    "lat": 37.6525,
    "long": 127.3075,
    "zone": "Asia/Seoul"
  },
  {
    "name": "Kwangmyŏng",
    "country": "KR",
    "lat": 37.47722,
    "long": 126.86639,
    "zone": "Asia/Seoul"
  },
  {
    "name": "Seogwipo",
    "country": "KR",
    "lat": 33.25333,
    "long": 126.56181,
    "zone": "Asia/Seoul"
  },
  {
    "name": "Ḩawallī",
    "country": "KW",
    "lat": 29.33278,
    "long": 48.02861,
    "zone": "Asia/Kuwait"
  },
  {
    "name": "As Sālimīyah",
    "country": "KW",
    "lat": 29.33389,
    "long": 48.07611,
    "zone": "Asia/Kuwait"
  },
  {
    "name": "Al Aḩmadī",
    "country": "KW",
    "lat": 29.07694,
    "long": 48.08389,
    "zone": "Asia/Kuwait"
  },
  {
    "name": "Şabāḩ as Sālim",
    "country": "KW",
    "lat": 29.25722,
    "long": 48.05722,
    "zone": "Asia/Kuwait"
  },
  {
    "name": "Zhanaozen",
    "country": "KZ",
    "lat": 43.34116,
    "long": 52.86192,
    "zone": "Asia/Aqtau"
  },
  {
    "name": "Oral",
    "country": "KZ",
    "lat": 51.23333,
    "long": 51.36667,
    "zone": "Asia/Oral"
  },
  {
    "name": "Karagandy",
    "country": "KZ",
    "lat": 49.83333,
    "long": 73.1658,
    "zone": "Asia/Almaty"
  },
  {
    "name": "Atyrau",
    "country": "KZ",
    "lat": 47.11667,
    "long": 51.88333,
    "zone": "Asia/Oral"
  },
  {
    "name": "Aqtöbe",
    "country": "KZ",
    "lat": 50.27969,
    "long": 57.20718,
    "zone": "Asia/Aqtobe"
  },
  {
    "name": "Aktau",
    "country": "KZ",
    "lat": 43.64806,
    "long": 51.17222,
    "zone": "Asia/Aqtau"
  },
  {
    "name": "Zhezqazghan",
    "country": "KZ",
    "lat": 47.78333,
    "long": 67.76667,
    "zone": "Asia/Almaty"
  },
  {
    "name": "Taraz",
    "country": "KZ",
    "lat": 42.9,
    "long": 71.36667,
    "zone": "Asia/Almaty"
  },
  {
    "name": "Temirtau",
    "country": "KZ",
    "lat": 50.05494,
    "long": 72.96464,
    "zone": "Asia/Almaty"
  },
  {
    "name": "Taldykorgan",
    "country": "KZ",
    "lat": 45.01556,
    "long": 78.37389,
    "zone": "Asia/Almaty"
  },
  {
    "name": "Taldyqorghan",
    "country": "KZ",
    "lat": 45,
    "long": 77.91667,
    "zone": "Asia/Almaty"
  },
  {
    "name": "Shymkent",
    "country": "KZ",
    "lat": 42.3,
    "long": 69.6,
    "zone": "Asia/Almaty"
  },
  {
    "name": "Semey",
    "country": "KZ",
    "lat": 50.42675,
    "long": 80.26669,
    "zone": "Asia/Almaty"
  },
  {
    "name": "Rudnyy",
    "country": "KZ",
    "lat": 52.9729,
    "long": 63.11677,
    "zone": "Asia/Qyzylorda"
  },
  {
    "name": "Kyzylorda",
    "country": "KZ",
    "lat": 44.85278,
    "long": 65.50917,
    "zone": "Asia/Qyzylorda"
  },
  {
    "name": "Kostanay",
    "country": "KZ",
    "lat": 53.21435,
    "long": 63.62463,
    "zone": "Asia/Qyzylorda"
  },
  {
    "name": "Petropavlovsk",
    "country": "KZ",
    "lat": 54.87279,
    "long": 69.143,
    "zone": "Asia/Almaty"
  },
  {
    "name": "Pavlodar",
    "country": "KZ",
    "lat": 52.27401,
    "long": 77.00438,
    "zone": "Asia/Almaty"
  },
  {
    "name": "Ust-Kamenogorsk",
    "country": "KZ",
    "lat": 49.97143,
    "long": 82.60586,
    "zone": "Asia/Almaty"
  },
  {
    "name": "Kokshetau",
    "country": "KZ",
    "lat": 53.28245,
    "long": 69.39692,
    "zone": "Asia/Almaty"
  },
  {
    "name": "Ekibastuz",
    "country": "KZ",
    "lat": 51.72371,
    "long": 75.32287,
    "zone": "Asia/Almaty"
  },
  {
    "name": "Astana",
    "country": "KZ",
    "lat": 51.1801,
    "long": 71.44598,
    "zone": "Asia/Almaty"
  },
  {
    "name": "Almaty",
    "country": "KZ",
    "lat": 43.25654,
    "long": 76.92848,
    "zone": "Asia/Almaty"
  },
  {
    "name": "Kyzyl-Orda",
    "country": "KZ",
    "lat": 44.8479,
    "long": 65.49989,
    "zone": "Asia/Almaty"
  },
  {
    "name": "Vientiane",
    "country": "LA",
    "lat": 17.96667,
    "long": 102.6,
    "zone": "Asia/Vientiane"
  },
  {
    "name": "Tripoli",
    "country": "LB",
    "lat": 34.43667,
    "long": 35.84972,
    "zone": "Asia/Beirut"
  },
  {
    "name": "Tyre",
    "country": "LB",
    "lat": 33.27333,
    "long": 35.19389,
    "zone": "Asia/Beirut"
  },
  {
    "name": "Sidon",
    "country": "LB",
    "lat": 33.55993,
    "long": 35.37564,
    "zone": "Asia/Beirut"
  },
  {
    "name": "Ra’s Bayrūt",
    "country": "LB",
    "lat": 33.9,
    "long": 35.48333,
    "zone": "Asia/Beirut"
  },
  {
    "name": "Beirut",
    "country": "LB",
    "lat": 33.88894,
    "long": 35.49442,
    "zone": "Asia/Beirut"
  },
  {
    "name": "Nabatîyé et Tahta",
    "country": "LB",
    "lat": 33.37889,
    "long": 35.48389,
    "zone": "Asia/Beirut"
  },
  {
    "name": "Trincomalee",
    "country": "LK",
    "lat": 8.5711,
    "long": 81.2335,
    "zone": "Asia/Colombo"
  },
  {
    "name": "Pita Kotte",
    "country": "LK",
    "lat": 6.8905,
    "long": 79.9015,
    "zone": "Asia/Colombo"
  },
  {
    "name": "Negombo",
    "country": "LK",
    "lat": 7.2083,
    "long": 79.8358,
    "zone": "Asia/Colombo"
  },
  {
    "name": "Moratuwa",
    "country": "LK",
    "lat": 6.773,
    "long": 79.8816,
    "zone": "Asia/Colombo"
  },
  {
    "name": "Sri Jayewardenepura Kotte",
    "country": "LK",
    "lat": 6.88297,
    "long": 79.90708,
    "zone": "Asia/Colombo"
  },
  {
    "name": "Kandy",
    "country": "LK",
    "lat": 7.2955,
    "long": 80.6356,
    "zone": "Asia/Colombo"
  },
  {
    "name": "Kalmunai",
    "country": "LK",
    "lat": 7.40902,
    "long": 81.83472,
    "zone": "Asia/Colombo"
  },
  {
    "name": "Jaffna",
    "country": "LK",
    "lat": 9.66845,
    "long": 80.00742,
    "zone": "Asia/Colombo"
  },
  {
    "name": "Galkissa",
    "country": "LK",
    "lat": 6.8293,
    "long": 79.863,
    "zone": "Asia/Colombo"
  },
  {
    "name": "Colombo",
    "country": "LK",
    "lat": 6.93194,
    "long": 79.84778,
    "zone": "Asia/Colombo"
  },
  {
    "name": "Monrovia",
    "country": "LR",
    "lat": 6.30054,
    "long": -10.7969,
    "zone": "Africa/Monrovia"
  },
  {
    "name": "Maseru",
    "country": "LS",
    "lat": -29.31667,
    "long": 27.48333,
    "zone": "Africa/Maseru"
  },
  {
    "name": "Vilnius",
    "country": "LT",
    "lat": 54.68916,
    "long": 25.2798,
    "zone": "Europe/Vilnius"
  },
  {
    "name": "Šiauliai",
    "country": "LT",
    "lat": 55.93333,
    "long": 23.31667,
    "zone": "Europe/Vilnius"
  },
  {
    "name": "Panevėžys",
    "country": "LT",
    "lat": 55.73333,
    "long": 24.35,
    "zone": "Europe/Vilnius"
  },
  {
    "name": "Klaipėda",
    "country": "LT",
    "lat": 55.71722,
    "long": 21.1175,
    "zone": "Europe/Vilnius"
  },
  {
    "name": "Kaunas",
    "country": "LT",
    "lat": 54.9,
    "long": 23.9,
    "zone": "Europe/Vilnius"
  },
  {
    "name": "Riga",
    "country": "LV",
    "lat": 56.946,
    "long": 24.10589,
    "zone": "Europe/Riga"
  },
  {
    "name": "Daugavpils",
    "country": "LV",
    "lat": 55.88333,
    "long": 26.53333,
    "zone": "Europe/Riga"
  },
  {
    "name": "Tobruk",
    "country": "LY",
    "lat": 32.08361,
    "long": 23.97639,
    "zone": "Africa/Tripoli"
  },
  {
    "name": "Benghazi",
    "country": "LY",
    "lat": 32.11486,
    "long": 20.06859,
    "zone": "Africa/Tripoli"
  },
  {
    "name": "Ajdabiya",
    "country": "LY",
    "lat": 30.75545,
    "long": 20.22625,
    "zone": "Africa/Tripoli"
  },
  {
    "name": "Zliten",
    "country": "LY",
    "lat": 32.46739,
    "long": 14.56874,
    "zone": "Africa/Tripoli"
  },
  {
    "name": "Tarhuna",
    "country": "LY",
    "lat": 32.43501,
    "long": 13.6332,
    "zone": "Africa/Tripoli"
  },
  {
    "name": "Tripoli",
    "country": "LY",
    "lat": 32.87519,
    "long": 13.18746,
    "zone": "Africa/Tripoli"
  },
  {
    "name": "Sirte",
    "country": "LY",
    "lat": 31.20892,
    "long": 16.58866,
    "zone": "Africa/Tripoli"
  },
  {
    "name": "Şabrātah",
    "country": "LY",
    "lat": 32.79335,
    "long": 12.48845,
    "zone": "Africa/Tripoli"
  },
  {
    "name": "Sabhā",
    "country": "LY",
    "lat": 27.03766,
    "long": 14.42832,
    "zone": "Africa/Tripoli"
  },
  {
    "name": "Mişrātah",
    "country": "LY",
    "lat": 32.37535,
    "long": 15.09254,
    "zone": "Africa/Tripoli"
  },
  {
    "name": "Zawiya",
    "country": "LY",
    "lat": 32.75222,
    "long": 12.72778,
    "zone": "Africa/Tripoli"
  },
  {
    "name": "Az Zāwīyah",
    "country": "LY",
    "lat": 32.7571,
    "long": 12.72764,
    "zone": "Africa/Tripoli"
  },
  {
    "name": "Al Khums",
    "country": "LY",
    "lat": 32.64861,
    "long": 14.26191,
    "zone": "Africa/Tripoli"
  },
  {
    "name": "Al Jadīd",
    "country": "LY",
    "lat": 27.05,
    "long": 14.4,
    "zone": "Africa/Tripoli"
  },
  {
    "name": "Tétouan",
    "country": "MA",
    "lat": 35.57845,
    "long": -5.36837,
    "zone": "Africa/Casablanca"
  },
  {
    "name": "Taza",
    "country": "MA",
    "lat": 34.21,
    "long": -4.01,
    "zone": "Africa/Casablanca"
  },
  {
    "name": "Tangier",
    "country": "MA",
    "lat": 35.76727,
    "long": -5.79975,
    "zone": "Africa/Casablanca"
  },
  {
    "name": "Settat",
    "country": "MA",
    "lat": 33.00103,
    "long": -7.61662,
    "zone": "Africa/Casablanca"
  },
  {
    "name": "Sale",
    "country": "MA",
    "lat": 34.0531,
    "long": -6.79846,
    "zone": "Africa/Casablanca"
  },
  {
    "name": "Safi",
    "country": "MA",
    "lat": 32.29939,
    "long": -9.23718,
    "zone": "Africa/Casablanca"
  },
  {
    "name": "Rabat",
    "country": "MA",
    "lat": 34.01325,
    "long": -6.83255,
    "zone": "Africa/Casablanca"
  },
  {
    "name": "Oujda",
    "country": "MA",
    "lat": 34.68053,
    "long": -1.90764,
    "zone": "Africa/Casablanca"
  },
  {
    "name": "Nador",
    "country": "MA",
    "lat": 35.16813,
    "long": -2.93352,
    "zone": "Africa/Casablanca"
  },
  {
    "name": "Mohammedia",
    "country": "MA",
    "lat": 33.68607,
    "long": -7.38298,
    "zone": "Africa/Casablanca"
  },
  {
    "name": "Meknès",
    "country": "MA",
    "lat": 33.89352,
    "long": -5.54727,
    "zone": "Africa/Casablanca"
  },
  {
    "name": "Marrakesh",
    "country": "MA",
    "lat": 31.63416,
    "long": -7.99994,
    "zone": "Africa/Casablanca"
  },
  {
    "name": "Larache",
    "country": "MA",
    "lat": 35.19321,
    "long": -6.15572,
    "zone": "Africa/Casablanca"
  },
  {
    "name": "Ksar el Kebir",
    "country": "MA",
    "lat": 35.00174,
    "long": -5.90534,
    "zone": "Africa/Casablanca"
  },
  {
    "name": "Khouribga",
    "country": "MA",
    "lat": 32.88108,
    "long": -6.9063,
    "zone": "Africa/Casablanca"
  },
  {
    "name": "Kenitra",
    "country": "MA",
    "lat": 34.26101,
    "long": -6.5802,
    "zone": "Africa/Casablanca"
  },
  {
    "name": "Fès",
    "country": "MA",
    "lat": 34.03715,
    "long": -4.9998,
    "zone": "Africa/Casablanca"
  },
  {
    "name": "El Jadida",
    "country": "MA",
    "lat": 33.25492,
    "long": -8.50602,
    "zone": "Africa/Casablanca"
  },
  {
    "name": "Casablanca",
    "country": "MA",
    "lat": 33.58831,
    "long": -7.61138,
    "zone": "Africa/Casablanca"
  },
  {
    "name": "Beni Mellal",
    "country": "MA",
    "lat": 32.33725,
    "long": -6.34983,
    "zone": "Africa/Casablanca"
  },
  {
    "name": "Khemisset",
    "country": "MA",
    "lat": 33.82404,
    "long": -6.06627,
    "zone": "Africa/Casablanca"
  },
  {
    "name": "Al Hoceïma",
    "country": "MA",
    "lat": 35.25165,
    "long": -3.93723,
    "zone": "Africa/Casablanca"
  },
  {
    "name": "Agadir",
    "country": "MA",
    "lat": 30.42018,
    "long": -9.59815,
    "zone": "Africa/Casablanca"
  },
  {
    "name": "Tiraspolul",
    "country": "MD",
    "lat": 46.84274,
    "long": 29.62909,
    "zone": "Europe/Chisinau"
  },
  {
    "name": "Chişinău",
    "country": "MD",
    "lat": 47.00556,
    "long": 28.8575,
    "zone": "Europe/Chisinau"
  },
  {
    "name": "Bender",
    "country": "MD",
    "lat": 46.83156,
    "long": 29.47769,
    "zone": "Europe/Chisinau"
  },
  {
    "name": "Bălţi",
    "country": "MD",
    "lat": 47.76314,
    "long": 27.92932,
    "zone": "Europe/Chisinau"
  },
  {
    "name": "Podgorica",
    "country": "ME",
    "lat": 42.44111,
    "long": 19.26361,
    "zone": "Europe/Podgorica"
  },
  {
    "name": "Toamasina",
    "country": "MG",
    "lat": -18.1492,
    "long": 49.40234,
    "zone": "Indian/Antananarivo"
  },
  {
    "name": "Toliara",
    "country": "MG",
    "lat": -23.35,
    "long": 43.66667,
    "zone": "Indian/Antananarivo"
  },
  {
    "name": "Mahajanga",
    "country": "MG",
    "lat": -15.71667,
    "long": 46.31667,
    "zone": "Indian/Antananarivo"
  },
  {
    "name": "Fianarantsoa",
    "country": "MG",
    "lat": -21.45267,
    "long": 47.08569,
    "zone": "Indian/Antananarivo"
  },
  {
    "name": "Antsirabe",
    "country": "MG",
    "lat": -19.86586,
    "long": 47.03333,
    "zone": "Indian/Antananarivo"
  },
  {
    "name": "Antananarivo",
    "country": "MG",
    "lat": -18.91368,
    "long": 47.53613,
    "zone": "Indian/Antananarivo"
  },
  {
    "name": "Skopje",
    "country": "MK",
    "lat": 41.99646,
    "long": 21.43141,
    "zone": "Europe/Skopje"
  },
  {
    "name": "Sikasso",
    "country": "ML",
    "lat": 11.31755,
    "long": -5.66654,
    "zone": "Africa/Bamako"
  },
  {
    "name": "Mopti",
    "country": "ML",
    "lat": 14.4843,
    "long": -4.18296,
    "zone": "Africa/Bamako"
  },
  {
    "name": "Bamako",
    "country": "ML",
    "lat": 12.65,
    "long": -8,
    "zone": "Africa/Bamako"
  },
  {
    "name": "Yenangyaung",
    "country": "MM",
    "lat": 20.46504,
    "long": 94.8712,
    "zone": "Asia/Rangoon"
  },
  {
    "name": "Taungoo",
    "country": "MM",
    "lat": 18.94291,
    "long": 96.43408,
    "zone": "Asia/Rangoon"
  },
  {
    "name": "Thaton",
    "country": "MM",
    "lat": 16.91867,
    "long": 97.37001,
    "zone": "Asia/Rangoon"
  },
  {
    "name": "Dawei",
    "country": "MM",
    "lat": 14.07375,
    "long": 98.19423,
    "zone": "Asia/Rangoon"
  },
  {
    "name": "Taunggyi",
    "country": "MM",
    "lat": 20.78919,
    "long": 97.03776,
    "zone": "Asia/Rangoon"
  },
  {
    "name": "Sittwe",
    "country": "MM",
    "lat": 20.14624,
    "long": 92.89835,
    "zone": "Asia/Rangoon"
  },
  {
    "name": "Yangon",
    "country": "MM",
    "lat": 16.80528,
    "long": 96.15611,
    "zone": "Asia/Rangoon"
  },
  {
    "name": "Pyay",
    "country": "MM",
    "lat": 18.82464,
    "long": 95.22216,
    "zone": "Asia/Rangoon"
  },
  {
    "name": "Bago",
    "country": "MM",
    "lat": 17.33521,
    "long": 96.48135,
    "zone": "Asia/Rangoon"
  },
  {
    "name": "Pakokku",
    "country": "MM",
    "lat": 21.33489,
    "long": 95.08438,
    "zone": "Asia/Rangoon"
  },
  {
    "name": "Myingyan",
    "country": "MM",
    "lat": 21.46002,
    "long": 95.3884,
    "zone": "Asia/Rangoon"
  },
  {
    "name": "Mawlamyine",
    "country": "MM",
    "lat": 16.49051,
    "long": 97.62825,
    "zone": "Asia/Rangoon"
  },
  {
    "name": "Monywa",
    "country": "MM",
    "lat": 22.10856,
    "long": 95.13583,
    "zone": "Asia/Rangoon"
  },
  {
    "name": "Myeik",
    "country": "MM",
    "lat": 12.43954,
    "long": 98.60028,
    "zone": "Asia/Rangoon"
  },
  {
    "name": "Meiktila",
    "country": "MM",
    "lat": 20.87776,
    "long": 95.85844,
    "zone": "Asia/Rangoon"
  },
  {
    "name": "Pyin Oo Lwin",
    "country": "MM",
    "lat": 22.03501,
    "long": 96.45683,
    "zone": "Asia/Rangoon"
  },
  {
    "name": "Mandalay",
    "country": "MM",
    "lat": 21.97473,
    "long": 96.08359,
    "zone": "Asia/Rangoon"
  },
  {
    "name": "Lashio",
    "country": "MM",
    "lat": 22.9359,
    "long": 97.7498,
    "zone": "Asia/Rangoon"
  },
  {
    "name": "Hinthada",
    "country": "MM",
    "lat": 17.64944,
    "long": 95.45705,
    "zone": "Asia/Rangoon"
  },
  {
    "name": "Pathein",
    "country": "MM",
    "lat": 16.77919,
    "long": 94.73212,
    "zone": "Asia/Rangoon"
  },
  {
    "name": "Nay Pyi Taw",
    "country": "MM",
    "lat": 19.745,
    "long": 96.12972,
    "zone": "Asia/Rangoon"
  },
  {
    "name": "Ulaanbaatar",
    "country": "MN",
    "lat": 47.90771,
    "long": 106.88324,
    "zone": "Asia/Ulaanbaatar"
  },
  {
    "name": "Macau",
    "country": "MO",
    "lat": 22.20056,
    "long": 113.54611,
    "zone": "Asia/Macau"
  },
  {
    "name": "Nouakchott",
    "country": "MR",
    "lat": 18.08581,
    "long": -15.9785,
    "zone": "Africa/Nouakchott"
  },
  {
    "name": "Vacoas",
    "country": "MU",
    "lat": -20.29806,
    "long": 57.47833,
    "zone": "Indian/Mauritius"
  },
  {
    "name": "Port Louis",
    "country": "MU",
    "lat": -20.16194,
    "long": 57.49889,
    "zone": "Indian/Mauritius"
  },
  {
    "name": "Male",
    "country": "MV",
    "lat": 4.1748,
    "long": 73.50888,
    "zone": "Indian/Maldives"
  },
  {
    "name": "Mzuzu",
    "country": "MW",
    "lat": -11.46556,
    "long": 34.02071,
    "zone": "Africa/Blantyre"
  },
  {
    "name": "Lilongwe",
    "country": "MW",
    "lat": -13.96692,
    "long": 33.78725,
    "zone": "Africa/Blantyre"
  },
  {
    "name": "Blantyre",
    "country": "MW",
    "lat": -15.78499,
    "long": 35.00854,
    "zone": "Africa/Blantyre"
  },
  {
    "name": "Gustavo A. Madero",
    "country": "MX",
    "lat": 22.8694,
    "long": -98.75886,
    "zone": "America/Monterrey"
  },
  {
    "name": "Xochimilco",
    "country": "MX",
    "lat": 19.25785,
    "long": -99.10513,
    "zone": "America/Mexico_City"
  },
  {
    "name": "San Miguel Xico Viejo",
    "country": "MX",
    "lat": 19.27022,
    "long": -98.93588,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Álvaro Obregón",
    "country": "MX",
    "lat": 19.35867,
    "long": -99.20329,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Villahermosa",
    "country": "MX",
    "lat": 17.98689,
    "long": -92.93028,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Gustavo A. Madero",
    "country": "MX",
    "lat": 19.49016,
    "long": -99.10978,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Veracruz",
    "country": "MX",
    "lat": 19.18095,
    "long": -96.1429,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Tuxtla Gutiérrez",
    "country": "MX",
    "lat": 16.75973,
    "long": -93.11308,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Tuxpan de Rodríguez Cano",
    "country": "MX",
    "lat": 20.95773,
    "long": -97.40798,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Tulancingo",
    "country": "MX",
    "lat": 20.08363,
    "long": -98.36332,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Toluca",
    "country": "MX",
    "lat": 19.28786,
    "long": -99.65324,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Tlalpan",
    "country": "MX",
    "lat": 19.29707,
    "long": -99.16787,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Tlalnepantla",
    "country": "MX",
    "lat": 19.54005,
    "long": -99.19538,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Tlahuac",
    "country": "MX",
    "lat": 19.28348,
    "long": -99.00317,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Texcoco de Mora",
    "country": "MX",
    "lat": 19.51194,
    "long": -98.88293,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Cuautitlán Izcalli",
    "country": "MX",
    "lat": 19.64388,
    "long": -99.21598,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Temapache",
    "country": "MX",
    "lat": 21.06611,
    "long": -97.64207,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Tehuacán",
    "country": "MX",
    "lat": 18.46148,
    "long": -97.39282,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Tapachula",
    "country": "MX",
    "lat": 14.90696,
    "long": -92.26185,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Tantoyuca",
    "country": "MX",
    "lat": 21.35064,
    "long": -98.2257,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Tampico",
    "country": "MX",
    "lat": 22.27817,
    "long": -97.86772,
    "zone": "America/Monterrey"
  },
  {
    "name": "Santa María Chimalhuacán",
    "country": "MX",
    "lat": 19.42155,
    "long": -98.95038,
    "zone": "America/Mexico_City"
  },
  {
    "name": "San Pablo de las Salinas",
    "country": "MX",
    "lat": 19.6667,
    "long": -99.09527,
    "zone": "America/Mexico_City"
  },
  {
    "name": "San Juan del Río",
    "country": "MX",
    "lat": 20.3878,
    "long": -99.99605,
    "zone": "America/Mexico_City"
  },
  {
    "name": "San Cristóbal de las Casas",
    "country": "MX",
    "lat": 16.73176,
    "long": -92.64126,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Reynosa",
    "country": "MX",
    "lat": 26.08061,
    "long": -98.28835,
    "zone": "America/Matamoros"
  },
  {
    "name": "Puebla",
    "country": "MX",
    "lat": 19.04334,
    "long": -98.20193,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Poza Rica de Hidalgo",
    "country": "MX",
    "lat": 20.53315,
    "long": -97.45946,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Playa del Carmen",
    "country": "MX",
    "lat": 20.6274,
    "long": -87.07987,
    "zone": "America/Cancun"
  },
  {
    "name": "Pachuca de Soto",
    "country": "MX",
    "lat": 20.11697,
    "long": -98.73329,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Orizaba",
    "country": "MX",
    "lat": 18.85101,
    "long": -97.10084,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Oaxaca de Juárez",
    "country": "MX",
    "lat": 17.06542,
    "long": -96.72365,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Nuevo Laredo",
    "country": "MX",
    "lat": 27.47629,
    "long": -99.51639,
    "zone": "America/Matamoros"
  },
  {
    "name": "Nicolás Romero",
    "country": "MX",
    "lat": 19.63658,
    "long": -99.30682,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Naucalpan de Juárez",
    "country": "MX",
    "lat": 19.47851,
    "long": -99.23963,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Minatitlan",
    "country": "MX",
    "lat": 17.99925,
    "long": -94.55441,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Milpa Alta",
    "country": "MX",
    "lat": 19.19251,
    "long": -99.02317,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Metepec",
    "country": "MX",
    "lat": 19.25934,
    "long": -99.60175,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Mérida",
    "country": "MX",
    "lat": 20.97537,
    "long": -89.61696,
    "zone": "America/Merida"
  },
  {
    "name": "Heroica Matamoros",
    "country": "MX",
    "lat": 25.87972,
    "long": -97.50417,
    "zone": "America/Matamoros"
  },
  {
    "name": "Martínez de la Torre",
    "country": "MX",
    "lat": 20.07082,
    "long": -97.06078,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Magdalena Contreras",
    "country": "MX",
    "lat": 19.33212,
    "long": -99.21118,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Los Reyes La Paz",
    "country": "MX",
    "lat": 19.36357,
    "long": -98.97707,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Las Margaritas",
    "country": "MX",
    "lat": 16.31265,
    "long": -91.98107,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Jiutepec",
    "country": "MX",
    "lat": 18.88139,
    "long": -99.17778,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Xalapa de Enríquez",
    "country": "MX",
    "lat": 19.53124,
    "long": -96.91589,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Ixtapaluca",
    "country": "MX",
    "lat": 19.31556,
    "long": -98.88284,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Iztapalapa",
    "country": "MX",
    "lat": 19.35738,
    "long": -99.0671,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Iztacalco",
    "country": "MX",
    "lat": 19.39528,
    "long": -99.09778,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Iguala de la Independencia",
    "country": "MX",
    "lat": 18.34928,
    "long": -99.53936,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Ecatepec",
    "country": "MX",
    "lat": 19.61725,
    "long": -99.06601,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Cuernavaca",
    "country": "MX",
    "lat": 18.9261,
    "long": -99.23075,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Cuautla Morelos",
    "country": "MX",
    "lat": 18.80459,
    "long": -98.94555,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Cuajimalpa",
    "country": "MX",
    "lat": 19.35993,
    "long": -99.29388,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Coyoacán",
    "country": "MX",
    "lat": 19.3467,
    "long": -99.16174,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Córdoba",
    "country": "MX",
    "lat": 18.88584,
    "long": -96.93125,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Coatzacoalcos",
    "country": "MX",
    "lat": 18.13346,
    "long": -94.44242,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Coacalco",
    "country": "MX",
    "lat": 19.63453,
    "long": -99.1005,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Ciudad Victoria",
    "country": "MX",
    "lat": 23.74174,
    "long": -99.14599,
    "zone": "America/Monterrey"
  },
  {
    "name": "Ciudad Valles",
    "country": "MX",
    "lat": 21.98333,
    "long": -99.01667,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Ciudad Nezahualcoyotl",
    "country": "MX",
    "lat": 19.40061,
    "long": -99.01483,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Ciudad Madero",
    "country": "MX",
    "lat": 22.27228,
    "long": -97.83623,
    "zone": "America/Monterrey"
  },
  {
    "name": "Mexico City",
    "country": "MX",
    "lat": 19.42847,
    "long": -99.12766,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Ciudad del Carmen",
    "country": "MX",
    "lat": 18.64592,
    "long": -91.82991,
    "zone": "America/Merida"
  },
  {
    "name": "Cholula",
    "country": "MX",
    "lat": 19.06406,
    "long": -98.30352,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Chilpancingo de los Bravos",
    "country": "MX",
    "lat": 17.5506,
    "long": -99.50578,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Chetumal",
    "country": "MX",
    "lat": 18.51413,
    "long": -88.30381,
    "zone": "America/Cancun"
  },
  {
    "name": "Chalco de Díaz Covarrubias",
    "country": "MX",
    "lat": 19.26174,
    "long": -98.89775,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Cancún",
    "country": "MX",
    "lat": 21.17429,
    "long": -86.84656,
    "zone": "America/Cancun"
  },
  {
    "name": "Campeche",
    "country": "MX",
    "lat": 19.83803,
    "long": -90.5277,
    "zone": "America/Merida"
  },
  {
    "name": "Azcapotzalco",
    "country": "MX",
    "lat": 19.48698,
    "long": -99.18594,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Ciudad López Mateos",
    "country": "MX",
    "lat": 19.58547,
    "long": -99.26035,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Acapulco de Juárez",
    "country": "MX",
    "lat": 16.86336,
    "long": -99.8901,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Tampico",
    "country": "MX",
    "lat": 22.25528,
    "long": -97.86861,
    "zone": "America/Monterrey"
  },
  {
    "name": "Benito Juarez",
    "country": "MX",
    "lat": 19.3984,
    "long": -99.15766,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Venustiano Carranza",
    "country": "MX",
    "lat": 19.44286,
    "long": -99.09724,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Miguel Hidalgo",
    "country": "MX",
    "lat": 19.43471,
    "long": -99.20091,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Cuauhtémoc",
    "country": "MX",
    "lat": 19.44506,
    "long": -99.14612,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Huixquilucan",
    "country": "MX",
    "lat": 19.35985,
    "long": -99.35016,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Ojo de Agua",
    "country": "MX",
    "lat": 19.68028,
    "long": -99.01,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Buenavista",
    "country": "MX",
    "lat": 19.60833,
    "long": -99.16944,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Zapopan",
    "country": "MX",
    "lat": 20.72356,
    "long": -103.38479,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Zamora",
    "country": "MX",
    "lat": 19.9855,
    "long": -102.28387,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Zacatecas",
    "country": "MX",
    "lat": 22.76843,
    "long": -102.58141,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Ciudad de Villa de Álvarez",
    "country": "MX",
    "lat": 19.26722,
    "long": -103.73778,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Uruapan",
    "country": "MX",
    "lat": 19.41116,
    "long": -102.05644,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Torreon",
    "country": "MX",
    "lat": 25.54389,
    "long": -103.41898,
    "zone": "America/Monterrey"
  },
  {
    "name": "Tonalá",
    "country": "MX",
    "lat": 20.62445,
    "long": -103.23423,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Tlaquepaque",
    "country": "MX",
    "lat": 20.64091,
    "long": -103.29327,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Tijuana",
    "country": "MX",
    "lat": 32.5027,
    "long": -117.00371,
    "zone": "America/Tijuana"
  },
  {
    "name": "Tepic",
    "country": "MX",
    "lat": 21.50951,
    "long": -104.89569,
    "zone": "America/Mazatlan"
  },
  {
    "name": "Soledad Díez Gutiérrez",
    "country": "MX",
    "lat": 22.18778,
    "long": -100.94192,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Santa Catarina",
    "country": "MX",
    "lat": 25.67325,
    "long": -100.45813,
    "zone": "America/Monterrey"
  },
  {
    "name": "San Nicolás de los Garza",
    "country": "MX",
    "lat": 25.74167,
    "long": -100.30222,
    "zone": "America/Monterrey"
  },
  {
    "name": "San Luis Río Colorado",
    "country": "MX",
    "lat": 32.45612,
    "long": -114.77186,
    "zone": "America/Hermosillo"
  },
  {
    "name": "San Luis Potosí",
    "country": "MX",
    "lat": 22.14982,
    "long": -100.97916,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Saltillo",
    "country": "MX",
    "lat": 25.42321,
    "long": -101.0053,
    "zone": "America/Monterrey"
  },
  {
    "name": "Salamanca",
    "country": "MX",
    "lat": 20.57196,
    "long": -101.19154,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Santiago de Querétaro",
    "country": "MX",
    "lat": 20.58806,
    "long": -100.38806,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Puerto Vallarta",
    "country": "MX",
    "lat": 20.617,
    "long": -105.23018,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Piedras Negras",
    "country": "MX",
    "lat": 28.70007,
    "long": -100.52353,
    "zone": "America/Matamoros"
  },
  {
    "name": "Navojoa",
    "country": "MX",
    "lat": 27.07015,
    "long": -109.44391,
    "zone": "America/Hermosillo"
  },
  {
    "name": "Morelia",
    "country": "MX",
    "lat": 19.70078,
    "long": -101.18443,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Monterrey",
    "country": "MX",
    "lat": 25.67507,
    "long": -100.31847,
    "zone": "America/Monterrey"
  },
  {
    "name": "Monclova",
    "country": "MX",
    "lat": 26.90687,
    "long": -101.42056,
    "zone": "America/Monterrey"
  },
  {
    "name": "Mexicali",
    "country": "MX",
    "lat": 32.62781,
    "long": -115.45446,
    "zone": "America/Tijuana"
  },
  {
    "name": "Mazatlán",
    "country": "MX",
    "lat": 23.2329,
    "long": -106.4062,
    "zone": "America/Mazatlan"
  },
  {
    "name": "Matamoros",
    "country": "MX",
    "lat": 25.52699,
    "long": -103.2285,
    "zone": "America/Monterrey"
  },
  {
    "name": "Manzanillo",
    "country": "MX",
    "lat": 19.11695,
    "long": -104.34214,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Los Mochis",
    "country": "MX",
    "lat": 25.79535,
    "long": -108.99244,
    "zone": "America/Mazatlan"
  },
  {
    "name": "León",
    "country": "MX",
    "lat": 21.13052,
    "long": -101.671,
    "zone": "America/Mexico_City"
  },
  {
    "name": "La Paz",
    "country": "MX",
    "lat": 24.13811,
    "long": -110.30973,
    "zone": "America/Mazatlan"
  },
  {
    "name": "Irapuato",
    "country": "MX",
    "lat": 20.67675,
    "long": -101.35628,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Hidalgo del Parral",
    "country": "MX",
    "lat": 26.92961,
    "long": -105.6662,
    "zone": "America/Chihuahua"
  },
  {
    "name": "Nogales",
    "country": "MX",
    "lat": 31.30862,
    "long": -110.94217,
    "zone": "America/Hermosillo"
  },
  {
    "name": "Hermosillo",
    "country": "MX",
    "lat": 29.1026,
    "long": -110.97732,
    "zone": "America/Hermosillo"
  },
  {
    "name": "Heroica Guaymas",
    "country": "MX",
    "lat": 27.91928,
    "long": -110.89755,
    "zone": "America/Hermosillo"
  },
  {
    "name": "Guadalupe",
    "country": "MX",
    "lat": 25.67678,
    "long": -100.25646,
    "zone": "America/Monterrey"
  },
  {
    "name": "Guadalajara",
    "country": "MX",
    "lat": 20.66682,
    "long": -103.39182,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Gomez Palacio",
    "country": "MX",
    "lat": 25.56985,
    "long": -103.49588,
    "zone": "America/Monterrey"
  },
  {
    "name": "General Escobedo",
    "country": "MX",
    "lat": 25.79516,
    "long": -100.31461,
    "zone": "America/Monterrey"
  },
  {
    "name": "Garza García",
    "country": "MX",
    "lat": 25.65384,
    "long": -100.37758,
    "zone": "America/Monterrey"
  },
  {
    "name": "Fresnillo",
    "country": "MX",
    "lat": 23.18126,
    "long": -102.87136,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Ensenada",
    "country": "MX",
    "lat": 31.86613,
    "long": -116.59972,
    "zone": "America/Tijuana"
  },
  {
    "name": "Victoria de Durango",
    "country": "MX",
    "lat": 24.02032,
    "long": -104.65756,
    "zone": "America/Monterrey"
  },
  {
    "name": "Culiacán",
    "country": "MX",
    "lat": 24.79032,
    "long": -107.38782,
    "zone": "America/Mazatlan"
  },
  {
    "name": "Colima",
    "country": "MX",
    "lat": 19.24997,
    "long": -103.72714,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Ciudad Obregón",
    "country": "MX",
    "lat": 27.48642,
    "long": -109.94083,
    "zone": "America/Hermosillo"
  },
  {
    "name": "Ciudad Juárez",
    "country": "MX",
    "lat": 31.73333,
    "long": -106.48333,
    "zone": "America/Ojinaga"
  },
  {
    "name": "Ciudad Guzmán",
    "country": "MX",
    "lat": 19.70466,
    "long": -103.4617,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Ciudad Delicias",
    "country": "MX",
    "lat": 28.19013,
    "long": -105.47012,
    "zone": "America/Chihuahua"
  },
  {
    "name": "Ciudad Acuña",
    "country": "MX",
    "lat": 29.32322,
    "long": -100.95217,
    "zone": "America/Matamoros"
  },
  {
    "name": "Chihuahua",
    "country": "MX",
    "lat": 28.63528,
    "long": -106.08889,
    "zone": "America/Chihuahua"
  },
  {
    "name": "Celaya",
    "country": "MX",
    "lat": 20.52353,
    "long": -100.8157,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Apodaca",
    "country": "MX",
    "lat": 25.75976,
    "long": -100.16287,
    "zone": "America/Monterrey"
  },
  {
    "name": "Aguascalientes",
    "country": "MX",
    "lat": 21.88234,
    "long": -102.28259,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Colonia del Valle",
    "country": "MX",
    "lat": 19.38611,
    "long": -99.16204,
    "zone": "America/Mexico_City"
  },
  {
    "name": "San Pedro Garza Garcia",
    "country": "MX",
    "lat": 25.65716,
    "long": -100.40268,
    "zone": "America/Monterrey"
  },
  {
    "name": "Soledad de Graciano Sánchez",
    "country": "MX",
    "lat": 22.18306,
    "long": -100.94083,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Manzanillo",
    "country": "MX",
    "lat": 19.05222,
    "long": -104.31583,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Naucalpan de Juárez",
    "country": "MX",
    "lat": 19.39694,
    "long": -99.27667,
    "zone": "America/Mexico_City"
  },
  {
    "name": "Batu Pahat",
    "country": "MY",
    "lat": 1.8548,
    "long": 102.9325,
    "zone": "Asia/Kuala_Lumpur"
  },
  {
    "name": "Kampung Pasir Gudang Baru",
    "country": "MY",
    "lat": 1.4726,
    "long": 103.878,
    "zone": "Asia/Kuala_Lumpur"
  },
  {
    "name": "Skudai",
    "country": "MY",
    "lat": 1.53741,
    "long": 103.65779,
    "zone": "Asia/Kuala_Lumpur"
  },
  {
    "name": "Johor Bahru",
    "country": "MY",
    "lat": 1.4655,
    "long": 103.7578,
    "zone": "Asia/Kuala_Lumpur"
  },
  {
    "name": "Kluang",
    "country": "MY",
    "lat": 2.03046,
    "long": 103.31689,
    "zone": "Asia/Kuala_Lumpur"
  },
  {
    "name": "Muar",
    "country": "MY",
    "lat": 2.0442,
    "long": 102.5689,
    "zone": "Asia/Kuala_Lumpur"
  },
  {
    "name": "Shah Alam",
    "country": "MY",
    "lat": 3.08507,
    "long": 101.53281,
    "zone": "Asia/Kuala_Lumpur"
  },
  {
    "name": "Klang",
    "country": "MY",
    "lat": 3.03333,
    "long": 101.45,
    "zone": "Asia/Kuala_Lumpur"
  },
  {
    "name": "Kota Kinabalu",
    "country": "MY",
    "lat": 5.9749,
    "long": 116.0724,
    "zone": "Asia/Kuching"
  },
  {
    "name": "Lahad Datu",
    "country": "MY",
    "lat": 5.0268,
    "long": 118.327,
    "zone": "Asia/Kuching"
  },
  {
    "name": "Sandakan",
    "country": "MY",
    "lat": 5.8402,
    "long": 118.1179,
    "zone": "Asia/Kuching"
  },
  {
    "name": "Tawau",
    "country": "MY",
    "lat": 4.24482,
    "long": 117.89115,
    "zone": "Asia/Kuching"
  },
  {
    "name": "Kulim",
    "country": "MY",
    "lat": 5.36499,
    "long": 100.56177,
    "zone": "Asia/Kuala_Lumpur"
  },
  {
    "name": "Taiping",
    "country": "MY",
    "lat": 4.85,
    "long": 100.73333,
    "zone": "Asia/Kuala_Lumpur"
  },
  {
    "name": "Ipoh",
    "country": "MY",
    "lat": 4.5841,
    "long": 101.0829,
    "zone": "Asia/Kuala_Lumpur"
  },
  {
    "name": "Kuala Terengganu",
    "country": "MY",
    "lat": 5.3302,
    "long": 103.1408,
    "zone": "Asia/Kuala_Lumpur"
  },
  {
    "name": "Malacca",
    "country": "MY",
    "lat": 2.196,
    "long": 102.2405,
    "zone": "Asia/Kuala_Lumpur"
  },
  {
    "name": "Seremban",
    "country": "MY",
    "lat": 2.7297,
    "long": 101.9381,
    "zone": "Asia/Kuala_Lumpur"
  },
  {
    "name": "Butterworth",
    "country": "MY",
    "lat": 5.3991,
    "long": 100.36382,
    "zone": "Asia/Kuala_Lumpur"
  },
  {
    "name": "Bukit Mertajam",
    "country": "MY",
    "lat": 5.36301,
    "long": 100.4667,
    "zone": "Asia/Kuala_Lumpur"
  },
  {
    "name": "Tasek Glugor",
    "country": "MY",
    "lat": 5.48032,
    "long": 100.49849,
    "zone": "Asia/Kuala_Lumpur"
  },
  {
    "name": "George Town",
    "country": "MY",
    "lat": 5.41123,
    "long": 100.33543,
    "zone": "Asia/Kuala_Lumpur"
  },
  {
    "name": "Rawang",
    "country": "MY",
    "lat": 3.3213,
    "long": 101.5767,
    "zone": "Asia/Kuala_Lumpur"
  },
  {
    "name": "Petaling Jaya",
    "country": "MY",
    "lat": 3.10726,
    "long": 101.60671,
    "zone": "Asia/Kuala_Lumpur"
  },
  {
    "name": "Kuala Lumpur",
    "country": "MY",
    "lat": 3.1412,
    "long": 101.68653,
    "zone": "Asia/Kuala_Lumpur"
  },
  {
    "name": "Kuantan",
    "country": "MY",
    "lat": 3.8077,
    "long": 103.326,
    "zone": "Asia/Kuala_Lumpur"
  },
  {
    "name": "Sungai Petani",
    "country": "MY",
    "lat": 5.647,
    "long": 100.48772,
    "zone": "Asia/Kuala_Lumpur"
  },
  {
    "name": "Kuching",
    "country": "MY",
    "lat": 1.55,
    "long": 110.33333,
    "zone": "Asia/Kuching"
  },
  {
    "name": "Sibu",
    "country": "MY",
    "lat": 2.3,
    "long": 111.81667,
    "zone": "Asia/Kuching"
  },
  {
    "name": "Alor Setar",
    "country": "MY",
    "lat": 6.12104,
    "long": 100.36014,
    "zone": "Asia/Kuala_Lumpur"
  },
  {
    "name": "Kota Bharu",
    "country": "MY",
    "lat": 6.13328,
    "long": 102.2386,
    "zone": "Asia/Kuala_Lumpur"
  },
  {
    "name": "Bintulu",
    "country": "MY",
    "lat": 3.16667,
    "long": 113.03333,
    "zone": "Asia/Kuching"
  },
  {
    "name": "Miri",
    "country": "MY",
    "lat": 4.4148,
    "long": 114.0089,
    "zone": "Asia/Kuching"
  },
  {
    "name": "Kampung Sungai Ara",
    "country": "MY",
    "lat": 5.32699,
    "long": 100.27348,
    "zone": "Asia/Kuala_Lumpur"
  },
  {
    "name": "Kampung Baru Subang",
    "country": "MY",
    "lat": 3.15,
    "long": 101.53333,
    "zone": "Asia/Kuala_Lumpur"
  },
  {
    "name": "Subang Jaya",
    "country": "MY",
    "lat": 3.04384,
    "long": 101.58062,
    "zone": "Asia/Kuala_Lumpur"
  },
  {
    "name": "Xai-Xai",
    "country": "MZ",
    "lat": -25.05194,
    "long": 33.64417,
    "zone": "Africa/Maputo"
  },
  {
    "name": "Tete",
    "country": "MZ",
    "lat": -16.15639,
    "long": 33.58667,
    "zone": "Africa/Maputo"
  },
  {
    "name": "Ressano Garcia",
    "country": "MZ",
    "lat": -25.44278,
    "long": 31.99528,
    "zone": "Africa/Maputo"
  },
  {
    "name": "Quelimane",
    "country": "MZ",
    "lat": -17.87861,
    "long": 36.88833,
    "zone": "Africa/Maputo"
  },
  {
    "name": "Pemba",
    "country": "MZ",
    "lat": -12.97395,
    "long": 40.51775,
    "zone": "Africa/Maputo"
  },
  {
    "name": "Nampula",
    "country": "MZ",
    "lat": -15.11646,
    "long": 39.2666,
    "zone": "Africa/Maputo"
  },
  {
    "name": "Nacala",
    "country": "MZ",
    "lat": -14.56257,
    "long": 40.68538,
    "zone": "Africa/Maputo"
  },
  {
    "name": "Maxixe",
    "country": "MZ",
    "lat": -23.85972,
    "long": 35.34722,
    "zone": "Africa/Maputo"
  },
  {
    "name": "Matola",
    "country": "MZ",
    "lat": -25.96222,
    "long": 32.45889,
    "zone": "Africa/Maputo"
  },
  {
    "name": "Maputo",
    "country": "MZ",
    "lat": -25.96553,
    "long": 32.58322,
    "zone": "Africa/Maputo"
  },
  {
    "name": "Lichinga",
    "country": "MZ",
    "lat": -13.31278,
    "long": 35.24056,
    "zone": "Africa/Maputo"
  },
  {
    "name": "Chimoio",
    "country": "MZ",
    "lat": -19.11639,
    "long": 33.48333,
    "zone": "Africa/Maputo"
  },
  {
    "name": "Beira",
    "country": "MZ",
    "lat": -19.84361,
    "long": 34.83889,
    "zone": "Africa/Maputo"
  },
  {
    "name": "Windhoek",
    "country": "NA",
    "lat": -22.55941,
    "long": 17.08323,
    "zone": "Africa/Windhoek"
  },
  {
    "name": "Zinder",
    "country": "NE",
    "lat": 13.80716,
    "long": 8.9881,
    "zone": "Africa/Niamey"
  },
  {
    "name": "Niamey",
    "country": "NE",
    "lat": 13.51366,
    "long": 2.1098,
    "zone": "Africa/Niamey"
  },
  {
    "name": "Maradi",
    "country": "NE",
    "lat": 13.5,
    "long": 7.10174,
    "zone": "Africa/Niamey"
  },
  {
    "name": "Agadez",
    "country": "NE",
    "lat": 16.97333,
    "long": 7.99111,
    "zone": "Africa/Niamey"
  },
  {
    "name": "Zaria",
    "country": "NG",
    "lat": 11.11128,
    "long": 7.7227,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Warri",
    "country": "NG",
    "lat": 5.51737,
    "long": 5.75006,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Uyo",
    "country": "NG",
    "lat": 5.05127,
    "long": 7.9335,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Uromi",
    "country": "NG",
    "lat": 6.7,
    "long": 6.33333,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Umuahia",
    "country": "NG",
    "lat": 5.52491,
    "long": 7.49461,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Ugep",
    "country": "NG",
    "lat": 5.80854,
    "long": 8.08159,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Suleja",
    "country": "NG",
    "lat": 9.18059,
    "long": 7.17939,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Sokoto",
    "country": "NG",
    "lat": 13.06269,
    "long": 5.24322,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Saki",
    "country": "NG",
    "lat": 8.66762,
    "long": 3.39393,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Shagamu",
    "country": "NG",
    "lat": 6.8485,
    "long": 3.64633,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Sapele",
    "country": "NG",
    "lat": 5.89405,
    "long": 5.67666,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Port Harcourt",
    "country": "NG",
    "lat": 4.77742,
    "long": 7.0134,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Pindiga",
    "country": "NG",
    "lat": 9.98333,
    "long": 10.93333,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Oyo",
    "country": "NG",
    "lat": 7.85257,
    "long": 3.93125,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Owo",
    "country": "NG",
    "lat": 7.1962,
    "long": 5.58681,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Owerri",
    "country": "NG",
    "lat": 5.48363,
    "long": 7.03325,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Osogbo",
    "country": "NG",
    "lat": 7.77104,
    "long": 4.55698,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Onitsha",
    "country": "NG",
    "lat": 6.14978,
    "long": 6.78569,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Ondo",
    "country": "NG",
    "lat": 7.09316,
    "long": 4.83528,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Okrika",
    "country": "NG",
    "lat": 4.74159,
    "long": 7.08488,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Okigwe",
    "country": "NG",
    "lat": 5.82917,
    "long": 7.35056,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Okene",
    "country": "NG",
    "lat": 7.55122,
    "long": 6.23589,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Offa",
    "country": "NG",
    "lat": 8.14911,
    "long": 4.72074,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Nsukka",
    "country": "NG",
    "lat": 6.85783,
    "long": 7.39577,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Nnewi",
    "country": "NG",
    "lat": 6.01962,
    "long": 6.91729,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Nkpor",
    "country": "NG",
    "lat": 6.15164,
    "long": 6.84459,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Nguru",
    "country": "NG",
    "lat": 12.87695,
    "long": 10.45536,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Mubi",
    "country": "NG",
    "lat": 10.26761,
    "long": 13.26436,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Modakeke",
    "country": "NG",
    "lat": 7.38333,
    "long": 4.26667,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Minna",
    "country": "NG",
    "lat": 9.61524,
    "long": 6.54776,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Makurdi",
    "country": "NG",
    "lat": 7.7411,
    "long": 8.5121,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Maiduguri",
    "country": "NG",
    "lat": 11.84692,
    "long": 13.15712,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Lagos",
    "country": "NG",
    "lat": 6.45407,
    "long": 3.39467,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Lafiagi",
    "country": "NG",
    "lat": 8.85299,
    "long": 5.41641,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Lafia",
    "country": "NG",
    "lat": 8.4939,
    "long": 8.51532,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Kisi",
    "country": "NG",
    "lat": 9.08297,
    "long": 3.85196,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Katsina",
    "country": "NG",
    "lat": 12.99082,
    "long": 7.60177,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Kano",
    "country": "NG",
    "lat": 12.00012,
    "long": 8.51672,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Kaduna",
    "country": "NG",
    "lat": 10.52641,
    "long": 7.43879,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Jos",
    "country": "NG",
    "lat": 9.92849,
    "long": 8.89212,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Jimeta",
    "country": "NG",
    "lat": 9.28333,
    "long": 12.46667,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Jalingo",
    "country": "NG",
    "lat": 8.88333,
    "long": 11.36667,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Iwo",
    "country": "NG",
    "lat": 7.63527,
    "long": 4.18156,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Ise-Ekiti",
    "country": "NG",
    "lat": 7.46478,
    "long": 5.42333,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Inisa",
    "country": "NG",
    "lat": 7.85,
    "long": 4.33333,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Ilorin",
    "country": "NG",
    "lat": 8.49664,
    "long": 4.54214,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Ilobu",
    "country": "NG",
    "lat": 7.84036,
    "long": 4.48557,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Ilesa",
    "country": "NG",
    "lat": 7.62789,
    "long": 4.74161,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Ila Orangun",
    "country": "NG",
    "lat": 8.01714,
    "long": 4.90421,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Ikot-Ekpene",
    "country": "NG",
    "lat": 5.17938,
    "long": 7.71082,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Ikirun",
    "country": "NG",
    "lat": 7.91283,
    "long": 4.66741,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Ikire",
    "country": "NG",
    "lat": 7.37241,
    "long": 4.18739,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Ikere-Ekiti",
    "country": "NG",
    "lat": 7.49748,
    "long": 5.23041,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Ikeja",
    "country": "NG",
    "lat": 6.59651,
    "long": 3.34205,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Ijero-Ekiti",
    "country": "NG",
    "lat": 7.81514,
    "long": 5.06716,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Ijebu-Ode",
    "country": "NG",
    "lat": 6.81944,
    "long": 3.91731,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Ijebu-Igbo",
    "country": "NG",
    "lat": 6.97198,
    "long": 3.99938,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Igboho",
    "country": "NG",
    "lat": 8.83784,
    "long": 3.75628,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Ibadan",
    "country": "NG",
    "lat": 7.37756,
    "long": 3.90591,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Hadejia",
    "country": "NG",
    "lat": 12.45347,
    "long": 10.04115,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Gusau",
    "country": "NG",
    "lat": 12.17024,
    "long": 6.66412,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Gombe",
    "country": "NG",
    "lat": 10.28969,
    "long": 11.16729,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Gbongan",
    "country": "NG",
    "lat": 7.47734,
    "long": 4.35351,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Gashua",
    "country": "NG",
    "lat": 12.87412,
    "long": 11.0399,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Funtua",
    "country": "NG",
    "lat": 11.52351,
    "long": 7.31174,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Esuk Oron",
    "country": "NG",
    "lat": 4.80293,
    "long": 8.25341,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Enugu",
    "country": "NG",
    "lat": 6.44132,
    "long": 7.49883,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Ejigbo",
    "country": "NG",
    "lat": 7.90292,
    "long": 4.31419,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Effon Alaiye",
    "country": "NG",
    "lat": 7.65,
    "long": 4.91667,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Ebute Ikorodu",
    "country": "NG",
    "lat": 6.60086,
    "long": 3.48818,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Calabar",
    "country": "NG",
    "lat": 4.9517,
    "long": 8.322,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Buguma",
    "country": "NG",
    "lat": 4.73614,
    "long": 6.86236,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Birnin Kebbi",
    "country": "NG",
    "lat": 12.45389,
    "long": 4.1975,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Bida",
    "country": "NG",
    "lat": 9.08044,
    "long": 6.0099,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Benin City",
    "country": "NG",
    "lat": 6.33815,
    "long": 5.62575,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Bauchi",
    "country": "NG",
    "lat": 10.31344,
    "long": 9.84327,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Bama",
    "country": "NG",
    "lat": 11.52147,
    "long": 13.68826,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Azare",
    "country": "NG",
    "lat": 11.6765,
    "long": 10.1948,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Awka",
    "country": "NG",
    "lat": 6.21269,
    "long": 7.07199,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Amaigbo",
    "country": "NG",
    "lat": 5.78917,
    "long": 7.83829,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Akure",
    "country": "NG",
    "lat": 7.25256,
    "long": 5.19312,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Ado-Ekiti",
    "country": "NG",
    "lat": 7.62329,
    "long": 5.22087,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Abuja",
    "country": "NG",
    "lat": 9.05785,
    "long": 7.49508,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Abeokuta",
    "country": "NG",
    "lat": 7.15571,
    "long": 3.34509,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Abakaliki",
    "country": "NG",
    "lat": 6.32485,
    "long": 8.11368,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Aba",
    "country": "NG",
    "lat": 5.10658,
    "long": 7.36667,
    "zone": "Africa/Lagos"
  },
  {
    "name": "Tipitapa",
    "country": "NI",
    "lat": 12.19732,
    "long": -86.09706,
    "zone": "America/Managua"
  },
  {
    "name": "Matagalpa",
    "country": "NI",
    "lat": 12.92559,
    "long": -85.91747,
    "zone": "America/Managua"
  },
  {
    "name": "Masaya",
    "country": "NI",
    "lat": 11.97444,
    "long": -86.09417,
    "zone": "America/Managua"
  },
  {
    "name": "Managua",
    "country": "NI",
    "lat": 12.13282,
    "long": -86.2504,
    "zone": "America/Managua"
  },
  {
    "name": "León",
    "country": "NI",
    "lat": 12.43787,
    "long": -86.87804,
    "zone": "America/Managua"
  },
  {
    "name": "Chinandega",
    "country": "NI",
    "lat": 12.62937,
    "long": -87.13105,
    "zone": "America/Managua"
  },
  {
    "name": "Zwolle",
    "country": "NL",
    "lat": 52.5125,
    "long": 6.09444,
    "zone": "Europe/Amsterdam"
  },
  {
    "name": "Zoetermeer",
    "country": "NL",
    "lat": 52.0575,
    "long": 4.49306,
    "zone": "Europe/Amsterdam"
  },
  {
    "name": "Zaanstad",
    "country": "NL",
    "lat": 52.45313,
    "long": 4.81356,
    "zone": "Europe/Amsterdam"
  },
  {
    "name": "Utrecht",
    "country": "NL",
    "lat": 52.09083,
    "long": 5.12222,
    "zone": "Europe/Amsterdam"
  },
  {
    "name": "Tilburg",
    "country": "NL",
    "lat": 51.55551,
    "long": 5.0913,
    "zone": "Europe/Amsterdam"
  },
  {
    "name": "'s-Hertogenbosch",
    "country": "NL",
    "lat": 51.69917,
    "long": 5.30417,
    "zone": "Europe/Amsterdam"
  },
  {
    "name": "The Hague",
    "country": "NL",
    "lat": 52.07667,
    "long": 4.29861,
    "zone": "Europe/Amsterdam"
  },
  {
    "name": "Rotterdam",
    "country": "NL",
    "lat": 51.9225,
    "long": 4.47917,
    "zone": "Europe/Amsterdam"
  },
  {
    "name": "Nijmegen",
    "country": "NL",
    "lat": 51.8425,
    "long": 5.85278,
    "zone": "Europe/Amsterdam"
  },
  {
    "name": "Maastricht",
    "country": "NL",
    "lat": 50.84833,
    "long": 5.68889,
    "zone": "Europe/Amsterdam"
  },
  {
    "name": "Leiden",
    "country": "NL",
    "lat": 52.15833,
    "long": 4.49306,
    "zone": "Europe/Amsterdam"
  },
  {
    "name": "Hoofddorp",
    "country": "NL",
    "lat": 52.3025,
    "long": 4.68889,
    "zone": "Europe/Amsterdam"
  },
  {
    "name": "Haarlem",
    "country": "NL",
    "lat": 52.38084,
    "long": 4.63683,
    "zone": "Europe/Amsterdam"
  },
  {
    "name": "Groningen",
    "country": "NL",
    "lat": 53.21917,
    "long": 6.56667,
    "zone": "Europe/Amsterdam"
  },
  {
    "name": "Enschede",
    "country": "NL",
    "lat": 52.21833,
    "long": 6.89583,
    "zone": "Europe/Amsterdam"
  },
  {
    "name": "Eindhoven",
    "country": "NL",
    "lat": 51.44083,
    "long": 5.47778,
    "zone": "Europe/Amsterdam"
  },
  {
    "name": "Dordrecht",
    "country": "NL",
    "lat": 51.81,
    "long": 4.67361,
    "zone": "Europe/Amsterdam"
  },
  {
    "name": "Breda",
    "country": "NL",
    "lat": 51.58656,
    "long": 4.77596,
    "zone": "Europe/Amsterdam"
  },
  {
    "name": "Arnhem",
    "country": "NL",
    "lat": 51.98,
    "long": 5.91111,
    "zone": "Europe/Amsterdam"
  },
  {
    "name": "Apeldoorn",
    "country": "NL",
    "lat": 52.21,
    "long": 5.96944,
    "zone": "Europe/Amsterdam"
  },
  {
    "name": "Amsterdam",
    "country": "NL",
    "lat": 52.37403,
    "long": 4.88969,
    "zone": "Europe/Amsterdam"
  },
  {
    "name": "Amersfoort",
    "country": "NL",
    "lat": 52.155,
    "long": 5.3875,
    "zone": "Europe/Amsterdam"
  },
  {
    "name": "Almere Stad",
    "country": "NL",
    "lat": 52.37025,
    "long": 5.21413,
    "zone": "Europe/Amsterdam"
  },
  {
    "name": "Trondheim",
    "country": "NO",
    "lat": 63.43049,
    "long": 10.39506,
    "zone": "Europe/Oslo"
  },
  {
    "name": "Stavanger",
    "country": "NO",
    "lat": 58.97005,
    "long": 5.73332,
    "zone": "Europe/Oslo"
  },
  {
    "name": "Oslo",
    "country": "NO",
    "lat": 59.91273,
    "long": 10.74609,
    "zone": "Europe/Oslo"
  },
  {
    "name": "Bergen",
    "country": "NO",
    "lat": 60.39299,
    "long": 5.32415,
    "zone": "Europe/Oslo"
  },
  {
    "name": "Pokhara",
    "country": "NP",
    "lat": 28.26689,
    "long": 83.96851,
    "zone": "Asia/Kathmandu"
  },
  {
    "name": "Pātan",
    "country": "NP",
    "lat": 27.67658,
    "long": 85.31417,
    "zone": "Asia/Kathmandu"
  },
  {
    "name": "Kathmandu",
    "country": "NP",
    "lat": 27.70169,
    "long": 85.3206,
    "zone": "Asia/Kathmandu"
  },
  {
    "name": "Dharān Bāzār",
    "country": "NP",
    "lat": 26.81248,
    "long": 87.28355,
    "zone": "Asia/Kathmandu"
  },
  {
    "name": "Bīrganj",
    "country": "NP",
    "lat": 27.01043,
    "long": 84.87735,
    "zone": "Asia/Kathmandu"
  },
  {
    "name": "Birātnagar",
    "country": "NP",
    "lat": 26.4831,
    "long": 87.28337,
    "zone": "Asia/Kathmandu"
  },
  {
    "name": "Bharatpur",
    "country": "NP",
    "lat": 27.68333,
    "long": 84.43333,
    "zone": "Asia/Kathmandu"
  },
  {
    "name": "Wellington",
    "country": "NZ",
    "lat": -41.28664,
    "long": 174.77557,
    "zone": "Pacific/Auckland"
  },
  {
    "name": "North Shore",
    "country": "NZ",
    "lat": -36.8,
    "long": 174.75,
    "zone": "Pacific/Auckland"
  },
  {
    "name": "Manukau City",
    "country": "NZ",
    "lat": -36.99282,
    "long": 174.87986,
    "zone": "Pacific/Auckland"
  },
  {
    "name": "Lower Hutt",
    "country": "NZ",
    "lat": -41.21667,
    "long": 174.91667,
    "zone": "Pacific/Auckland"
  },
  {
    "name": "Hamilton",
    "country": "NZ",
    "lat": -37.78333,
    "long": 175.28333,
    "zone": "Pacific/Auckland"
  },
  {
    "name": "Dunedin",
    "country": "NZ",
    "lat": -45.87416,
    "long": 170.50361,
    "zone": "Pacific/Auckland"
  },
  {
    "name": "Christchurch",
    "country": "NZ",
    "lat": -43.53333,
    "long": 172.63333,
    "zone": "Pacific/Auckland"
  },
  {
    "name": "Auckland",
    "country": "NZ",
    "lat": -36.86667,
    "long": 174.76667,
    "zone": "Pacific/Auckland"
  },
  {
    "name": "Tauranga",
    "country": "NZ",
    "lat": -37.68611,
    "long": 176.16667,
    "zone": "Pacific/Auckland"
  },
  {
    "name": "Waitakere",
    "country": "NZ",
    "lat": -36.91754,
    "long": 174.65773,
    "zone": "Pacific/Auckland"
  },
  {
    "name": "Al Sohar",
    "country": "OM",
    "lat": 24.3643,
    "long": 56.74681,
    "zone": "Asia/Muscat"
  },
  {
    "name": "Şalālah",
    "country": "OM",
    "lat": 17.01505,
    "long": 54.09237,
    "zone": "Asia/Muscat"
  },
  {
    "name": "Muscat",
    "country": "OM",
    "lat": 23.61387,
    "long": 58.5922,
    "zone": "Asia/Muscat"
  },
  {
    "name": "‘Ibrī",
    "country": "OM",
    "lat": 23.22573,
    "long": 56.51572,
    "zone": "Asia/Muscat"
  },
  {
    "name": "Bawshar",
    "country": "OM",
    "lat": 23.55563,
    "long": 58.3989,
    "zone": "Asia/Muscat"
  },
  {
    "name": "As Suwayq",
    "country": "OM",
    "lat": 23.84944,
    "long": 57.43861,
    "zone": "Asia/Muscat"
  },
  {
    "name": "As Sīb al Jadīdah",
    "country": "OM",
    "lat": 23.67027,
    "long": 58.18911,
    "zone": "Asia/Muscat"
  },
  {
    "name": "San Miguelito",
    "country": "PA",
    "lat": 9.05032,
    "long": -79.47068,
    "zone": "America/Panama"
  },
  {
    "name": "Panamá",
    "country": "PA",
    "lat": 8.9936,
    "long": -79.51973,
    "zone": "America/Panama"
  },
  {
    "name": "Tumbes",
    "country": "PE",
    "lat": -3.56694,
    "long": -80.45153,
    "zone": "America/Lima"
  },
  {
    "name": "Trujillo",
    "country": "PE",
    "lat": -8.11599,
    "long": -79.02998,
    "zone": "America/Lima"
  },
  {
    "name": "Sullana",
    "country": "PE",
    "lat": -4.90389,
    "long": -80.68528,
    "zone": "America/Lima"
  },
  {
    "name": "Pucallpa",
    "country": "PE",
    "lat": -8.37915,
    "long": -74.55387,
    "zone": "America/Lima"
  },
  {
    "name": "Piura",
    "country": "PE",
    "lat": -5.19449,
    "long": -80.63282,
    "zone": "America/Lima"
  },
  {
    "name": "Iquitos",
    "country": "PE",
    "lat": -3.74912,
    "long": -73.25383,
    "zone": "America/Lima"
  },
  {
    "name": "Huánuco",
    "country": "PE",
    "lat": -9.93062,
    "long": -76.24223,
    "zone": "America/Lima"
  },
  {
    "name": "Chimbote",
    "country": "PE",
    "lat": -9.08528,
    "long": -78.57833,
    "zone": "America/Lima"
  },
  {
    "name": "Chiclayo",
    "country": "PE",
    "lat": -6.77137,
    "long": -79.84088,
    "zone": "America/Lima"
  },
  {
    "name": "Cajamarca",
    "country": "PE",
    "lat": -7.16378,
    "long": -78.50027,
    "zone": "America/Lima"
  },
  {
    "name": "Tacna",
    "country": "PE",
    "lat": -18.01465,
    "long": -70.25362,
    "zone": "America/Lima"
  },
  {
    "name": "Surco",
    "country": "PE",
    "lat": -12.13951,
    "long": -77.00615,
    "zone": "America/Lima"
  },
  {
    "name": "Puno",
    "country": "PE",
    "lat": -15.8422,
    "long": -70.0199,
    "zone": "America/Lima"
  },
  {
    "name": "Lima",
    "country": "PE",
    "lat": -12.04318,
    "long": -77.02824,
    "zone": "America/Lima"
  },
  {
    "name": "Juliaca",
    "country": "PE",
    "lat": -15.5,
    "long": -70.13333,
    "zone": "America/Lima"
  },
  {
    "name": "Ica",
    "country": "PE",
    "lat": -14.06777,
    "long": -75.72861,
    "zone": "America/Lima"
  },
  {
    "name": "Huancayo",
    "country": "PE",
    "lat": -12.06513,
    "long": -75.20486,
    "zone": "America/Lima"
  },
  {
    "name": "Cusco",
    "country": "PE",
    "lat": -13.52264,
    "long": -71.96734,
    "zone": "America/Lima"
  },
  {
    "name": "Chincha Alta",
    "country": "PE",
    "lat": -13.40985,
    "long": -76.13235,
    "zone": "America/Lima"
  },
  {
    "name": "Callao",
    "country": "PE",
    "lat": -12.05659,
    "long": -77.11814,
    "zone": "America/Lima"
  },
  {
    "name": "Ayacucho",
    "country": "PE",
    "lat": -13.15878,
    "long": -74.22321,
    "zone": "America/Lima"
  },
  {
    "name": "Arequipa",
    "country": "PE",
    "lat": -16.39889,
    "long": -71.535,
    "zone": "America/Lima"
  },
  {
    "name": "Port Moresby",
    "country": "PG",
    "lat": -9.44314,
    "long": 147.17972,
    "zone": "Pacific/Port_Moresby"
  },
  {
    "name": "Zamboanga",
    "country": "PH",
    "lat": 6.91028,
    "long": 122.07389,
    "zone": "Asia/Manila"
  },
  {
    "name": "Urdaneta",
    "country": "PH",
    "lat": 15.97611,
    "long": 120.57111,
    "zone": "Asia/Manila"
  },
  {
    "name": "Tuguegarao City",
    "country": "PH",
    "lat": 17.61306,
    "long": 121.72694,
    "zone": "Asia/Manila"
  },
  {
    "name": "Toledo",
    "country": "PH",
    "lat": 10.3773,
    "long": 123.6386,
    "zone": "Asia/Manila"
  },
  {
    "name": "Taytay",
    "country": "PH",
    "lat": 14.55883,
    "long": 121.13285,
    "zone": "Asia/Manila"
  },
  {
    "name": "Tarlac City",
    "country": "PH",
    "lat": 15.48017,
    "long": 120.59794,
    "zone": "Asia/Manila"
  },
  {
    "name": "Tanza",
    "country": "PH",
    "lat": 14.6753,
    "long": 120.9389,
    "zone": "Asia/Manila"
  },
  {
    "name": "Talisay",
    "country": "PH",
    "lat": 10.24472,
    "long": 123.84944,
    "zone": "Asia/Manila"
  },
  {
    "name": "Tagum",
    "country": "PH",
    "lat": 7.44778,
    "long": 125.80778,
    "zone": "Asia/Manila"
  },
  {
    "name": "Taguig",
    "country": "PH",
    "lat": 14.5243,
    "long": 121.0792,
    "zone": "Asia/Manila"
  },
  {
    "name": "Silang",
    "country": "PH",
    "lat": 14.21567,
    "long": 120.97137,
    "zone": "Asia/Manila"
  },
  {
    "name": "Santol",
    "country": "PH",
    "lat": 15.16222,
    "long": 120.5675,
    "zone": "Asia/Manila"
  },
  {
    "name": "Santiago",
    "country": "PH",
    "lat": 16.68808,
    "long": 121.5487,
    "zone": "Asia/Manila"
  },
  {
    "name": "Santa Rosa",
    "country": "PH",
    "lat": 14.31222,
    "long": 121.11139,
    "zone": "Asia/Manila"
  },
  {
    "name": "Santa Cruz",
    "country": "PH",
    "lat": 14.2814,
    "long": 121.4161,
    "zone": "Asia/Manila"
  },
  {
    "name": "San Pedro",
    "country": "PH",
    "lat": 14.3595,
    "long": 121.0473,
    "zone": "Asia/Manila"
  },
  {
    "name": "San Pablo",
    "country": "PH",
    "lat": 14.0683,
    "long": 121.3256,
    "zone": "Asia/Manila"
  },
  {
    "name": "San Mateo",
    "country": "PH",
    "lat": 14.6982,
    "long": 121.1236,
    "zone": "Asia/Manila"
  },
  {
    "name": "San Juan",
    "country": "PH",
    "lat": 14.6,
    "long": 121.0333,
    "zone": "Asia/Manila"
  },
  {
    "name": "San Jose del Monte",
    "country": "PH",
    "lat": 14.81389,
    "long": 121.04528,
    "zone": "Asia/Manila"
  },
  {
    "name": "San Jose",
    "country": "PH",
    "lat": 12.35275,
    "long": 121.06761,
    "zone": "Asia/Manila"
  },
  {
    "name": "San Fernando",
    "country": "PH",
    "lat": 15.0286,
    "long": 120.6898,
    "zone": "Asia/Manila"
  },
  {
    "name": "Roxas City",
    "country": "PH",
    "lat": 11.58528,
    "long": 122.75111,
    "zone": "Asia/Manila"
  },
  {
    "name": "Quezon City",
    "country": "PH",
    "lat": 14.6488,
    "long": 121.0509,
    "zone": "Asia/Manila"
  },
  {
    "name": "Pulong Santa Cruz",
    "country": "PH",
    "lat": 14.27324,
    "long": 121.07643,
    "zone": "Asia/Manila"
  },
  {
    "name": "Puerto Princesa",
    "country": "PH",
    "lat": 9.73917,
    "long": 118.73528,
    "zone": "Asia/Manila"
  },
  {
    "name": "Panalanoy",
    "country": "PH",
    "lat": 11.25111,
    "long": 125.00639,
    "zone": "Asia/Manila"
  },
  {
    "name": "Pagadian",
    "country": "PH",
    "lat": 7.8257,
    "long": 123.437,
    "zone": "Asia/Manila"
  },
  {
    "name": "Ormoc",
    "country": "PH",
    "lat": 11.00639,
    "long": 124.6075,
    "zone": "Asia/Manila"
  },
  {
    "name": "Olongapo",
    "country": "PH",
    "lat": 14.82917,
    "long": 120.28278,
    "zone": "Asia/Manila"
  },
  {
    "name": "Naga",
    "country": "PH",
    "lat": 13.61917,
    "long": 123.18139,
    "zone": "Asia/Manila"
  },
  {
    "name": "Muricay",
    "country": "PH",
    "lat": 7.8275,
    "long": 123.4782,
    "zone": "Asia/Manila"
  },
  {
    "name": "Rodriguez",
    "country": "PH",
    "lat": 14.76011,
    "long": 121.19993,
    "zone": "Asia/Manila"
  },
  {
    "name": "Meycauayan",
    "country": "PH",
    "lat": 14.73694,
    "long": 120.96083,
    "zone": "Asia/Manila"
  },
  {
    "name": "Mati",
    "country": "PH",
    "lat": 6.95508,
    "long": 126.21655,
    "zone": "Asia/Manila"
  },
  {
    "name": "Marawi City",
    "country": "PH",
    "lat": 8.0034,
    "long": 124.28395,
    "zone": "Asia/Manila"
  },
  {
    "name": "Mantampay",
    "country": "PH",
    "lat": 8.16667,
    "long": 124.21667,
    "zone": "Asia/Manila"
  },
  {
    "name": "Mansilingan",
    "country": "PH",
    "lat": 10.63111,
    "long": 122.97889,
    "zone": "Asia/Manila"
  },
  {
    "name": "Manila",
    "country": "PH",
    "lat": 14.6042,
    "long": 120.9822,
    "zone": "Asia/Manila"
  },
  {
    "name": "Mandaue City",
    "country": "PH",
    "lat": 10.32361,
    "long": 123.92222,
    "zone": "Asia/Manila"
  },
  {
    "name": "Mandaluyong City",
    "country": "PH",
    "lat": 14.5832,
    "long": 121.0409,
    "zone": "Asia/Manila"
  },
  {
    "name": "Malolos",
    "country": "PH",
    "lat": 14.8443,
    "long": 120.81039,
    "zone": "Asia/Manila"
  },
  {
    "name": "Makati City",
    "country": "PH",
    "lat": 14.55027,
    "long": 121.03269,
    "zone": "Asia/Manila"
  },
  {
    "name": "Mabalacat City",
    "country": "PH",
    "lat": 15.22303,
    "long": 120.57117,
    "zone": "Asia/Manila"
  },
  {
    "name": "Lucena",
    "country": "PH",
    "lat": 13.93139,
    "long": 121.61722,
    "zone": "Asia/Manila"
  },
  {
    "name": "Lipa City",
    "country": "PH",
    "lat": 13.9411,
    "long": 121.1631,
    "zone": "Asia/Manila"
  },
  {
    "name": "Libertad",
    "country": "PH",
    "lat": 8.94417,
    "long": 125.50194,
    "zone": "Asia/Manila"
  },
  {
    "name": "Legaspi",
    "country": "PH",
    "lat": 13.13722,
    "long": 123.73444,
    "zone": "Asia/Manila"
  },
  {
    "name": "Lapu-Lapu City",
    "country": "PH",
    "lat": 10.31028,
    "long": 123.94944,
    "zone": "Asia/Manila"
  },
  {
    "name": "Laoag",
    "country": "PH",
    "lat": 18.1978,
    "long": 120.5957,
    "zone": "Asia/Manila"
  },
  {
    "name": "Koronadal",
    "country": "PH",
    "lat": 6.50306,
    "long": 124.84694,
    "zone": "Asia/Manila"
  },
  {
    "name": "Kabankalan",
    "country": "PH",
    "lat": 9.9839,
    "long": 122.81423,
    "zone": "Asia/Manila"
  },
  {
    "name": "Jolo",
    "country": "PH",
    "lat": 6.05222,
    "long": 121.00222,
    "zone": "Asia/Manila"
  },
  {
    "name": "Imus",
    "country": "PH",
    "lat": 14.42972,
    "long": 120.93667,
    "zone": "Asia/Manila"
  },
  {
    "name": "Iloilo",
    "country": "PH",
    "lat": 10.69694,
    "long": 122.56444,
    "zone": "Asia/Manila"
  },
  {
    "name": "Iligan City",
    "country": "PH",
    "lat": 8.25,
    "long": 124.4,
    "zone": "Asia/Manila"
  },
  {
    "name": "Hagonoy",
    "country": "PH",
    "lat": 14.83413,
    "long": 120.73271,
    "zone": "Asia/Manila"
  },
  {
    "name": "Guyong",
    "country": "PH",
    "lat": 14.8361,
    "long": 120.97844,
    "zone": "Asia/Manila"
  },
  {
    "name": "General Santos",
    "country": "PH",
    "lat": 6.11278,
    "long": 125.17167,
    "zone": "Asia/Manila"
  },
  {
    "name": "Dumaguete",
    "country": "PH",
    "lat": 9.30722,
    "long": 123.30261,
    "zone": "Asia/Manila"
  },
  {
    "name": "Digos",
    "country": "PH",
    "lat": 6.74972,
    "long": 125.35722,
    "zone": "Asia/Manila"
  },
  {
    "name": "Davao",
    "country": "PH",
    "lat": 7.07306,
    "long": 125.61278,
    "zone": "Asia/Manila"
  },
  {
    "name": "Dasmariñas",
    "country": "PH",
    "lat": 14.32944,
    "long": 120.93667,
    "zone": "Asia/Manila"
  },
  {
    "name": "Cotabato",
    "country": "PH",
    "lat": 7.22361,
    "long": 124.24639,
    "zone": "Asia/Manila"
  },
  {
    "name": "Cebu City",
    "country": "PH",
    "lat": 10.31672,
    "long": 123.89071,
    "zone": "Asia/Manila"
  },
  {
    "name": "Cavite City",
    "country": "PH",
    "lat": 14.48369,
    "long": 120.89878,
    "zone": "Asia/Manila"
  },
  {
    "name": "Calamba",
    "country": "PH",
    "lat": 14.21167,
    "long": 121.16528,
    "zone": "Asia/Manila"
  },
  {
    "name": "Cainta",
    "country": "PH",
    "lat": 14.5786,
    "long": 121.1222,
    "zone": "Asia/Manila"
  },
  {
    "name": "Cagayan de Oro",
    "country": "PH",
    "lat": 8.48222,
    "long": 124.64722,
    "zone": "Asia/Manila"
  },
  {
    "name": "Cadiz",
    "country": "PH",
    "lat": 10.9465,
    "long": 123.288,
    "zone": "Asia/Manila"
  },
  {
    "name": "Cabanatuan City",
    "country": "PH",
    "lat": 15.48586,
    "long": 120.96648,
    "zone": "Asia/Manila"
  },
  {
    "name": "Butuan",
    "country": "PH",
    "lat": 8.94917,
    "long": 125.54361,
    "zone": "Asia/Manila"
  },
  {
    "name": "Bulaon",
    "country": "PH",
    "lat": 15.08262,
    "long": 120.66288,
    "zone": "Asia/Manila"
  },
  {
    "name": "Budta",
    "country": "PH",
    "lat": 7.20417,
    "long": 124.43972,
    "zone": "Asia/Manila"
  },
  {
    "name": "Binangonan",
    "country": "PH",
    "lat": 14.4646,
    "long": 121.1929,
    "zone": "Asia/Manila"
  },
  {
    "name": "Batangas",
    "country": "PH",
    "lat": 13.7567,
    "long": 121.0584,
    "zone": "Asia/Manila"
  },
  {
    "name": "Baliuag",
    "country": "PH",
    "lat": 14.95472,
    "long": 120.89694,
    "zone": "Asia/Manila"
  },
  {
    "name": "Baguio",
    "country": "PH",
    "lat": 16.41639,
    "long": 120.59306,
    "zone": "Asia/Manila"
  },
  {
    "name": "Bago City",
    "country": "PH",
    "lat": 10.53333,
    "long": 122.83333,
    "zone": "Asia/Manila"
  },
  {
    "name": "Bacoor",
    "country": "PH",
    "lat": 14.45903,
    "long": 120.92903,
    "zone": "Asia/Manila"
  },
  {
    "name": "Bacolod City",
    "country": "PH",
    "lat": 10.66667,
    "long": 122.95,
    "zone": "Asia/Manila"
  },
  {
    "name": "Antipolo",
    "country": "PH",
    "lat": 14.62578,
    "long": 121.12251,
    "zone": "Asia/Manila"
  },
  {
    "name": "Angeles City",
    "country": "PH",
    "lat": 15.15,
    "long": 120.58333,
    "zone": "Asia/Manila"
  },
  {
    "name": "Malingao",
    "country": "PH",
    "lat": 7.16083,
    "long": 124.475,
    "zone": "Asia/Manila"
  },
  {
    "name": "Pasig City",
    "country": "PH",
    "lat": 14.58691,
    "long": 121.0614,
    "zone": "Asia/Manila"
  },
  {
    "name": "Khairpur",
    "country": "PK",
    "lat": 27.52948,
    "long": 68.7617,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Wazīrābād",
    "country": "PK",
    "lat": 32.44583,
    "long": 74.11594,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Vihāri",
    "country": "PK",
    "lat": 30.03333,
    "long": 72.35,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Tando Allāhyār",
    "country": "PK",
    "lat": 25.46263,
    "long": 68.71923,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Tando Ādam",
    "country": "PK",
    "lat": 25.76374,
    "long": 68.66098,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Sukkur",
    "country": "PK",
    "lat": 27.70516,
    "long": 68.85738,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Sialkot",
    "country": "PK",
    "lat": 32.49268,
    "long": 74.53134,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Shikārpur",
    "country": "PK",
    "lat": 27.95706,
    "long": 68.63789,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Sheikhupura",
    "country": "PK",
    "lat": 31.71306,
    "long": 73.97833,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Shahkot",
    "country": "PK",
    "lat": 31.5709,
    "long": 73.48531,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Sargodha",
    "country": "PK",
    "lat": 32.08361,
    "long": 72.67111,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Sahiwal",
    "country": "PK",
    "lat": 30.66667,
    "long": 73.1,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Sādiqābād",
    "country": "PK",
    "lat": 28.30623,
    "long": 70.13065,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Rawalpindi",
    "country": "PK",
    "lat": 33.6007,
    "long": 73.0679,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Quetta",
    "country": "PK",
    "lat": 30.199,
    "long": 67.00971,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Peshawar",
    "country": "PK",
    "lat": 34.008,
    "long": 71.57849,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Pākpattan",
    "country": "PK",
    "lat": 30.34104,
    "long": 73.38664,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Okāra",
    "country": "PK",
    "lat": 30.80806,
    "long": 73.44583,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Nawābshāh",
    "country": "PK",
    "lat": 26.24833,
    "long": 68.40955,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Muzaffargarh",
    "country": "PK",
    "lat": 30.07537,
    "long": 71.19213,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Muzaffarābād",
    "country": "PK",
    "lat": 34.37002,
    "long": 73.47082,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Murīdke",
    "country": "PK",
    "lat": 31.8025,
    "long": 74.26167,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Multān",
    "country": "PK",
    "lat": 30.19556,
    "long": 71.47528,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Mirpur Khas",
    "country": "PK",
    "lat": 25.5251,
    "long": 69.0159,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Mingora",
    "country": "PK",
    "lat": 34.7795,
    "long": 72.36265,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Mardan",
    "country": "PK",
    "lat": 34.20195,
    "long": 72.05254,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Mandi Bahāuddīn",
    "country": "PK",
    "lat": 32.58339,
    "long": 73.48431,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Malir Cantonment",
    "country": "PK",
    "lat": 24.9424,
    "long": 67.2066,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Lārkāna",
    "country": "PK",
    "lat": 27.55508,
    "long": 68.21414,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Lahore",
    "country": "PK",
    "lat": 31.54972,
    "long": 74.34361,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Kotli",
    "country": "PK",
    "lat": 33.51667,
    "long": 73.91667,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Kot Addu",
    "country": "PK",
    "lat": 30.4692,
    "long": 70.96714,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Kohāt",
    "country": "PK",
    "lat": 33.58196,
    "long": 71.44929,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Khushāb",
    "country": "PK",
    "lat": 32.29667,
    "long": 72.3525,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Khānpur",
    "country": "PK",
    "lat": 28.64534,
    "long": 70.6567,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Kasūr",
    "country": "PK",
    "lat": 31.11556,
    "long": 74.44667,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Karachi",
    "country": "PK",
    "lat": 24.9056,
    "long": 67.0822,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Kamoke",
    "country": "PK",
    "lat": 31.97444,
    "long": 74.22444,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Kamālia",
    "country": "PK",
    "lat": 30.73333,
    "long": 72.65,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Jhelum",
    "country": "PK",
    "lat": 32.93313,
    "long": 73.72637,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Jhang Sadr",
    "country": "PK",
    "lat": 31.27154,
    "long": 72.32842,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Jarānwāla",
    "country": "PK",
    "lat": 31.33333,
    "long": 73.43333,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Jacobābād",
    "country": "PK",
    "lat": 28.281,
    "long": 68.43876,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Islamabad",
    "country": "PK",
    "lat": 33.72148,
    "long": 73.04329,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Hyderabad",
    "country": "PK",
    "lat": 25.39242,
    "long": 68.37366,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Hāfizābād",
    "country": "PK",
    "lat": 32.06786,
    "long": 73.68545,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Gujrāt",
    "country": "PK",
    "lat": 32.57284,
    "long": 74.07897,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Gujrānwāla",
    "country": "PK",
    "lat": 32.16167,
    "long": 74.18831,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Gojra",
    "country": "PK",
    "lat": 31.14874,
    "long": 72.68656,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Faisalābād",
    "country": "PK",
    "lat": 31.41667,
    "long": 73.08333,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Dera Ismāīl Khān",
    "country": "PK",
    "lat": 31.83269,
    "long": 70.9024,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Dera Ghazi Khan",
    "country": "PK",
    "lat": 30.05614,
    "long": 70.63477,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Daska",
    "country": "PK",
    "lat": 32.32426,
    "long": 74.34974,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Dadu",
    "country": "PK",
    "lat": 26.73287,
    "long": 67.77631,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Chishtiān Mandi",
    "country": "PK",
    "lat": 29.8,
    "long": 72.86667,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Chiniot",
    "country": "PK",
    "lat": 31.72,
    "long": 72.97889,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Chakwāl",
    "country": "PK",
    "lat": 32.93338,
    "long": 72.85853,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Būrewāla",
    "country": "PK",
    "lat": 30.16667,
    "long": 72.65,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Bhimbar",
    "country": "PK",
    "lat": 32.97568,
    "long": 74.07926,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Bahāwalpur",
    "country": "PK",
    "lat": 29.4,
    "long": 71.68333,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Bahāwalnagar",
    "country": "PK",
    "lat": 29.99866,
    "long": 73.2536,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Ahmadpur East",
    "country": "PK",
    "lat": 29.14309,
    "long": 71.25976,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Abbottābād",
    "country": "PK",
    "lat": 34.14685,
    "long": 73.21449,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Bahāwalnagar",
    "country": "PK",
    "lat": 30.55083,
    "long": 73.39083,
    "zone": "Asia/Karachi"
  },
  {
    "name": "Wola",
    "country": "PL",
    "lat": 52.2401,
    "long": 20.98869,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Warsaw",
    "country": "PL",
    "lat": 52.22977,
    "long": 21.01178,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Tarnów",
    "country": "PL",
    "lat": 50.01381,
    "long": 20.98698,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Targówek",
    "country": "PL",
    "lat": 52.29185,
    "long": 21.04845,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Śródmieście",
    "country": "PL",
    "lat": 52.22904,
    "long": 21.01644,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Rzeszów",
    "country": "PL",
    "lat": 50.04132,
    "long": 21.99901,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Radom",
    "country": "PL",
    "lat": 51.40253,
    "long": 21.14714,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Olsztyn",
    "country": "PL",
    "lat": 53.77995,
    "long": 20.49416,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Mokotów",
    "country": "PL",
    "lat": 52.1934,
    "long": 21.03487,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Lublin",
    "country": "PL",
    "lat": 51.25,
    "long": 22.56667,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Kielce",
    "country": "PL",
    "lat": 50.87033,
    "long": 20.62752,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Bielany",
    "country": "PL",
    "lat": 52.29242,
    "long": 20.93531,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Białystok",
    "country": "PL",
    "lat": 53.13333,
    "long": 23.16433,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Bemowo",
    "country": "PL",
    "lat": 52.2546,
    "long": 20.90844,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Zielona Góra",
    "country": "PL",
    "lat": 51.93548,
    "long": 15.50643,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Zabrze",
    "country": "PL",
    "lat": 50.32492,
    "long": 18.78576,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Wrocław",
    "country": "PL",
    "lat": 51.1,
    "long": 17.03333,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Włocławek",
    "country": "PL",
    "lat": 52.64817,
    "long": 19.0678,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Wałbrzych",
    "country": "PL",
    "lat": 50.77141,
    "long": 16.28432,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Tychy",
    "country": "PL",
    "lat": 50.13717,
    "long": 18.96641,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Toruń",
    "country": "PL",
    "lat": 53.01375,
    "long": 18.59814,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Szczecin",
    "country": "PL",
    "lat": 53.42894,
    "long": 14.55302,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Sosnowiec",
    "country": "PL",
    "lat": 50.28682,
    "long": 19.10385,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Rybnik",
    "country": "PL",
    "lat": 50.09713,
    "long": 18.54179,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Ruda Śląska",
    "country": "PL",
    "lat": 50.2584,
    "long": 18.85632,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Poznań",
    "country": "PL",
    "lat": 52.40692,
    "long": 16.92993,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Płock",
    "country": "PL",
    "lat": 52.54682,
    "long": 19.70638,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Opole",
    "country": "PL",
    "lat": 50.67211,
    "long": 17.92533,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Łódź",
    "country": "PL",
    "lat": 51.75,
    "long": 19.46667,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Legnica",
    "country": "PL",
    "lat": 51.21006,
    "long": 16.1619,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Kraków",
    "country": "PL",
    "lat": 50.06143,
    "long": 19.93658,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Koszalin",
    "country": "PL",
    "lat": 54.19438,
    "long": 16.17222,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Katowice",
    "country": "PL",
    "lat": 50.25841,
    "long": 19.02754,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Kalisz",
    "country": "PL",
    "lat": 51.76109,
    "long": 18.09102,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Gorzów Wielkopolski",
    "country": "PL",
    "lat": 52.73679,
    "long": 15.22878,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Gliwice",
    "country": "PL",
    "lat": 50.29761,
    "long": 18.67658,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Gdynia",
    "country": "PL",
    "lat": 54.51889,
    "long": 18.53188,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Gdańsk",
    "country": "PL",
    "lat": 54.35205,
    "long": 18.64637,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Elbląg",
    "country": "PL",
    "lat": 54.1522,
    "long": 19.40884,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Dąbrowa Górnicza",
    "country": "PL",
    "lat": 50.31818,
    "long": 19.2374,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Częstochowa",
    "country": "PL",
    "lat": 50.79646,
    "long": 19.12409,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Chorzów",
    "country": "PL",
    "lat": 50.30582,
    "long": 18.9742,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Bytom",
    "country": "PL",
    "lat": 50.34802,
    "long": 18.93282,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Bydgoszcz",
    "country": "PL",
    "lat": 53.1235,
    "long": 18.00762,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Bielsko-Biala",
    "country": "PL",
    "lat": 49.82245,
    "long": 19.04686,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Ursynów",
    "country": "PL",
    "lat": 52.15051,
    "long": 21.05041,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Praga Południe",
    "country": "PL",
    "lat": 52.24424,
    "long": 21.08545,
    "zone": "Europe/Warsaw"
  },
  {
    "name": "Bayamón",
    "country": "PR",
    "lat": 18.39856,
    "long": -66.15572,
    "zone": "America/Puerto_Rico"
  },
  {
    "name": "Carolina",
    "country": "PR",
    "lat": 18.38078,
    "long": -65.95739,
    "zone": "America/Puerto_Rico"
  },
  {
    "name": "Ponce",
    "country": "PR",
    "lat": 18.01108,
    "long": -66.61406,
    "zone": "America/Puerto_Rico"
  },
  {
    "name": "San Juan",
    "country": "PR",
    "lat": 18.46633,
    "long": -66.10572,
    "zone": "America/Puerto_Rico"
  },
  {
    "name": "Rafaḩ",
    "country": "PS",
    "lat": 31.287,
    "long": 34.25952,
    "zone": "Asia/Gaza"
  },
  {
    "name": "Khān Yūnis",
    "country": "PS",
    "lat": 31.34018,
    "long": 34.30627,
    "zone": "Asia/Gaza"
  },
  {
    "name": "Jabālyā",
    "country": "PS",
    "lat": 31.5272,
    "long": 34.48347,
    "zone": "Asia/Gaza"
  },
  {
    "name": "Gaza",
    "country": "PS",
    "lat": 31.5,
    "long": 34.46667,
    "zone": "Asia/Gaza"
  },
  {
    "name": "Nablus",
    "country": "PS",
    "lat": 32.22111,
    "long": 35.25444,
    "zone": "Asia/Hebron"
  },
  {
    "name": "Hebron",
    "country": "PS",
    "lat": 31.52935,
    "long": 35.0938,
    "zone": "Asia/Hebron"
  },
  {
    "name": "East Jerusalem",
    "country": "PS",
    "lat": 31.78336,
    "long": 35.23388,
    "zone": "Asia/Hebron"
  },
  {
    "name": "Setúbal",
    "country": "PT",
    "lat": 38.5244,
    "long": -8.8882,
    "zone": "Europe/Lisbon"
  },
  {
    "name": "Queluz",
    "country": "PT",
    "lat": 38.75657,
    "long": -9.25451,
    "zone": "Europe/Lisbon"
  },
  {
    "name": "Lisbon",
    "country": "PT",
    "lat": 38.71667,
    "long": -9.13333,
    "zone": "Europe/Lisbon"
  },
  {
    "name": "Funchal",
    "country": "PT",
    "lat": 32.63333,
    "long": -16.9,
    "zone": "Atlantic/Madeira"
  },
  {
    "name": "Amadora",
    "country": "PT",
    "lat": 38.75382,
    "long": -9.23083,
    "zone": "Europe/Lisbon"
  },
  {
    "name": "Porto",
    "country": "PT",
    "lat": 41.14961,
    "long": -8.61099,
    "zone": "Europe/Lisbon"
  },
  {
    "name": "Coimbra",
    "country": "PT",
    "lat": 40.20564,
    "long": -8.41955,
    "zone": "Europe/Lisbon"
  },
  {
    "name": "Braga",
    "country": "PT",
    "lat": 41.55032,
    "long": -8.42005,
    "zone": "Europe/Lisbon"
  },
  {
    "name": "San Lorenzo",
    "country": "PY",
    "lat": -25.33968,
    "long": -57.50879,
    "zone": "America/Asuncion"
  },
  {
    "name": "Lambaré",
    "country": "PY",
    "lat": -25.34682,
    "long": -57.60647,
    "zone": "America/Asuncion"
  },
  {
    "name": "Fernando de la Mora",
    "country": "PY",
    "lat": -25.3386,
    "long": -57.52167,
    "zone": "America/Asuncion"
  },
  {
    "name": "Ciudad del Este",
    "country": "PY",
    "lat": -25.50972,
    "long": -54.61111,
    "zone": "America/Asuncion"
  },
  {
    "name": "Capiatá",
    "country": "PY",
    "lat": -25.3552,
    "long": -57.44545,
    "zone": "America/Asuncion"
  },
  {
    "name": "Asunción",
    "country": "PY",
    "lat": -25.30066,
    "long": -57.63591,
    "zone": "America/Asuncion"
  },
  {
    "name": "Ar Rayyān",
    "country": "QA",
    "lat": 25.29194,
    "long": 51.42444,
    "zone": "Asia/Qatar"
  },
  {
    "name": "Doha",
    "country": "QA",
    "lat": 25.27932,
    "long": 51.52245,
    "zone": "Asia/Qatar"
  },
  {
    "name": "Saint-Denis",
    "country": "RE",
    "lat": -20.88231,
    "long": 55.4504,
    "zone": "Indian/Reunion"
  },
  {
    "name": "Târgu-Mureş",
    "country": "RO",
    "lat": 46.54245,
    "long": 24.55747,
    "zone": "Europe/Bucharest"
  },
  {
    "name": "Timişoara",
    "country": "RO",
    "lat": 45.75372,
    "long": 21.22571,
    "zone": "Europe/Bucharest"
  },
  {
    "name": "Suceava",
    "country": "RO",
    "lat": 47.63333,
    "long": 26.25,
    "zone": "Europe/Bucharest"
  },
  {
    "name": "Sibiu",
    "country": "RO",
    "lat": 45.8,
    "long": 24.15,
    "zone": "Europe/Bucharest"
  },
  {
    "name": "Satu Mare",
    "country": "RO",
    "lat": 47.8,
    "long": 22.88333,
    "zone": "Europe/Bucharest"
  },
  {
    "name": "Râmnicu Vâlcea",
    "country": "RO",
    "lat": 45.1,
    "long": 24.36667,
    "zone": "Europe/Bucharest"
  },
  {
    "name": "Ploieşti",
    "country": "RO",
    "lat": 44.95,
    "long": 26.01667,
    "zone": "Europe/Bucharest"
  },
  {
    "name": "Piteşti",
    "country": "RO",
    "lat": 44.85,
    "long": 24.86667,
    "zone": "Europe/Bucharest"
  },
  {
    "name": "Piatra Neamţ",
    "country": "RO",
    "lat": 46.91667,
    "long": 26.33333,
    "zone": "Europe/Bucharest"
  },
  {
    "name": "Oradea",
    "country": "RO",
    "lat": 47.06667,
    "long": 21.93333,
    "zone": "Europe/Bucharest"
  },
  {
    "name": "Iaşi",
    "country": "RO",
    "lat": 47.16667,
    "long": 27.6,
    "zone": "Europe/Bucharest"
  },
  {
    "name": "Galaţi",
    "country": "RO",
    "lat": 45.45,
    "long": 28.05,
    "zone": "Europe/Bucharest"
  },
  {
    "name": "Focşani",
    "country": "RO",
    "lat": 45.7,
    "long": 27.18333,
    "zone": "Europe/Bucharest"
  },
  {
    "name": "Drobeta-Turnu Severin",
    "country": "RO",
    "lat": 44.63194,
    "long": 22.65611,
    "zone": "Europe/Bucharest"
  },
  {
    "name": "Craiova",
    "country": "RO",
    "lat": 44.31667,
    "long": 23.8,
    "zone": "Europe/Bucharest"
  },
  {
    "name": "Constanţa",
    "country": "RO",
    "lat": 44.18073,
    "long": 28.63432,
    "zone": "Europe/Bucharest"
  },
  {
    "name": "Cluj-Napoca",
    "country": "RO",
    "lat": 46.76667,
    "long": 23.6,
    "zone": "Europe/Bucharest"
  },
  {
    "name": "Buzău",
    "country": "RO",
    "lat": 45.15,
    "long": 26.83333,
    "zone": "Europe/Bucharest"
  },
  {
    "name": "Bucharest",
    "country": "RO",
    "lat": 44.43225,
    "long": 26.10626,
    "zone": "Europe/Bucharest"
  },
  {
    "name": "Braşov",
    "country": "RO",
    "lat": 45.64861,
    "long": 25.60613,
    "zone": "Europe/Bucharest"
  },
  {
    "name": "Brăila",
    "country": "RO",
    "lat": 45.26667,
    "long": 27.98333,
    "zone": "Europe/Bucharest"
  },
  {
    "name": "Botoşani",
    "country": "RO",
    "lat": 47.75,
    "long": 26.66667,
    "zone": "Europe/Bucharest"
  },
  {
    "name": "Baia Mare",
    "country": "RO",
    "lat": 47.65729,
    "long": 23.56808,
    "zone": "Europe/Bucharest"
  },
  {
    "name": "Bacău",
    "country": "RO",
    "lat": 46.56667,
    "long": 26.9,
    "zone": "Europe/Bucharest"
  },
  {
    "name": "Arad",
    "country": "RO",
    "lat": 46.18333,
    "long": 21.31667,
    "zone": "Europe/Bucharest"
  },
  {
    "name": "Baia Mare",
    "country": "RO",
    "lat": 47.65331,
    "long": 23.57949,
    "zone": "Europe/Bucharest"
  },
  {
    "name": "Zemun",
    "country": "RS",
    "lat": 44.84306,
    "long": 20.40111,
    "zone": "Europe/Belgrade"
  },
  {
    "name": "Niš",
    "country": "RS",
    "lat": 43.32472,
    "long": 21.90333,
    "zone": "Europe/Belgrade"
  },
  {
    "name": "Kragujevac",
    "country": "RS",
    "lat": 44.01667,
    "long": 20.91667,
    "zone": "Europe/Belgrade"
  },
  {
    "name": "Čačak",
    "country": "RS",
    "lat": 43.89139,
    "long": 20.34972,
    "zone": "Europe/Belgrade"
  },
  {
    "name": "Belgrade",
    "country": "RS",
    "lat": 44.80401,
    "long": 20.46513,
    "zone": "Europe/Belgrade"
  },
  {
    "name": "Novi Sad",
    "country": "RS",
    "lat": 45.25167,
    "long": 19.83694,
    "zone": "Europe/Belgrade"
  },
  {
    "name": "Zyuzino",
    "country": "RU",
    "lat": 55.65608,
    "long": 37.56846,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Zyablikovo",
    "country": "RU",
    "lat": 55.61667,
    "long": 37.76667,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Zlatoust",
    "country": "RU",
    "lat": 55.17111,
    "long": 59.65083,
    "zone": "Asia/Yekaterinburg"
  },
  {
    "name": "Zhulebino",
    "country": "RU",
    "lat": 55.7,
    "long": 37.85,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Zheleznodorozhnyy",
    "country": "RU",
    "lat": 55.744,
    "long": 38.01684,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Zelenograd",
    "country": "RU",
    "lat": 55.9825,
    "long": 37.18139,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Yoshkar-Ola",
    "country": "RU",
    "lat": 56.63877,
    "long": 47.89078,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Yelets",
    "country": "RU",
    "lat": 52.62366,
    "long": 38.50169,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Yasenevo",
    "country": "RU",
    "lat": 55.60686,
    "long": 37.51991,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Yaroslavl",
    "country": "RU",
    "lat": 57.62987,
    "long": 39.87368,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Vykhino-Zhulebino",
    "country": "RU",
    "lat": 55.70196,
    "long": 37.81178,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Voronezh",
    "country": "RU",
    "lat": 51.67204,
    "long": 39.1843,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Volzhskiy",
    "country": "RU",
    "lat": 48.78583,
    "long": 44.77973,
    "zone": "Europe/Volgograd"
  },
  {
    "name": "Vologda",
    "country": "RU",
    "lat": 59.2239,
    "long": 39.88398,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Volgograd",
    "country": "RU",
    "lat": 48.71939,
    "long": 44.50183,
    "zone": "Europe/Volgograd"
  },
  {
    "name": "Volgodonsk",
    "country": "RU",
    "lat": 47.51361,
    "long": 42.15139,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Vladimir",
    "country": "RU",
    "lat": 56.13655,
    "long": 40.39658,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Vladikavkaz",
    "country": "RU",
    "lat": 43.03667,
    "long": 44.66778,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Veshnyaki",
    "country": "RU",
    "lat": 55.72393,
    "long": 37.81952,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Velikiye Luki",
    "country": "RU",
    "lat": 56.34,
    "long": 30.54517,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Ulyanovsk",
    "country": "RU",
    "lat": 54.32824,
    "long": 48.38657,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Ukhta",
    "country": "RU",
    "lat": 63.56705,
    "long": 53.68348,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Ufa",
    "country": "RU",
    "lat": 54.74306,
    "long": 55.96779,
    "zone": "Asia/Yekaterinburg"
  },
  {
    "name": "Tver",
    "country": "RU",
    "lat": 56.85836,
    "long": 35.90057,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Tula",
    "country": "RU",
    "lat": 54.19609,
    "long": 37.61822,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Troparëvo",
    "country": "RU",
    "lat": 55.65625,
    "long": 37.48496,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Tol’yatti",
    "country": "RU",
    "lat": 53.5303,
    "long": 49.3461,
    "zone": "Europe/Samara"
  },
  {
    "name": "Tyoply Stan",
    "country": "RU",
    "lat": 55.62047,
    "long": 37.49338,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Tambov",
    "country": "RU",
    "lat": 52.73169,
    "long": 41.44326,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Taganrog",
    "country": "RU",
    "lat": 47.23617,
    "long": 38.89688,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Taganskiy",
    "country": "RU",
    "lat": 55.73333,
    "long": 37.66667,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Syzran’",
    "country": "RU",
    "lat": 53.1585,
    "long": 48.4681,
    "zone": "Europe/Samara"
  },
  {
    "name": "Syktyvkar",
    "country": "RU",
    "lat": 61.67642,
    "long": 50.80994,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Strogino",
    "country": "RU",
    "lat": 55.81838,
    "long": 37.41224,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Sterlitamak",
    "country": "RU",
    "lat": 53.62462,
    "long": 55.95015,
    "zone": "Asia/Yekaterinburg"
  },
  {
    "name": "Stavropol’",
    "country": "RU",
    "lat": 45.0428,
    "long": 41.9734,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Staryy Oskol",
    "country": "RU",
    "lat": 51.29667,
    "long": 37.84167,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Solntsevo",
    "country": "RU",
    "lat": 55.63711,
    "long": 37.38115,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Solikamsk",
    "country": "RU",
    "lat": 59.6316,
    "long": 56.7685,
    "zone": "Asia/Yekaterinburg"
  },
  {
    "name": "Sochi",
    "country": "RU",
    "lat": 43.59917,
    "long": 39.72569,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Smolensk",
    "country": "RU",
    "lat": 54.7818,
    "long": 32.0401,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Shchukino",
    "country": "RU",
    "lat": 55.8,
    "long": 37.45,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Shchelkovo",
    "country": "RU",
    "lat": 55.92497,
    "long": 37.97218,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Shakhty",
    "country": "RU",
    "lat": 47.70911,
    "long": 40.21443,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Severodvinsk",
    "country": "RU",
    "lat": 64.5635,
    "long": 39.8302,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Severnyy",
    "country": "RU",
    "lat": 55.93583,
    "long": 37.54889,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Serpukhov",
    "country": "RU",
    "lat": 54.91578,
    "long": 37.41114,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Sergiyev Posad",
    "country": "RU",
    "lat": 56.3,
    "long": 38.13333,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Saratov",
    "country": "RU",
    "lat": 51.54056,
    "long": 46.00861,
    "zone": "Europe/Volgograd"
  },
  {
    "name": "Saransk",
    "country": "RU",
    "lat": 54.1838,
    "long": 45.1749,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Saint Petersburg",
    "country": "RU",
    "lat": 59.93863,
    "long": 30.31413,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Samara",
    "country": "RU",
    "lat": 53.20007,
    "long": 50.15,
    "zone": "Europe/Samara"
  },
  {
    "name": "Salavat",
    "country": "RU",
    "lat": 53.38365,
    "long": 55.90773,
    "zone": "Asia/Yekaterinburg"
  },
  {
    "name": "Rybinsk",
    "country": "RU",
    "lat": 58.0446,
    "long": 38.84259,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Ryazan’",
    "country": "RU",
    "lat": 54.6269,
    "long": 39.6916,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Rostov-na-Donu",
    "country": "RU",
    "lat": 47.23135,
    "long": 39.72328,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Ramenki",
    "country": "RU",
    "lat": 55.7,
    "long": 37.5,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Pyatigorsk",
    "country": "RU",
    "lat": 44.04861,
    "long": 43.05944,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Pushkino",
    "country": "RU",
    "lat": 56.01722,
    "long": 37.86667,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Pskov",
    "country": "RU",
    "lat": 57.8136,
    "long": 28.3496,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Podol’sk",
    "country": "RU",
    "lat": 55.42419,
    "long": 37.55472,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Ryazanskiy",
    "country": "RU",
    "lat": 55.73333,
    "long": 37.76667,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Petrozavodsk",
    "country": "RU",
    "lat": 61.78491,
    "long": 34.34691,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Pervoural’sk",
    "country": "RU",
    "lat": 56.90528,
    "long": 59.94361,
    "zone": "Asia/Yekaterinburg"
  },
  {
    "name": "Perovo",
    "country": "RU",
    "lat": 55.73501,
    "long": 37.79088,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Perm",
    "country": "RU",
    "lat": 58.01046,
    "long": 56.25017,
    "zone": "Asia/Yekaterinburg"
  },
  {
    "name": "Novo-Peredelkino",
    "country": "RU",
    "lat": 55.64528,
    "long": 37.33583,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Penza",
    "country": "RU",
    "lat": 53.20066,
    "long": 45.00464,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Orsk",
    "country": "RU",
    "lat": 51.20487,
    "long": 58.56685,
    "zone": "Asia/Yekaterinburg"
  },
  {
    "name": "Orenburg",
    "country": "RU",
    "lat": 51.7727,
    "long": 55.0988,
    "zone": "Asia/Yekaterinburg"
  },
  {
    "name": "Orël",
    "country": "RU",
    "lat": 52.96508,
    "long": 36.07849,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Orekhovo-Zuyevo",
    "country": "RU",
    "lat": 55.80672,
    "long": 38.96178,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Orekhovo-Borisovo Severnoye",
    "country": "RU",
    "lat": 55.61667,
    "long": 37.68333,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Oktyabr’skiy",
    "country": "RU",
    "lat": 54.48147,
    "long": 53.47103,
    "zone": "Asia/Yekaterinburg"
  },
  {
    "name": "Odintsovo",
    "country": "RU",
    "lat": 55.67798,
    "long": 37.27773,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Ochakovo-Matveyevskoye",
    "country": "RU",
    "lat": 55.68432,
    "long": 37.44654,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Obninsk",
    "country": "RU",
    "lat": 55.09681,
    "long": 36.61006,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Novyye Kuz’minki",
    "country": "RU",
    "lat": 55.7,
    "long": 37.75,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Novyye Cherëmushki",
    "country": "RU",
    "lat": 55.7,
    "long": 37.58333,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Novotroitsk",
    "country": "RU",
    "lat": 51.20301,
    "long": 58.32665,
    "zone": "Asia/Yekaterinburg"
  },
  {
    "name": "Novorossiysk",
    "country": "RU",
    "lat": 44.72439,
    "long": 37.76752,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Novomoskovsk",
    "country": "RU",
    "lat": 54.0105,
    "long": 38.2846,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Novokuybyshevsk",
    "country": "RU",
    "lat": 53.0959,
    "long": 49.9462,
    "zone": "Europe/Samara"
  },
  {
    "name": "Novocherkassk",
    "country": "RU",
    "lat": 47.42018,
    "long": 40.09132,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Novocheboksarsk",
    "country": "RU",
    "lat": 56.11095,
    "long": 47.47755,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Velikiy Novgorod",
    "country": "RU",
    "lat": 58.52131,
    "long": 31.27104,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Noginsk",
    "country": "RU",
    "lat": 55.86647,
    "long": 38.4438,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Nizhniy Tagil",
    "country": "RU",
    "lat": 57.91944,
    "long": 59.965,
    "zone": "Asia/Yekaterinburg"
  },
  {
    "name": "Nizhniy Novgorod",
    "country": "RU",
    "lat": 56.32867,
    "long": 44.00205,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Nizhnekamsk",
    "country": "RU",
    "lat": 55.63657,
    "long": 51.82447,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Nevinnomyssk",
    "country": "RU",
    "lat": 44.6333,
    "long": 41.9444,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Neftekamsk",
    "country": "RU",
    "lat": 56.092,
    "long": 54.2661,
    "zone": "Asia/Yekaterinburg"
  },
  {
    "name": "Nazran’",
    "country": "RU",
    "lat": 43.22597,
    "long": 44.77323,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Nal’chik",
    "country": "RU",
    "lat": 43.49806,
    "long": 43.61889,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Naberezhnyye Chelny",
    "country": "RU",
    "lat": 55.72545,
    "long": 52.41122,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Mytishchi",
    "country": "RU",
    "lat": 55.91163,
    "long": 37.73076,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Murom",
    "country": "RU",
    "lat": 55.575,
    "long": 42.0426,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Murmansk",
    "country": "RU",
    "lat": 68.97917,
    "long": 33.09251,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Moscow",
    "country": "RU",
    "lat": 55.75222,
    "long": 37.61556,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Maykop",
    "country": "RU",
    "lat": 44.60778,
    "long": 40.10583,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Mar’ino",
    "country": "RU",
    "lat": 55.65,
    "long": 37.71667,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Makhachkala",
    "country": "RU",
    "lat": 42.97638,
    "long": 47.50236,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Magnitogorsk",
    "country": "RU",
    "lat": 53.41861,
    "long": 59.04722,
    "zone": "Asia/Yekaterinburg"
  },
  {
    "name": "Lyublino",
    "country": "RU",
    "lat": 55.67923,
    "long": 37.7525,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Lyubertsy",
    "country": "RU",
    "lat": 55.67719,
    "long": 37.89322,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Lipetsk",
    "country": "RU",
    "lat": 52.60311,
    "long": 39.57076,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Tsaritsyno",
    "country": "RU",
    "lat": 55.6254,
    "long": 37.65032,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Kuz’minki",
    "country": "RU",
    "lat": 55.7,
    "long": 37.8,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Kursk",
    "country": "RU",
    "lat": 51.73733,
    "long": 36.18735,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Krasnodar",
    "country": "RU",
    "lat": 45.04484,
    "long": 38.97603,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Presnenskiy",
    "country": "RU",
    "lat": 55.75,
    "long": 37.55,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Kovrov",
    "country": "RU",
    "lat": 56.35722,
    "long": 41.31917,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Kostroma",
    "country": "RU",
    "lat": 57.76647,
    "long": 40.92686,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Kolpino",
    "country": "RU",
    "lat": 59.75069,
    "long": 30.58856,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Kolomna",
    "country": "RU",
    "lat": 55.07944,
    "long": 38.77833,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Kislovodsk",
    "country": "RU",
    "lat": 43.91333,
    "long": 42.72083,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Kirov",
    "country": "RU",
    "lat": 58.59665,
    "long": 49.66007,
    "zone": "Europe/Volgograd"
  },
  {
    "name": "Khoroshëvo-Mnevniki",
    "country": "RU",
    "lat": 55.78363,
    "long": 37.47137,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Khimki",
    "country": "RU",
    "lat": 55.89704,
    "long": 37.42969,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Khasavyurt",
    "country": "RU",
    "lat": 43.2509,
    "long": 46.58766,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Kazan",
    "country": "RU",
    "lat": 55.78874,
    "long": 49.12214,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Kamyshin",
    "country": "RU",
    "lat": 50.09833,
    "long": 45.41601,
    "zone": "Europe/Volgograd"
  },
  {
    "name": "Kaluga",
    "country": "RU",
    "lat": 54.5293,
    "long": 36.27542,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Korolev",
    "country": "RU",
    "lat": 55.91417,
    "long": 37.82556,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Kaliningrad",
    "country": "RU",
    "lat": 54.70649,
    "long": 20.51095,
    "zone": "Europe/Kaliningrad"
  },
  {
    "name": "Izmaylovo",
    "country": "RU",
    "lat": 55.78677,
    "long": 37.80165,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Izhevsk",
    "country": "RU",
    "lat": 56.84976,
    "long": 53.20448,
    "zone": "Europe/Samara"
  },
  {
    "name": "Ivanovskoye",
    "country": "RU",
    "lat": 55.76667,
    "long": 37.83333,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Ivanovo",
    "country": "RU",
    "lat": 56.99719,
    "long": 40.97139,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Groznyy",
    "country": "RU",
    "lat": 43.31195,
    "long": 45.68895,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Gol’yanovo",
    "country": "RU",
    "lat": 55.82299,
    "long": 37.81306,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Glazov",
    "country": "RU",
    "lat": 58.1393,
    "long": 52.658,
    "zone": "Europe/Samara"
  },
  {
    "name": "Engel’s",
    "country": "RU",
    "lat": 51.48389,
    "long": 46.10528,
    "zone": "Europe/Volgograd"
  },
  {
    "name": "Elista",
    "country": "RU",
    "lat": 46.30778,
    "long": 44.25583,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Elektrostal’",
    "country": "RU",
    "lat": 55.78959,
    "long": 38.44671,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Dzerzhinsk",
    "country": "RU",
    "lat": 56.24143,
    "long": 43.45539,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Dimitrovgrad",
    "country": "RU",
    "lat": 54.21386,
    "long": 49.61838,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Derbent",
    "country": "RU",
    "lat": 42.06779,
    "long": 48.28987,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Cherkessk",
    "country": "RU",
    "lat": 44.22333,
    "long": 42.05778,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Cherepovets",
    "country": "RU",
    "lat": 59.13333,
    "long": 37.9,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Cherëmushki",
    "country": "RU",
    "lat": 55.66473,
    "long": 37.56135,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Cheboksary",
    "country": "RU",
    "lat": 56.13222,
    "long": 47.25194,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Bryansk",
    "country": "RU",
    "lat": 53.25209,
    "long": 34.37167,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Brateyevo",
    "country": "RU",
    "lat": 55.63755,
    "long": 37.76438,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Bogorodskoye",
    "country": "RU",
    "lat": 55.81353,
    "long": 37.71617,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Biryulëvo",
    "country": "RU",
    "lat": 55.58635,
    "long": 37.67781,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Bibirevo",
    "country": "RU",
    "lat": 55.88333,
    "long": 37.6,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Berezniki",
    "country": "RU",
    "lat": 59.4091,
    "long": 56.8204,
    "zone": "Asia/Yekaterinburg"
  },
  {
    "name": "Belgorod",
    "country": "RU",
    "lat": 50.61074,
    "long": 36.58015,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Bataysk",
    "country": "RU",
    "lat": 47.13975,
    "long": 39.75181,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Balashikha",
    "country": "RU",
    "lat": 55.80945,
    "long": 37.95806,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Balakovo",
    "country": "RU",
    "lat": 52.02782,
    "long": 47.8007,
    "zone": "Europe/Volgograd"
  },
  {
    "name": "Astrakhan’",
    "country": "RU",
    "lat": 46.34968,
    "long": 48.04076,
    "zone": "Europe/Volgograd"
  },
  {
    "name": "Arzamas",
    "country": "RU",
    "lat": 55.39485,
    "long": 43.83992,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Armavir",
    "country": "RU",
    "lat": 44.9892,
    "long": 41.1234,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Arkhangel’sk",
    "country": "RU",
    "lat": 64.5401,
    "long": 40.5433,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Al’met’yevsk",
    "country": "RU",
    "lat": 54.90442,
    "long": 52.3154,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Yekaterinburg",
    "country": "RU",
    "lat": 56.8519,
    "long": 60.6122,
    "zone": "Asia/Yekaterinburg"
  },
  {
    "name": "Tyumen",
    "country": "RU",
    "lat": 57.15222,
    "long": 65.52722,
    "zone": "Asia/Yekaterinburg"
  },
  {
    "name": "Tomsk",
    "country": "RU",
    "lat": 56.49771,
    "long": 84.97437,
    "zone": "Asia/Novosibirsk"
  },
  {
    "name": "Tobol’sk",
    "country": "RU",
    "lat": 58.19807,
    "long": 68.25457,
    "zone": "Asia/Yekaterinburg"
  },
  {
    "name": "Surgut",
    "country": "RU",
    "lat": 61.25,
    "long": 73.41667,
    "zone": "Asia/Yekaterinburg"
  },
  {
    "name": "Rubtsovsk",
    "country": "RU",
    "lat": 51.51473,
    "long": 81.20613,
    "zone": "Asia/Omsk"
  },
  {
    "name": "Prokop’yevsk",
    "country": "RU",
    "lat": 53.9059,
    "long": 86.719,
    "zone": "Asia/Novokuznetsk"
  },
  {
    "name": "Omsk",
    "country": "RU",
    "lat": 54.99244,
    "long": 73.36859,
    "zone": "Asia/Omsk"
  },
  {
    "name": "Noyabrsk",
    "country": "RU",
    "lat": 63.19309,
    "long": 75.43728,
    "zone": "Asia/Yekaterinburg"
  },
  {
    "name": "Novosibirsk",
    "country": "RU",
    "lat": 55.0415,
    "long": 82.9346,
    "zone": "Asia/Novosibirsk"
  },
  {
    "name": "Novokuznetsk",
    "country": "RU",
    "lat": 53.7557,
    "long": 87.1099,
    "zone": "Asia/Novokuznetsk"
  },
  {
    "name": "Norilsk",
    "country": "RU",
    "lat": 69.3535,
    "long": 88.2027,
    "zone": "Asia/Krasnoyarsk"
  },
  {
    "name": "Nizhnevartovsk",
    "country": "RU",
    "lat": 60.9344,
    "long": 76.5531,
    "zone": "Asia/Yekaterinburg"
  },
  {
    "name": "Nefteyugansk",
    "country": "RU",
    "lat": 61.09979,
    "long": 72.60349,
    "zone": "Asia/Yekaterinburg"
  },
  {
    "name": "Miass",
    "country": "RU",
    "lat": 55.045,
    "long": 60.10833,
    "zone": "Asia/Yekaterinburg"
  },
  {
    "name": "Mezhdurechensk",
    "country": "RU",
    "lat": 53.69417,
    "long": 88.06028,
    "zone": "Asia/Novokuznetsk"
  },
  {
    "name": "Leninsk-Kuznetsky",
    "country": "RU",
    "lat": 54.6567,
    "long": 86.1737,
    "zone": "Asia/Novokuznetsk"
  },
  {
    "name": "Kyzyl",
    "country": "RU",
    "lat": 51.71472,
    "long": 94.45338,
    "zone": "Asia/Krasnoyarsk"
  },
  {
    "name": "Kurgan",
    "country": "RU",
    "lat": 55.45,
    "long": 65.33333,
    "zone": "Asia/Yekaterinburg"
  },
  {
    "name": "Krasnoyarsk",
    "country": "RU",
    "lat": 56.01839,
    "long": 92.86717,
    "zone": "Asia/Krasnoyarsk"
  },
  {
    "name": "Kiselëvsk",
    "country": "RU",
    "lat": 53.99,
    "long": 86.6621,
    "zone": "Asia/Novokuznetsk"
  },
  {
    "name": "Kemerovo",
    "country": "RU",
    "lat": 55.33333,
    "long": 86.08333,
    "zone": "Asia/Novokuznetsk"
  },
  {
    "name": "Kansk",
    "country": "RU",
    "lat": 56.20167,
    "long": 95.7175,
    "zone": "Asia/Krasnoyarsk"
  },
  {
    "name": "Kamensk-Ural’skiy",
    "country": "RU",
    "lat": 56.4185,
    "long": 61.9329,
    "zone": "Asia/Yekaterinburg"
  },
  {
    "name": "Chelyabinsk",
    "country": "RU",
    "lat": 55.15402,
    "long": 61.42915,
    "zone": "Asia/Yekaterinburg"
  },
  {
    "name": "Biysk",
    "country": "RU",
    "lat": 52.53639,
    "long": 85.20722,
    "zone": "Asia/Omsk"
  },
  {
    "name": "Barnaul",
    "country": "RU",
    "lat": 53.36056,
    "long": 83.76361,
    "zone": "Asia/Omsk"
  },
  {
    "name": "Achinsk",
    "country": "RU",
    "lat": 56.2694,
    "long": 90.4993,
    "zone": "Asia/Krasnoyarsk"
  },
  {
    "name": "Abakan",
    "country": "RU",
    "lat": 53.71556,
    "long": 91.42917,
    "zone": "Asia/Krasnoyarsk"
  },
  {
    "name": "Seversk",
    "country": "RU",
    "lat": 56.60056,
    "long": 84.88639,
    "zone": "Asia/Novosibirsk"
  },
  {
    "name": "Yakutsk",
    "country": "RU",
    "lat": 62.03389,
    "long": 129.73306,
    "zone": "Asia/Yakutsk"
  },
  {
    "name": "Vladivostok",
    "country": "RU",
    "lat": 43.10562,
    "long": 131.87353,
    "zone": "Asia/Vladivostok"
  },
  {
    "name": "Ust’-Ilimsk",
    "country": "RU",
    "lat": 58.00056,
    "long": 102.66194,
    "zone": "Asia/Irkutsk"
  },
  {
    "name": "Ussuriysk",
    "country": "RU",
    "lat": 43.80291,
    "long": 131.94578,
    "zone": "Asia/Vladivostok"
  },
  {
    "name": "Ulan-Ude",
    "country": "RU",
    "lat": 51.82721,
    "long": 107.60627,
    "zone": "Asia/Irkutsk"
  },
  {
    "name": "Nakhodka",
    "country": "RU",
    "lat": 42.81384,
    "long": 132.87348,
    "zone": "Asia/Vladivostok"
  },
  {
    "name": "Komsomolsk-on-Amur",
    "country": "RU",
    "lat": 50.55034,
    "long": 137.00995,
    "zone": "Asia/Vladivostok"
  },
  {
    "name": "Khabarovsk",
    "country": "RU",
    "lat": 48.48271,
    "long": 135.08379,
    "zone": "Asia/Vladivostok"
  },
  {
    "name": "Irkutsk",
    "country": "RU",
    "lat": 52.29778,
    "long": 104.29639,
    "zone": "Asia/Irkutsk"
  },
  {
    "name": "Chita",
    "country": "RU",
    "lat": 52.03171,
    "long": 113.50087,
    "zone": "Asia/Yakutsk"
  },
  {
    "name": "Blagoveshchensk",
    "country": "RU",
    "lat": 50.27961,
    "long": 127.5405,
    "zone": "Asia/Yakutsk"
  },
  {
    "name": "Artëm",
    "country": "RU",
    "lat": 43.3595,
    "long": 132.18887,
    "zone": "Asia/Vladivostok"
  },
  {
    "name": "Angarsk",
    "country": "RU",
    "lat": 52.53667,
    "long": 103.88639,
    "zone": "Asia/Irkutsk"
  },
  {
    "name": "Bratsk",
    "country": "RU",
    "lat": 56.1325,
    "long": 101.61417,
    "zone": "Asia/Irkutsk"
  },
  {
    "name": "Khabarovsk Vtoroy",
    "country": "RU",
    "lat": 48.43776,
    "long": 135.13329,
    "zone": "Asia/Vladivostok"
  },
  {
    "name": "Yuzhno-Sakhalinsk",
    "country": "RU",
    "lat": 46.95407,
    "long": 142.73603,
    "zone": "Asia/Sakhalin"
  },
  {
    "name": "Petropavlovsk-Kamchatsky",
    "country": "RU",
    "lat": 53.04444,
    "long": 158.65076,
    "zone": "Asia/Kamchatka"
  },
  {
    "name": "Chertanovo Yuzhnoye",
    "country": "RU",
    "lat": 55.59072,
    "long": 37.59519,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Orekhovo-Borisovo",
    "country": "RU",
    "lat": 55.61252,
    "long": 37.72639,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Petrogradka",
    "country": "RU",
    "lat": 59.96567,
    "long": 30.31154,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Vasyl'evsky Ostrov",
    "country": "RU",
    "lat": 59.94091,
    "long": 30.25377,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Kalininskiy",
    "country": "RU",
    "lat": 59.99675,
    "long": 30.3899,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Krasnogvargeisky",
    "country": "RU",
    "lat": 59.97305,
    "long": 30.47607,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Admiralteisky",
    "country": "RU",
    "lat": 59.90839,
    "long": 30.28484,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Akademicheskoe",
    "country": "RU",
    "lat": 60.01375,
    "long": 30.39471,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Centralniy",
    "country": "RU",
    "lat": 59.93111,
    "long": 30.36072,
    "zone": "Europe/Moscow"
  },
  {
    "name": "Kigali",
    "country": "RW",
    "lat": -1.94995,
    "long": 30.05885,
    "zone": "Africa/Kigali"
  },
  {
    "name": "Yanbu‘ al Baḩr",
    "country": "SA",
    "lat": 24.08912,
    "long": 38.06374,
    "zone": "Asia/Riyadh"
  },
  {
    "name": "Tabūk",
    "country": "SA",
    "lat": 28.3998,
    "long": 36.57151,
    "zone": "Asia/Riyadh"
  },
  {
    "name": "Sulţānah",
    "country": "SA",
    "lat": 24.49258,
    "long": 39.58572,
    "zone": "Asia/Riyadh"
  },
  {
    "name": "Sakākā",
    "country": "SA",
    "lat": 29.96974,
    "long": 40.20641,
    "zone": "Asia/Riyadh"
  },
  {
    "name": "Najrān",
    "country": "SA",
    "lat": 17.49326,
    "long": 44.12766,
    "zone": "Asia/Riyadh"
  },
  {
    "name": "Mecca",
    "country": "SA",
    "lat": 21.42664,
    "long": 39.82563,
    "zone": "Asia/Riyadh"
  },
  {
    "name": "Khamis Mushait",
    "country": "SA",
    "lat": 18.3,
    "long": 42.73333,
    "zone": "Asia/Riyadh"
  },
  {
    "name": "Jizan",
    "country": "SA",
    "lat": 16.88917,
    "long": 42.55111,
    "zone": "Asia/Riyadh"
  },
  {
    "name": "Jeddah",
    "country": "SA",
    "lat": 21.54238,
    "long": 39.19797,
    "zone": "Asia/Riyadh"
  },
  {
    "name": "Hayil",
    "country": "SA",
    "lat": 27.52188,
    "long": 41.69073,
    "zone": "Asia/Riyadh"
  },
  {
    "name": "Buraydah",
    "country": "SA",
    "lat": 26.32599,
    "long": 43.97497,
    "zone": "Asia/Riyadh"
  },
  {
    "name": "Ta’if",
    "country": "SA",
    "lat": 21.27028,
    "long": 40.41583,
    "zone": "Asia/Riyadh"
  },
  {
    "name": "Riyadh",
    "country": "SA",
    "lat": 24.68773,
    "long": 46.72185,
    "zone": "Asia/Riyadh"
  },
  {
    "name": "‘Ar‘ar",
    "country": "SA",
    "lat": 30.97531,
    "long": 41.03808,
    "zone": "Asia/Riyadh"
  },
  {
    "name": "Al Qurayyāt",
    "country": "SA",
    "lat": 31.33176,
    "long": 37.34282,
    "zone": "Asia/Riyadh"
  },
  {
    "name": "Al Mubarraz",
    "country": "SA",
    "lat": 25.41,
    "long": 49.58083,
    "zone": "Asia/Riyadh"
  },
  {
    "name": "Medina",
    "country": "SA",
    "lat": 24.46861,
    "long": 39.61417,
    "zone": "Asia/Riyadh"
  },
  {
    "name": "Khobar",
    "country": "SA",
    "lat": 26.27944,
    "long": 50.20833,
    "zone": "Asia/Riyadh"
  },
  {
    "name": "Al Jubayl",
    "country": "SA",
    "lat": 27.01122,
    "long": 49.65825,
    "zone": "Asia/Riyadh"
  },
  {
    "name": "Al Hufūf",
    "country": "SA",
    "lat": 25.36457,
    "long": 49.56532,
    "zone": "Asia/Riyadh"
  },
  {
    "name": "Dammam",
    "country": "SA",
    "lat": 26.43442,
    "long": 50.10326,
    "zone": "Asia/Riyadh"
  },
  {
    "name": "Abha",
    "country": "SA",
    "lat": 18.21639,
    "long": 42.50528,
    "zone": "Asia/Riyadh"
  },
  {
    "name": "Unaizah",
    "country": "SA",
    "lat": 26.08427,
    "long": 43.99355,
    "zone": "Asia/Riyadh"
  },
  {
    "name": "Wad Medani",
    "country": "SD",
    "lat": 14.40118,
    "long": 33.51989,
    "zone": "Africa/Khartoum"
  },
  {
    "name": "Omdurman",
    "country": "SD",
    "lat": 15.64453,
    "long": 32.47773,
    "zone": "Africa/Khartoum"
  },
  {
    "name": "Sinnar",
    "country": "SD",
    "lat": 13.56907,
    "long": 33.56718,
    "zone": "Africa/Khartoum"
  },
  {
    "name": "Rabak",
    "country": "SD",
    "lat": 13.18087,
    "long": 32.73999,
    "zone": "Africa/Khartoum"
  },
  {
    "name": "Kosti",
    "country": "SD",
    "lat": 13.1629,
    "long": 32.66347,
    "zone": "Africa/Khartoum"
  },
  {
    "name": "Kassala",
    "country": "SD",
    "lat": 15.45099,
    "long": 36.39998,
    "zone": "Africa/Khartoum"
  },
  {
    "name": "Port Sudan",
    "country": "SD",
    "lat": 19.61745,
    "long": 37.21644,
    "zone": "Africa/Khartoum"
  },
  {
    "name": "Atbara",
    "country": "SD",
    "lat": 17.70217,
    "long": 33.98638,
    "zone": "Africa/Khartoum"
  },
  {
    "name": "An Nuhūd",
    "country": "SD",
    "lat": 12.7,
    "long": 28.43333,
    "zone": "Africa/Khartoum"
  },
  {
    "name": "El Obeid",
    "country": "SD",
    "lat": 13.18421,
    "long": 30.21669,
    "zone": "Africa/Khartoum"
  },
  {
    "name": "Al Qadarif",
    "country": "SD",
    "lat": 14.03493,
    "long": 35.38344,
    "zone": "Africa/Khartoum"
  },
  {
    "name": "Al Manāqil",
    "country": "SD",
    "lat": 14.2459,
    "long": 32.9891,
    "zone": "Africa/Khartoum"
  },
  {
    "name": "Khartoum",
    "country": "SD",
    "lat": 15.55177,
    "long": 32.53241,
    "zone": "Africa/Khartoum"
  },
  {
    "name": "Geneina",
    "country": "SD",
    "lat": 13.45262,
    "long": 22.44725,
    "zone": "Africa/Khartoum"
  },
  {
    "name": "El Fasher",
    "country": "SD",
    "lat": 13.62793,
    "long": 25.34936,
    "zone": "Africa/Khartoum"
  },
  {
    "name": "El Daein",
    "country": "SD",
    "lat": 11.46186,
    "long": 26.12583,
    "zone": "Africa/Khartoum"
  },
  {
    "name": "Ed Damer",
    "country": "SD",
    "lat": 17.59278,
    "long": 33.95917,
    "zone": "Africa/Khartoum"
  },
  {
    "name": "Ad-Damazin",
    "country": "SD",
    "lat": 11.7891,
    "long": 34.3592,
    "zone": "Africa/Khartoum"
  },
  {
    "name": "Västerås",
    "country": "SE",
    "lat": 59.61617,
    "long": 16.55276,
    "zone": "Europe/Stockholm"
  },
  {
    "name": "Uppsala",
    "country": "SE",
    "lat": 59.85882,
    "long": 17.63889,
    "zone": "Europe/Stockholm"
  },
  {
    "name": "Stockholm",
    "country": "SE",
    "lat": 59.33258,
    "long": 18.0649,
    "zone": "Europe/Stockholm"
  },
  {
    "name": "Malmö",
    "country": "SE",
    "lat": 55.60587,
    "long": 13.00073,
    "zone": "Europe/Stockholm"
  },
  {
    "name": "Göteborg",
    "country": "SE",
    "lat": 57.70716,
    "long": 11.96679,
    "zone": "Europe/Stockholm"
  },
  {
    "name": "Singapore",
    "country": "SG",
    "lat": 1.28967,
    "long": 103.85007,
    "zone": "Asia/Singapore"
  },
  {
    "name": "Ljubljana",
    "country": "SI",
    "lat": 46.05108,
    "long": 14.50513,
    "zone": "Europe/Ljubljana"
  },
  {
    "name": "Košice",
    "country": "SK",
    "lat": 48.71395,
    "long": 21.25808,
    "zone": "Europe/Bratislava"
  },
  {
    "name": "Bratislava",
    "country": "SK",
    "lat": 48.14816,
    "long": 17.10674,
    "zone": "Europe/Bratislava"
  },
  {
    "name": "Kenema",
    "country": "SL",
    "lat": 7.87687,
    "long": -11.19025,
    "zone": "Africa/Freetown"
  },
  {
    "name": "Freetown",
    "country": "SL",
    "lat": 8.484,
    "long": -13.22994,
    "zone": "Africa/Freetown"
  },
  {
    "name": "Bo",
    "country": "SL",
    "lat": 7.96472,
    "long": -11.73833,
    "zone": "Africa/Freetown"
  },
  {
    "name": "Ziguinchor",
    "country": "SN",
    "lat": 12.58333,
    "long": -16.27194,
    "zone": "Africa/Dakar"
  },
  {
    "name": "Touba",
    "country": "SN",
    "lat": 14.85,
    "long": -15.88333,
    "zone": "Africa/Dakar"
  },
  {
    "name": "Tiébo",
    "country": "SN",
    "lat": 14.63333,
    "long": -16.23333,
    "zone": "Africa/Dakar"
  },
  {
    "name": "Thiès Nones",
    "country": "SN",
    "lat": 14.78333,
    "long": -16.96667,
    "zone": "Africa/Dakar"
  },
  {
    "name": "Saint-Louis",
    "country": "SN",
    "lat": 16.01793,
    "long": -16.48962,
    "zone": "Africa/Dakar"
  },
  {
    "name": "Pikine",
    "country": "SN",
    "lat": 14.76457,
    "long": -17.39071,
    "zone": "Africa/Dakar"
  },
  {
    "name": "Kaolack",
    "country": "SN",
    "lat": 14.1825,
    "long": -16.25333,
    "zone": "Africa/Dakar"
  },
  {
    "name": "Grand Dakar",
    "country": "SN",
    "lat": 14.71331,
    "long": -17.45472,
    "zone": "Africa/Dakar"
  },
  {
    "name": "Dakar",
    "country": "SN",
    "lat": 14.6937,
    "long": -17.44406,
    "zone": "Africa/Dakar"
  },
  {
    "name": "Mogadishu",
    "country": "SO",
    "lat": 2.03711,
    "long": 45.34375,
    "zone": "Africa/Mogadishu"
  },
  {
    "name": "Marka",
    "country": "SO",
    "lat": 1.71594,
    "long": 44.77166,
    "zone": "Africa/Mogadishu"
  },
  {
    "name": "Kismayo",
    "country": "SO",
    "lat": -0.35817,
    "long": 42.54536,
    "zone": "Africa/Mogadishu"
  },
  {
    "name": "Jamaame",
    "country": "SO",
    "lat": 0.06968,
    "long": 42.74497,
    "zone": "Africa/Mogadishu"
  },
  {
    "name": "Hargeysa",
    "country": "SO",
    "lat": 9.56,
    "long": 44.065,
    "zone": "Africa/Mogadishu"
  },
  {
    "name": "Berbera",
    "country": "SO",
    "lat": 10.43959,
    "long": 45.01432,
    "zone": "Africa/Mogadishu"
  },
  {
    "name": "Baidoa",
    "country": "SO",
    "lat": 3.11383,
    "long": 43.6498,
    "zone": "Africa/Mogadishu"
  },
  {
    "name": "Paramaribo",
    "country": "SR",
    "lat": 5.86638,
    "long": -55.16682,
    "zone": "America/Paramaribo"
  },
  {
    "name": "Wau",
    "country": "SS",
    "lat": 7.70286,
    "long": 27.9953,
    "zone": "Africa/Juba"
  },
  {
    "name": "Malakal",
    "country": "SS",
    "lat": 9.53342,
    "long": 31.66049,
    "zone": "Africa/Juba"
  },
  {
    "name": "Juba",
    "country": "SS",
    "lat": 4.85165,
    "long": 31.58247,
    "zone": "Africa/Juba"
  },
  {
    "name": "Soyapango",
    "country": "SV",
    "lat": 13.71024,
    "long": -89.13989,
    "zone": "America/El_Salvador"
  },
  {
    "name": "Santa Ana",
    "country": "SV",
    "lat": 13.99417,
    "long": -89.55972,
    "zone": "America/El_Salvador"
  },
  {
    "name": "San Salvador",
    "country": "SV",
    "lat": 13.68935,
    "long": -89.18718,
    "zone": "America/El_Salvador"
  },
  {
    "name": "San Miguel",
    "country": "SV",
    "lat": 13.48333,
    "long": -88.18333,
    "zone": "America/El_Salvador"
  },
  {
    "name": "Santa Tecla",
    "country": "SV",
    "lat": 13.67694,
    "long": -89.27972,
    "zone": "America/El_Salvador"
  },
  {
    "name": "Mejicanos",
    "country": "SV",
    "lat": 13.74028,
    "long": -89.21306,
    "zone": "America/El_Salvador"
  },
  {
    "name": "Apopa",
    "country": "SV",
    "lat": 13.80722,
    "long": -89.17917,
    "zone": "America/El_Salvador"
  },
  {
    "name": "Idlib",
    "country": "SY",
    "lat": 35.93062,
    "long": 36.63393,
    "zone": "Asia/Damascus"
  },
  {
    "name": "Homs",
    "country": "SY",
    "lat": 34.72682,
    "long": 36.72339,
    "zone": "Asia/Damascus"
  },
  {
    "name": "Ḩamāh",
    "country": "SY",
    "lat": 35.13179,
    "long": 36.75783,
    "zone": "Asia/Damascus"
  },
  {
    "name": "Aleppo",
    "country": "SY",
    "lat": 36.20124,
    "long": 37.16117,
    "zone": "Asia/Damascus"
  },
  {
    "name": "Douma",
    "country": "SY",
    "lat": 33.57175,
    "long": 36.4027,
    "zone": "Asia/Damascus"
  },
  {
    "name": "Damascus",
    "country": "SY",
    "lat": 33.5102,
    "long": 36.29128,
    "zone": "Asia/Damascus"
  },
  {
    "name": "Deir ez-Zor",
    "country": "SY",
    "lat": 35.33588,
    "long": 40.14084,
    "zone": "Asia/Damascus"
  },
  {
    "name": "Ar Raqqah",
    "country": "SY",
    "lat": 35.95283,
    "long": 39.00788,
    "zone": "Asia/Damascus"
  },
  {
    "name": "Latakia",
    "country": "SY",
    "lat": 35.53168,
    "long": 35.79011,
    "zone": "Asia/Damascus"
  },
  {
    "name": "Al Bāb",
    "country": "SY",
    "lat": 36.36994,
    "long": 37.51788,
    "zone": "Asia/Damascus"
  },
  {
    "name": "Manzini",
    "country": "SZ",
    "lat": -26.49884,
    "long": 31.38004,
    "zone": "Africa/Mbabane"
  },
  {
    "name": "Sagh",
    "country": "TD",
    "lat": 9.1429,
    "long": 18.3923,
    "zone": "Africa/Ndjamena"
  },
  {
    "name": "N'Djamena",
    "country": "TD",
    "lat": 12.10672,
    "long": 15.0444,
    "zone": "Africa/Ndjamena"
  },
  {
    "name": "Moundou",
    "country": "TD",
    "lat": 8.56667,
    "long": 16.08333,
    "zone": "Africa/Ndjamena"
  },
  {
    "name": "Sokodé",
    "country": "TG",
    "lat": 8.98333,
    "long": 1.13333,
    "zone": "Africa/Lome"
  },
  {
    "name": "Lomé",
    "country": "TG",
    "lat": 6.13748,
    "long": 1.21227,
    "zone": "Africa/Lome"
  },
  {
    "name": "Kara",
    "country": "TG",
    "lat": 9.55111,
    "long": 1.18611,
    "zone": "Africa/Lome"
  },
  {
    "name": "Surat Thani",
    "country": "TH",
    "lat": 9.14011,
    "long": 99.33311,
    "zone": "Asia/Bangkok"
  },
  {
    "name": "Nakhon Si Thammarat",
    "country": "TH",
    "lat": 8.43333,
    "long": 99.96667,
    "zone": "Asia/Bangkok"
  },
  {
    "name": "Lampang",
    "country": "TH",
    "lat": 18.29232,
    "long": 99.49277,
    "zone": "Asia/Bangkok"
  },
  {
    "name": "Chiang Mai",
    "country": "TH",
    "lat": 18.79038,
    "long": 98.98468,
    "zone": "Asia/Bangkok"
  },
  {
    "name": "Udon Thani",
    "country": "TH",
    "lat": 17.41567,
    "long": 102.78589,
    "zone": "Asia/Bangkok"
  },
  {
    "name": "Ubon Ratchathani",
    "country": "TH",
    "lat": 15.23844,
    "long": 104.84866,
    "zone": "Asia/Bangkok"
  },
  {
    "name": "Si Racha",
    "country": "TH",
    "lat": 13.17372,
    "long": 100.93111,
    "zone": "Asia/Bangkok"
  },
  {
    "name": "Samut Prakan",
    "country": "TH",
    "lat": 13.59934,
    "long": 100.59675,
    "zone": "Asia/Bangkok"
  },
  {
    "name": "Rayong",
    "country": "TH",
    "lat": 12.68095,
    "long": 101.25798,
    "zone": "Asia/Bangkok"
  },
  {
    "name": "Phra Pradaeng",
    "country": "TH",
    "lat": 13.65855,
    "long": 100.53362,
    "zone": "Asia/Bangkok"
  },
  {
    "name": "Phitsanulok",
    "country": "TH",
    "lat": 16.82481,
    "long": 100.25858,
    "zone": "Asia/Bangkok"
  },
  {
    "name": "Pak Kret",
    "country": "TH",
    "lat": 13.91301,
    "long": 100.49883,
    "zone": "Asia/Bangkok"
  },
  {
    "name": "Mueang Nonthaburi",
    "country": "TH",
    "lat": 13.86075,
    "long": 100.51477,
    "zone": "Asia/Bangkok"
  },
  {
    "name": "Nakhon Ratchasima",
    "country": "TH",
    "lat": 14.97066,
    "long": 102.10196,
    "zone": "Asia/Bangkok"
  },
  {
    "name": "Nakhon Pathom",
    "country": "TH",
    "lat": 13.8196,
    "long": 100.04427,
    "zone": "Asia/Bangkok"
  },
  {
    "name": "Bangkok",
    "country": "TH",
    "lat": 13.75398,
    "long": 100.50144,
    "zone": "Asia/Bangkok"
  },
  {
    "name": "Khon Kaen",
    "country": "TH",
    "lat": 16.44671,
    "long": 102.833,
    "zone": "Asia/Bangkok"
  },
  {
    "name": "Khlong Luang",
    "country": "TH",
    "lat": 14.06467,
    "long": 100.64578,
    "zone": "Asia/Bangkok"
  },
  {
    "name": "Hat Yai",
    "country": "TH",
    "lat": 7.00836,
    "long": 100.47668,
    "zone": "Asia/Bangkok"
  },
  {
    "name": "Chon Buri",
    "country": "TH",
    "lat": 13.3622,
    "long": 100.98345,
    "zone": "Asia/Bangkok"
  },
  {
    "name": "Ban Rangsit",
    "country": "TH",
    "lat": 14.02775,
    "long": 100.75603,
    "zone": "Asia/Bangkok"
  },
  {
    "name": "Dushanbe",
    "country": "TJ",
    "lat": 38.53575,
    "long": 68.77905,
    "zone": "Asia/Dushanbe"
  },
  {
    "name": "Khŭjand",
    "country": "TJ",
    "lat": 40.28256,
    "long": 69.62216,
    "zone": "Asia/Dushanbe"
  },
  {
    "name": "Dili",
    "country": "TL",
    "lat": -8.55861,
    "long": 125.57361,
    "zone": "Asia/Dili"
  },
  {
    "name": "Ashgabat",
    "country": "TM",
    "lat": 37.95,
    "long": 58.38333,
    "zone": "Asia/Ashgabat"
  },
  {
    "name": "Daşoguz",
    "country": "TM",
    "lat": 41.83625,
    "long": 59.96661,
    "zone": "Asia/Ashgabat"
  },
  {
    "name": "Mary",
    "country": "TM",
    "lat": 37.59378,
    "long": 61.83031,
    "zone": "Asia/Ashgabat"
  },
  {
    "name": "Türkmenabat",
    "country": "TM",
    "lat": 39.07328,
    "long": 63.57861,
    "zone": "Asia/Ashgabat"
  },
  {
    "name": "Tunis",
    "country": "TN",
    "lat": 36.81897,
    "long": 10.16579,
    "zone": "Africa/Tunis"
  },
  {
    "name": "Sousse",
    "country": "TN",
    "lat": 35.82539,
    "long": 10.63699,
    "zone": "Africa/Tunis"
  },
  {
    "name": "Sfax",
    "country": "TN",
    "lat": 34.74056,
    "long": 10.76028,
    "zone": "Africa/Tunis"
  },
  {
    "name": "Gabès",
    "country": "TN",
    "lat": 33.88146,
    "long": 10.0982,
    "zone": "Africa/Tunis"
  },
  {
    "name": "Midoun",
    "country": "TN",
    "lat": 33.80813,
    "long": 10.99228,
    "zone": "Africa/Tunis"
  },
  {
    "name": "Bizerte",
    "country": "TN",
    "lat": 37.27442,
    "long": 9.87391,
    "zone": "Africa/Tunis"
  },
  {
    "name": "Kairouan",
    "country": "TN",
    "lat": 35.6781,
    "long": 10.09633,
    "zone": "Africa/Tunis"
  },
  {
    "name": "Viranşehir",
    "country": "TR",
    "lat": 37.22349,
    "long": 39.75519,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Van",
    "country": "TR",
    "lat": 38.49457,
    "long": 43.38323,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Uşak",
    "country": "TR",
    "lat": 38.67351,
    "long": 29.4058,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Şanlıurfa",
    "country": "TR",
    "lat": 37.16708,
    "long": 38.79392,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Turgutlu",
    "country": "TR",
    "lat": 38.49533,
    "long": 27.6997,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Tarsus",
    "country": "TR",
    "lat": 36.91876,
    "long": 34.8784,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Siverek",
    "country": "TR",
    "lat": 37.75503,
    "long": 39.31667,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Sivas",
    "country": "TR",
    "lat": 39.74833,
    "long": 37.01611,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Siirt",
    "country": "TR",
    "lat": 37.93262,
    "long": 41.94025,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Osmaniye",
    "country": "TR",
    "lat": 37.07417,
    "long": 36.24778,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Nazilli",
    "country": "TR",
    "lat": 37.91631,
    "long": 28.32225,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Mercin",
    "country": "TR",
    "lat": 36.79526,
    "long": 34.61792,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Manisa",
    "country": "TR",
    "lat": 38.61202,
    "long": 27.42647,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Malatya",
    "country": "TR",
    "lat": 38.35018,
    "long": 38.31667,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Kütahya",
    "country": "TR",
    "lat": 39.42417,
    "long": 29.98333,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Konya",
    "country": "TR",
    "lat": 37.87135,
    "long": 32.48464,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Kızıltepe",
    "country": "TR",
    "lat": 37.19319,
    "long": 40.58799,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Kırıkkale",
    "country": "TR",
    "lat": 39.84528,
    "long": 33.50639,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Kayseri",
    "country": "TR",
    "lat": 38.73222,
    "long": 35.48528,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Karaman",
    "country": "TR",
    "lat": 37.18111,
    "long": 33.215,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Kahramanmaraş",
    "country": "TR",
    "lat": 37.5847,
    "long": 36.92641,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "İzmir",
    "country": "TR",
    "lat": 38.41273,
    "long": 27.13838,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Isparta",
    "country": "TR",
    "lat": 37.76444,
    "long": 30.55222,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "İskenderun",
    "country": "TR",
    "lat": 36.58718,
    "long": 36.17347,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Gaziantep",
    "country": "TR",
    "lat": 37.05944,
    "long": 37.3825,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Eskişehir",
    "country": "TR",
    "lat": 39.77667,
    "long": 30.52056,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Erzurum",
    "country": "TR",
    "lat": 39.90861,
    "long": 41.27694,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Erzincan",
    "country": "TR",
    "lat": 39.73919,
    "long": 39.49015,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Elazığ",
    "country": "TR",
    "lat": 38.67431,
    "long": 39.22321,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Diyarbakır",
    "country": "TR",
    "lat": 37.91363,
    "long": 40.21721,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Denizli",
    "country": "TR",
    "lat": 37.77417,
    "long": 29.0875,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Batman",
    "country": "TR",
    "lat": 37.88738,
    "long": 41.13221,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Balıkesir",
    "country": "TR",
    "lat": 39.64917,
    "long": 27.88611,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Aydın",
    "country": "TR",
    "lat": 37.84501,
    "long": 27.83963,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Antalya",
    "country": "TR",
    "lat": 36.90812,
    "long": 30.69556,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Antakya",
    "country": "TR",
    "lat": 36.20655,
    "long": 36.15722,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Ankara",
    "country": "TR",
    "lat": 39.91987,
    "long": 32.85427,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Alanya",
    "country": "TR",
    "lat": 36.54375,
    "long": 31.99982,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Aksaray",
    "country": "TR",
    "lat": 38.37255,
    "long": 34.02537,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Afyonkarahisar",
    "country": "TR",
    "lat": 38.75667,
    "long": 30.54333,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Adıyaman",
    "country": "TR",
    "lat": 37.76441,
    "long": 38.27629,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Adana",
    "country": "TR",
    "lat": 37.00167,
    "long": 35.32889,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Batikent",
    "country": "TR",
    "lat": 39.96833,
    "long": 32.73083,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Zonguldak",
    "country": "TR",
    "lat": 41.45139,
    "long": 31.79305,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Zeytinburnu",
    "country": "TR",
    "lat": 40.99441,
    "long": 28.90417,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Üsküdar",
    "country": "TR",
    "lat": 41.02252,
    "long": 29.02369,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Umraniye",
    "country": "TR",
    "lat": 41.01643,
    "long": 29.12476,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Turhal",
    "country": "TR",
    "lat": 40.3875,
    "long": 36.08111,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Trabzon",
    "country": "TR",
    "lat": 41.005,
    "long": 39.72694,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Tokat",
    "country": "TR",
    "lat": 40.31389,
    "long": 36.55444,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Tekirdağ",
    "country": "TR",
    "lat": 40.97801,
    "long": 27.50852,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Şişli",
    "country": "TR",
    "lat": 41.06046,
    "long": 28.98717,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Samsun",
    "country": "TR",
    "lat": 41.28667,
    "long": 36.33,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Ordu",
    "country": "TR",
    "lat": 40.98472,
    "long": 37.87889,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Mustafakemalpaşa",
    "country": "TR",
    "lat": 40.03815,
    "long": 28.40866,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Maltepe",
    "country": "TR",
    "lat": 40.93567,
    "long": 29.15507,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "İzmit",
    "country": "TR",
    "lat": 40.76694,
    "long": 29.91694,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "İstanbul",
    "country": "TR",
    "lat": 41.01384,
    "long": 28.94966,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Inegol",
    "country": "TR",
    "lat": 40.07806,
    "long": 29.51333,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Gebze",
    "country": "TR",
    "lat": 40.80276,
    "long": 29.43068,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Esenyurt",
    "country": "TR",
    "lat": 41.02697,
    "long": 28.67732,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Esenler",
    "country": "TR",
    "lat": 41.0435,
    "long": 28.87619,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Edirne",
    "country": "TR",
    "lat": 41.67719,
    "long": 26.55597,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Çorum",
    "country": "TR",
    "lat": 40.54889,
    "long": 34.95333,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Çorlu",
    "country": "TR",
    "lat": 41.15917,
    "long": 27.8,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Bursa",
    "country": "TR",
    "lat": 40.19266,
    "long": 29.08403,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Bandırma",
    "country": "TR",
    "lat": 40.35222,
    "long": 27.97667,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Bağcılar",
    "country": "TR",
    "lat": 41.03903,
    "long": 28.85671,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Adapazarı",
    "country": "TR",
    "lat": 40.78056,
    "long": 30.40333,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Ataşehir",
    "country": "TR",
    "lat": 40.9833,
    "long": 29.1167,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Başakşehir",
    "country": "TR",
    "lat": 41.09307,
    "long": 28.80203,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Beylikdüzü",
    "country": "TR",
    "lat": 40.982,
    "long": 28.6399,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Büyükçekmece",
    "country": "TR",
    "lat": 41.02072,
    "long": 28.58502,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Çankaya",
    "country": "TR",
    "lat": 39.9179,
    "long": 32.86268,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Bahçelievler",
    "country": "TR",
    "lat": 41.00231,
    "long": 28.8598,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Sultangazi",
    "country": "TR",
    "lat": 41.10652,
    "long": 28.86847,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Sultanbeyli",
    "country": "TR",
    "lat": 40.96072,
    "long": 29.27067,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Sancaktepe",
    "country": "TR",
    "lat": 41.00244,
    "long": 29.23187,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Karabağlar",
    "country": "TR",
    "lat": 38.37396,
    "long": 27.1352,
    "zone": "Europe/Istanbul"
  },
  {
    "name": "Laventille",
    "country": "TT",
    "lat": 10.64917,
    "long": -61.49889,
    "zone": "America/Port_of_Spain"
  },
  {
    "name": "Douliu",
    "country": "TW",
    "lat": 23.70944,
    "long": 120.54333,
    "zone": "Asia/Taipei"
  },
  {
    "name": "Taipei",
    "country": "TW",
    "lat": 25.04776,
    "long": 121.53185,
    "zone": "Asia/Taipei"
  },
  {
    "name": "Tainan",
    "country": "TW",
    "lat": 22.99083,
    "long": 120.21333,
    "zone": "Asia/Taipei"
  },
  {
    "name": "Taichung",
    "country": "TW",
    "lat": 24.1469,
    "long": 120.6839,
    "zone": "Asia/Taipei"
  },
  {
    "name": "Banqiao",
    "country": "TW",
    "lat": 25.01427,
    "long": 121.46719,
    "zone": "Asia/Taipei"
  },
  {
    "name": "Nantou",
    "country": "TW",
    "lat": 23.91566,
    "long": 120.66387,
    "zone": "Asia/Taipei"
  },
  {
    "name": "Kaohsiung",
    "country": "TW",
    "lat": 22.61626,
    "long": 120.31333,
    "zone": "Asia/Taipei"
  },
  {
    "name": "Hualian",
    "country": "TW",
    "lat": 23.97694,
    "long": 121.60444,
    "zone": "Asia/Taipei"
  },
  {
    "name": "Hsinchu",
    "country": "TW",
    "lat": 24.80361,
    "long": 120.96861,
    "zone": "Asia/Taipei"
  },
  {
    "name": "Keelung",
    "country": "TW",
    "lat": 25.12825,
    "long": 121.7419,
    "zone": "Asia/Taipei"
  },
  {
    "name": "Taoyuan City",
    "country": "TW",
    "lat": 24.99368,
    "long": 121.29696,
    "zone": "Asia/Taipei"
  },
  {
    "name": "Taitung City",
    "country": "TW",
    "lat": 22.7583,
    "long": 121.1444,
    "zone": "Asia/Taipei"
  },
  {
    "name": "Zanzibar",
    "country": "TZ",
    "lat": -6.16394,
    "long": 39.19793,
    "zone": "Africa/Dar_es_Salaam"
  },
  {
    "name": "Tanga",
    "country": "TZ",
    "lat": -5.06893,
    "long": 39.09875,
    "zone": "Africa/Dar_es_Salaam"
  },
  {
    "name": "Tabora",
    "country": "TZ",
    "lat": -5.01622,
    "long": 32.82663,
    "zone": "Africa/Dar_es_Salaam"
  },
  {
    "name": "Shinyanga",
    "country": "TZ",
    "lat": -3.66393,
    "long": 33.42118,
    "zone": "Africa/Dar_es_Salaam"
  },
  {
    "name": "Mwanza",
    "country": "TZ",
    "lat": -2.51667,
    "long": 32.9,
    "zone": "Africa/Dar_es_Salaam"
  },
  {
    "name": "Musoma",
    "country": "TZ",
    "lat": -1.5,
    "long": 33.8,
    "zone": "Africa/Dar_es_Salaam"
  },
  {
    "name": "Moshi",
    "country": "TZ",
    "lat": -3.35,
    "long": 37.33333,
    "zone": "Africa/Dar_es_Salaam"
  },
  {
    "name": "Morogoro",
    "country": "TZ",
    "lat": -6.82102,
    "long": 37.66122,
    "zone": "Africa/Dar_es_Salaam"
  },
  {
    "name": "Mbeya",
    "country": "TZ",
    "lat": -8.9,
    "long": 33.45,
    "zone": "Africa/Dar_es_Salaam"
  },
  {
    "name": "Kigoma",
    "country": "TZ",
    "lat": -4.87694,
    "long": 29.62667,
    "zone": "Africa/Dar_es_Salaam"
  },
  {
    "name": "Katumba",
    "country": "TZ",
    "lat": -9.23333,
    "long": 33.61667,
    "zone": "Africa/Dar_es_Salaam"
  },
  {
    "name": "Iringa",
    "country": "TZ",
    "lat": -7.76667,
    "long": 35.7,
    "zone": "Africa/Dar_es_Salaam"
  },
  {
    "name": "Dodoma",
    "country": "TZ",
    "lat": -6.17221,
    "long": 35.73947,
    "zone": "Africa/Dar_es_Salaam"
  },
  {
    "name": "Dar es Salaam",
    "country": "TZ",
    "lat": -6.82349,
    "long": 39.26951,
    "zone": "Africa/Dar_es_Salaam"
  },
  {
    "name": "Arusha",
    "country": "TZ",
    "lat": -3.36667,
    "long": 36.68333,
    "zone": "Africa/Dar_es_Salaam"
  },
  {
    "name": "Songea",
    "country": "TZ",
    "lat": -10.68333,
    "long": 35.65,
    "zone": "Africa/Dar_es_Salaam"
  },
  {
    "name": "Zhytomyr",
    "country": "UA",
    "lat": 50.26487,
    "long": 28.67669,
    "zone": "Europe/Kiev"
  },
  {
    "name": "Zaporizhzhya",
    "country": "UA",
    "lat": 47.82289,
    "long": 35.19031,
    "zone": "Europe/Zaporozhye"
  },
  {
    "name": "Yevpatoriya",
    "country": "UA",
    "lat": 45.20091,
    "long": 33.36655,
    "zone": "Europe/Simferopol"
  },
  {
    "name": "Yenakiyeve",
    "country": "UA",
    "lat": 48.23331,
    "long": 38.21137,
    "zone": "Europe/Kiev"
  },
  {
    "name": "Vinnytsya",
    "country": "UA",
    "lat": 49.23278,
    "long": 28.48097,
    "zone": "Europe/Kiev"
  },
  {
    "name": "Uzhhorod",
    "country": "UA",
    "lat": 48.61667,
    "long": 22.3,
    "zone": "Europe/Uzhgorod"
  },
  {
    "name": "Ternopil’",
    "country": "UA",
    "lat": 49.55589,
    "long": 25.60556,
    "zone": "Europe/Kiev"
  },
  {
    "name": "Syevyerodonets’k",
    "country": "UA",
    "lat": 48.94832,
    "long": 38.49166,
    "zone": "Europe/Zaporozhye"
  },
  {
    "name": "Sumy",
    "country": "UA",
    "lat": 50.9216,
    "long": 34.80029,
    "zone": "Europe/Kiev"
  },
  {
    "name": "Sloviansk",
    "country": "UA",
    "lat": 48.86667,
    "long": 37.61667,
    "zone": "Europe/Kiev"
  },
  {
    "name": "Simferopol",
    "country": "UA",
    "lat": 44.95719,
    "long": 34.11079,
    "zone": "Europe/Simferopol"
  },
  {
    "name": "Sevastopol",
    "country": "UA",
    "lat": 44.58883,
    "long": 33.5224,
    "zone": "Europe/Simferopol"
  },
  {
    "name": "Rivne",
    "country": "UA",
    "lat": 50.62308,
    "long": 26.22743,
    "zone": "Europe/Kiev"
  },
  {
    "name": "Poltava",
    "country": "UA",
    "lat": 49.59373,
    "long": 34.54073,
    "zone": "Europe/Kiev"
  },
  {
    "name": "Pavlohrad",
    "country": "UA",
    "lat": 48.53426,
    "long": 35.87098,
    "zone": "Europe/Kiev"
  },
  {
    "name": "Oleksandriya",
    "country": "UA",
    "lat": 48.66961,
    "long": 33.11593,
    "zone": "Europe/Kiev"
  },
  {
    "name": "Odessa",
    "country": "UA",
    "lat": 46.47747,
    "long": 30.73262,
    "zone": "Europe/Kiev"
  },
  {
    "name": "Nikopol’",
    "country": "UA",
    "lat": 47.57119,
    "long": 34.39637,
    "zone": "Europe/Kiev"
  },
  {
    "name": "Mykolayiv",
    "country": "UA",
    "lat": 46.96591,
    "long": 31.9974,
    "zone": "Europe/Kiev"
  },
  {
    "name": "Melitopol’",
    "country": "UA",
    "lat": 46.84891,
    "long": 35.36533,
    "zone": "Europe/Zaporozhye"
  },
  {
    "name": "Mariupol",
    "country": "UA",
    "lat": 47.09514,
    "long": 37.54131,
    "zone": "Europe/Kiev"
  },
  {
    "name": "Makiyivka",
    "country": "UA",
    "lat": 48.04782,
    "long": 37.92576,
    "zone": "Europe/Kiev"
  },
  {
    "name": "L'viv",
    "country": "UA",
    "lat": 49.83826,
    "long": 24.02324,
    "zone": "Europe/Kiev"
  },
  {
    "name": "Luts’k",
    "country": "UA",
    "lat": 50.75932,
    "long": 25.34244,
    "zone": "Europe/Kiev"
  },
  {
    "name": "Luhansk",
    "country": "UA",
    "lat": 48.56705,
    "long": 39.31706,
    "zone": "Europe/Zaporozhye"
  },
  {
    "name": "Lysychans’k",
    "country": "UA",
    "lat": 48.90485,
    "long": 38.44207,
    "zone": "Europe/Zaporozhye"
  },
  {
    "name": "Kiev",
    "country": "UA",
    "lat": 50.45466,
    "long": 30.5238,
    "zone": "Europe/Kiev"
  },
  {
    "name": "Kryvyi Rih",
    "country": "UA",
    "lat": 47.90966,
    "long": 33.38044,
    "zone": "Europe/Kiev"
  },
  {
    "name": "Kremenchuk",
    "country": "UA",
    "lat": 49.06802,
    "long": 33.42041,
    "zone": "Europe/Kiev"
  },
  {
    "name": "Kramators’k",
    "country": "UA",
    "lat": 48.72305,
    "long": 37.55629,
    "zone": "Europe/Kiev"
  },
  {
    "name": "Kirovohrad",
    "country": "UA",
    "lat": 48.5132,
    "long": 32.2597,
    "zone": "Europe/Kiev"
  },
  {
    "name": "Khmel’nyts’kyy",
    "country": "UA",
    "lat": 49.42161,
    "long": 26.99653,
    "zone": "Europe/Kiev"
  },
  {
    "name": "Kherson",
    "country": "UA",
    "lat": 46.65581,
    "long": 32.6178,
    "zone": "Europe/Kiev"
  },
  {
    "name": "Kharkiv",
    "country": "UA",
    "lat": 49.98081,
    "long": 36.25272,
    "zone": "Europe/Kiev"
  },
  {
    "name": "Kerch",
    "country": "UA",
    "lat": 45.3607,
    "long": 36.4706,
    "zone": "Europe/Simferopol"
  },
  {
    "name": "Ivano-Frankivs’k",
    "country": "UA",
    "lat": 48.9215,
    "long": 24.70972,
    "zone": "Europe/Kiev"
  },
  {
    "name": "Horlivka",
    "country": "UA",
    "lat": 48.33576,
    "long": 38.05325,
    "zone": "Europe/Kiev"
  },
  {
    "name": "Donetsk",
    "country": "UA",
    "lat": 48.023,
    "long": 37.80224,
    "zone": "Europe/Kiev"
  },
  {
    "name": "Dnipropetrovsk",
    "country": "UA",
    "lat": 48.45,
    "long": 34.98333,
    "zone": "Europe/Kiev"
  },
  {
    "name": "Dniprodzerzhyns’k",
    "country": "UA",
    "lat": 48.51134,
    "long": 34.6021,
    "zone": "Europe/Kiev"
  },
  {
    "name": "Chernivtsi",
    "country": "UA",
    "lat": 48.29149,
    "long": 25.94034,
    "zone": "Europe/Kiev"
  },
  {
    "name": "Chernihiv",
    "country": "UA",
    "lat": 51.50551,
    "long": 31.28487,
    "zone": "Europe/Kiev"
  },
  {
    "name": "Cherkasy",
    "country": "UA",
    "lat": 49.42854,
    "long": 32.06207,
    "zone": "Europe/Kiev"
  },
  {
    "name": "Bila Tserkva",
    "country": "UA",
    "lat": 49.80939,
    "long": 30.11209,
    "zone": "Europe/Kiev"
  },
  {
    "name": "Berdyans’k",
    "country": "UA",
    "lat": 46.76644,
    "long": 36.79872,
    "zone": "Europe/Zaporozhye"
  },
  {
    "name": "Alchevs’k",
    "country": "UA",
    "lat": 48.46893,
    "long": 38.81669,
    "zone": "Europe/Zaporozhye"
  },
  {
    "name": "Lira",
    "country": "UG",
    "lat": 2.2499,
    "long": 32.89985,
    "zone": "Africa/Kampala"
  },
  {
    "name": "Kampala",
    "country": "UG",
    "lat": 0.31628,
    "long": 32.58219,
    "zone": "Africa/Kampala"
  },
  {
    "name": "Gulu",
    "country": "UG",
    "lat": 2.77457,
    "long": 32.29899,
    "zone": "Africa/Kampala"
  },
  {
    "name": "Birmingham",
    "country": "US",
    "lat": 33.52066,
    "long": -86.80249,
    "zone": "America/Chicago"
  },
  {
    "name": "Huntsville",
    "country": "US",
    "lat": 34.73037,
    "long": -86.5861,
    "zone": "America/Chicago"
  },
  {
    "name": "Mobile",
    "country": "US",
    "lat": 30.69436,
    "long": -88.04305,
    "zone": "America/Chicago"
  },
  {
    "name": "Montgomery",
    "country": "US",
    "lat": 32.36681,
    "long": -86.29997,
    "zone": "America/Chicago"
  },
  {
    "name": "Little Rock",
    "country": "US",
    "lat": 34.74648,
    "long": -92.28959,
    "zone": "America/Chicago"
  },
  {
    "name": "Washington, D.C.",
    "country": "US",
    "lat": 38.89511,
    "long": -77.03637,
    "zone": "America/New_York"
  },
  {
    "name": "Brandon",
    "country": "US",
    "lat": 27.9378,
    "long": -82.28592,
    "zone": "America/New_York"
  },
  {
    "name": "Cape Coral",
    "country": "US",
    "lat": 26.56285,
    "long": -81.94953,
    "zone": "America/New_York"
  },
  {
    "name": "Clearwater",
    "country": "US",
    "lat": 27.96585,
    "long": -82.8001,
    "zone": "America/New_York"
  },
  {
    "name": "Coral Springs",
    "country": "US",
    "lat": 26.27119,
    "long": -80.2706,
    "zone": "America/New_York"
  },
  {
    "name": "Fort Lauderdale",
    "country": "US",
    "lat": 26.12231,
    "long": -80.14338,
    "zone": "America/New_York"
  },
  {
    "name": "Gainesville",
    "country": "US",
    "lat": 29.65163,
    "long": -82.32483,
    "zone": "America/New_York"
  },
  {
    "name": "Hialeah",
    "country": "US",
    "lat": 25.8576,
    "long": -80.27811,
    "zone": "America/New_York"
  },
  {
    "name": "Hollywood",
    "country": "US",
    "lat": 26.0112,
    "long": -80.14949,
    "zone": "America/New_York"
  },
  {
    "name": "Jacksonville",
    "country": "US",
    "lat": 30.33218,
    "long": -81.65565,
    "zone": "America/New_York"
  },
  {
    "name": "Miami",
    "country": "US",
    "lat": 25.77427,
    "long": -80.19366,
    "zone": "America/New_York"
  },
  {
    "name": "Miami Gardens",
    "country": "US",
    "lat": 25.94204,
    "long": -80.2456,
    "zone": "America/New_York"
  },
  {
    "name": "Miramar",
    "country": "US",
    "lat": 25.98731,
    "long": -80.23227,
    "zone": "America/New_York"
  },
  {
    "name": "Orlando",
    "country": "US",
    "lat": 28.53834,
    "long": -81.37924,
    "zone": "America/New_York"
  },
  {
    "name": "Palm Bay",
    "country": "US",
    "lat": 28.03446,
    "long": -80.58866,
    "zone": "America/New_York"
  },
  {
    "name": "Pembroke Pines",
    "country": "US",
    "lat": 26.00315,
    "long": -80.22394,
    "zone": "America/New_York"
  },
  {
    "name": "Port Saint Lucie",
    "country": "US",
    "lat": 27.29393,
    "long": -80.35033,
    "zone": "America/New_York"
  },
  {
    "name": "Saint Petersburg",
    "country": "US",
    "lat": 27.77086,
    "long": -82.67927,
    "zone": "America/New_York"
  },
  {
    "name": "Tallahassee",
    "country": "US",
    "lat": 30.43826,
    "long": -84.28073,
    "zone": "America/New_York"
  },
  {
    "name": "Tampa",
    "country": "US",
    "lat": 27.94752,
    "long": -82.45843,
    "zone": "America/New_York"
  },
  {
    "name": "Athens",
    "country": "US",
    "lat": 33.96095,
    "long": -83.37794,
    "zone": "America/New_York"
  },
  {
    "name": "Atlanta",
    "country": "US",
    "lat": 33.749,
    "long": -84.38798,
    "zone": "America/New_York"
  },
  {
    "name": "Columbus",
    "country": "US",
    "lat": 32.46098,
    "long": -84.98771,
    "zone": "America/New_York"
  },
  {
    "name": "Savannah",
    "country": "US",
    "lat": 32.08354,
    "long": -81.09983,
    "zone": "America/New_York"
  },
  {
    "name": "Springfield",
    "country": "US",
    "lat": 39.80172,
    "long": -89.64371,
    "zone": "America/Chicago"
  },
  {
    "name": "Evansville",
    "country": "US",
    "lat": 37.97476,
    "long": -87.55585,
    "zone": "America/Chicago"
  },
  {
    "name": "Indianapolis",
    "country": "US",
    "lat": 39.76838,
    "long": -86.15804,
    "zone": "America/Indiana/Indianapolis"
  },
  {
    "name": "Kansas City",
    "country": "US",
    "lat": 39.11417,
    "long": -94.62746,
    "zone": "America/Chicago"
  },
  {
    "name": "Olathe",
    "country": "US",
    "lat": 38.8814,
    "long": -94.81913,
    "zone": "America/Chicago"
  },
  {
    "name": "Overland Park",
    "country": "US",
    "lat": 38.98223,
    "long": -94.67079,
    "zone": "America/Chicago"
  },
  {
    "name": "Topeka",
    "country": "US",
    "lat": 39.04833,
    "long": -95.67804,
    "zone": "America/Chicago"
  },
  {
    "name": "Wichita",
    "country": "US",
    "lat": 37.69224,
    "long": -97.33754,
    "zone": "America/Chicago"
  },
  {
    "name": "Ironville",
    "country": "US",
    "lat": 38.45647,
    "long": -82.69238,
    "zone": "America/New_York"
  },
  {
    "name": "Lexington",
    "country": "US",
    "lat": 37.98869,
    "long": -84.47772,
    "zone": "America/New_York"
  },
  {
    "name": "Lexington-Fayette",
    "country": "US",
    "lat": 38.0498,
    "long": -84.45855,
    "zone": "America/New_York"
  },
  {
    "name": "Louisville",
    "country": "US",
    "lat": 38.25424,
    "long": -85.75941,
    "zone": "America/Kentucky/Louisville"
  },
  {
    "name": "Meads",
    "country": "US",
    "lat": 38.41258,
    "long": -82.70905,
    "zone": "America/New_York"
  },
  {
    "name": "Baton Rouge",
    "country": "US",
    "lat": 30.45075,
    "long": -91.15455,
    "zone": "America/Chicago"
  },
  {
    "name": "Lafayette",
    "country": "US",
    "lat": 30.22409,
    "long": -92.01984,
    "zone": "America/Chicago"
  },
  {
    "name": "Metairie",
    "country": "US",
    "lat": 29.98409,
    "long": -90.15285,
    "zone": "America/Chicago"
  },
  {
    "name": "Metairie Terrace",
    "country": "US",
    "lat": 29.97854,
    "long": -90.16396,
    "zone": "America/Chicago"
  },
  {
    "name": "New Orleans",
    "country": "US",
    "lat": 29.95465,
    "long": -90.07507,
    "zone": "America/Chicago"
  },
  {
    "name": "Shreveport",
    "country": "US",
    "lat": 32.52515,
    "long": -93.75018,
    "zone": "America/Chicago"
  },
  {
    "name": "Baltimore",
    "country": "US",
    "lat": 39.29038,
    "long": -76.61219,
    "zone": "America/New_York"
  },
  {
    "name": "Columbia",
    "country": "US",
    "lat": 38.95171,
    "long": -92.33407,
    "zone": "America/Chicago"
  },
  {
    "name": "East Independence",
    "country": "US",
    "lat": 39.09556,
    "long": -94.35523,
    "zone": "America/Chicago"
  },
  {
    "name": "Independence",
    "country": "US",
    "lat": 39.09112,
    "long": -94.41551,
    "zone": "America/Chicago"
  },
  {
    "name": "Kansas City",
    "country": "US",
    "lat": 39.09973,
    "long": -94.57857,
    "zone": "America/Chicago"
  },
  {
    "name": "St. Louis",
    "country": "US",
    "lat": 38.62727,
    "long": -90.19789,
    "zone": "America/Chicago"
  },
  {
    "name": "Springfield",
    "country": "US",
    "lat": 37.21533,
    "long": -93.29824,
    "zone": "America/Chicago"
  },
  {
    "name": "Jackson",
    "country": "US",
    "lat": 32.29876,
    "long": -90.18481,
    "zone": "America/Chicago"
  },
  {
    "name": "Cary",
    "country": "US",
    "lat": 35.79154,
    "long": -78.78112,
    "zone": "America/New_York"
  },
  {
    "name": "Charlotte",
    "country": "US",
    "lat": 35.22709,
    "long": -80.84313,
    "zone": "America/New_York"
  },
  {
    "name": "Durham",
    "country": "US",
    "lat": 35.99403,
    "long": -78.89862,
    "zone": "America/New_York"
  },
  {
    "name": "Fayetteville",
    "country": "US",
    "lat": 35.05266,
    "long": -78.87836,
    "zone": "America/New_York"
  },
  {
    "name": "Greensboro",
    "country": "US",
    "lat": 36.07264,
    "long": -79.79198,
    "zone": "America/New_York"
  },
  {
    "name": "High Point",
    "country": "US",
    "lat": 35.95569,
    "long": -80.00532,
    "zone": "America/New_York"
  },
  {
    "name": "Raleigh",
    "country": "US",
    "lat": 35.7721,
    "long": -78.63861,
    "zone": "America/New_York"
  },
  {
    "name": "West Raleigh",
    "country": "US",
    "lat": 35.78682,
    "long": -78.66389,
    "zone": "America/New_York"
  },
  {
    "name": "Wilmington",
    "country": "US",
    "lat": 34.22573,
    "long": -77.94471,
    "zone": "America/New_York"
  },
  {
    "name": "Winston-Salem",
    "country": "US",
    "lat": 36.09986,
    "long": -80.24422,
    "zone": "America/New_York"
  },
  {
    "name": "Cincinnati",
    "country": "US",
    "lat": 39.162,
    "long": -84.45689,
    "zone": "America/New_York"
  },
  {
    "name": "Columbus",
    "country": "US",
    "lat": 39.96118,
    "long": -82.99879,
    "zone": "America/New_York"
  },
  {
    "name": "Dayton",
    "country": "US",
    "lat": 39.75895,
    "long": -84.19161,
    "zone": "America/New_York"
  },
  {
    "name": "Norman",
    "country": "US",
    "lat": 35.22257,
    "long": -97.43948,
    "zone": "America/Chicago"
  },
  {
    "name": "Oklahoma City",
    "country": "US",
    "lat": 35.46756,
    "long": -97.51643,
    "zone": "America/Chicago"
  },
  {
    "name": "Tulsa",
    "country": "US",
    "lat": 36.15398,
    "long": -95.99277,
    "zone": "America/Chicago"
  },
  {
    "name": "Philadelphia",
    "country": "US",
    "lat": 39.95233,
    "long": -75.16379,
    "zone": "America/New_York"
  },
  {
    "name": "Charleston",
    "country": "US",
    "lat": 32.77657,
    "long": -79.93092,
    "zone": "America/New_York"
  },
  {
    "name": "Columbia",
    "country": "US",
    "lat": 34.00071,
    "long": -81.03481,
    "zone": "America/New_York"
  },
  {
    "name": "Chattanooga",
    "country": "US",
    "lat": 35.04563,
    "long": -85.30968,
    "zone": "America/New_York"
  },
  {
    "name": "Clarksville",
    "country": "US",
    "lat": 36.52977,
    "long": -87.35945,
    "zone": "America/Chicago"
  },
  {
    "name": "East Chattanooga",
    "country": "US",
    "lat": 35.06535,
    "long": -85.24912,
    "zone": "America/New_York"
  },
  {
    "name": "Knoxville",
    "country": "US",
    "lat": 35.96064,
    "long": -83.92074,
    "zone": "America/New_York"
  },
  {
    "name": "Memphis",
    "country": "US",
    "lat": 35.14953,
    "long": -90.04898,
    "zone": "America/Chicago"
  },
  {
    "name": "Murfreesboro",
    "country": "US",
    "lat": 35.84562,
    "long": -86.39027,
    "zone": "America/Chicago"
  },
  {
    "name": "Nashville",
    "country": "US",
    "lat": 36.16589,
    "long": -86.78444,
    "zone": "America/Chicago"
  },
  {
    "name": "New South Memphis",
    "country": "US",
    "lat": 35.08676,
    "long": -90.05676,
    "zone": "America/Chicago"
  },
  {
    "name": "Abilene",
    "country": "US",
    "lat": 32.44874,
    "long": -99.73314,
    "zone": "America/Chicago"
  },
  {
    "name": "Arlington",
    "country": "US",
    "lat": 32.73569,
    "long": -97.10807,
    "zone": "America/Chicago"
  },
  {
    "name": "Austin",
    "country": "US",
    "lat": 30.26715,
    "long": -97.74306,
    "zone": "America/Chicago"
  },
  {
    "name": "Beaumont",
    "country": "US",
    "lat": 30.08605,
    "long": -94.10185,
    "zone": "America/Chicago"
  },
  {
    "name": "Brownsville",
    "country": "US",
    "lat": 25.90175,
    "long": -97.49748,
    "zone": "America/Chicago"
  },
  {
    "name": "Carrollton",
    "country": "US",
    "lat": 32.95373,
    "long": -96.89028,
    "zone": "America/Chicago"
  },
  {
    "name": "Corpus Christi",
    "country": "US",
    "lat": 27.80058,
    "long": -97.39638,
    "zone": "America/Chicago"
  },
  {
    "name": "Dallas",
    "country": "US",
    "lat": 32.78306,
    "long": -96.80667,
    "zone": "America/Chicago"
  },
  {
    "name": "Denton",
    "country": "US",
    "lat": 33.21484,
    "long": -97.13307,
    "zone": "America/Chicago"
  },
  {
    "name": "Fort Worth",
    "country": "US",
    "lat": 32.72541,
    "long": -97.32085,
    "zone": "America/Chicago"
  },
  {
    "name": "Frisco",
    "country": "US",
    "lat": 33.15067,
    "long": -96.82361,
    "zone": "America/Chicago"
  },
  {
    "name": "Garland",
    "country": "US",
    "lat": 32.91262,
    "long": -96.63888,
    "zone": "America/Chicago"
  },
  {
    "name": "Grand Prairie",
    "country": "US",
    "lat": 32.74596,
    "long": -96.99778,
    "zone": "America/Chicago"
  },
  {
    "name": "Houston",
    "country": "US",
    "lat": 29.76328,
    "long": -95.36327,
    "zone": "America/Chicago"
  },
  {
    "name": "Irving",
    "country": "US",
    "lat": 32.81402,
    "long": -96.94889,
    "zone": "America/Chicago"
  },
  {
    "name": "Killeen",
    "country": "US",
    "lat": 31.11712,
    "long": -97.7278,
    "zone": "America/Chicago"
  },
  {
    "name": "Laredo",
    "country": "US",
    "lat": 27.50641,
    "long": -99.50754,
    "zone": "America/Chicago"
  },
  {
    "name": "McAllen",
    "country": "US",
    "lat": 26.20341,
    "long": -98.23001,
    "zone": "America/Chicago"
  },
  {
    "name": "McKinney",
    "country": "US",
    "lat": 33.19762,
    "long": -96.61527,
    "zone": "America/Chicago"
  },
  {
    "name": "Mesquite",
    "country": "US",
    "lat": 32.7668,
    "long": -96.59916,
    "zone": "America/Chicago"
  },
  {
    "name": "Pasadena",
    "country": "US",
    "lat": 29.69106,
    "long": -95.2091,
    "zone": "America/Chicago"
  },
  {
    "name": "Plano",
    "country": "US",
    "lat": 33.01984,
    "long": -96.69889,
    "zone": "America/Chicago"
  },
  {
    "name": "San Antonio",
    "country": "US",
    "lat": 29.42412,
    "long": -98.49363,
    "zone": "America/Chicago"
  },
  {
    "name": "Waco",
    "country": "US",
    "lat": 31.54933,
    "long": -97.14667,
    "zone": "America/Chicago"
  },
  {
    "name": "Wichita Falls",
    "country": "US",
    "lat": 33.91371,
    "long": -98.49339,
    "zone": "America/Chicago"
  },
  {
    "name": "Alexandria",
    "country": "US",
    "lat": 38.80484,
    "long": -77.04692,
    "zone": "America/New_York"
  },
  {
    "name": "Arlington",
    "country": "US",
    "lat": 38.88101,
    "long": -77.10428,
    "zone": "America/New_York"
  },
  {
    "name": "Chesapeake",
    "country": "US",
    "lat": 36.81904,
    "long": -76.27494,
    "zone": "America/New_York"
  },
  {
    "name": "East Hampton",
    "country": "US",
    "lat": 37.03737,
    "long": -76.33161,
    "zone": "America/New_York"
  },
  {
    "name": "Hampton",
    "country": "US",
    "lat": 37.02987,
    "long": -76.34522,
    "zone": "America/New_York"
  },
  {
    "name": "Newport News",
    "country": "US",
    "lat": 36.97876,
    "long": -76.428,
    "zone": "America/New_York"
  },
  {
    "name": "Norfolk",
    "country": "US",
    "lat": 36.84681,
    "long": -76.28522,
    "zone": "America/New_York"
  },
  {
    "name": "Richmond",
    "country": "US",
    "lat": 37.55376,
    "long": -77.46026,
    "zone": "America/New_York"
  },
  {
    "name": "Virginia Beach",
    "country": "US",
    "lat": 36.85293,
    "long": -75.97799,
    "zone": "America/New_York"
  },
  {
    "name": "Hartford",
    "country": "US",
    "lat": 41.76371,
    "long": -72.68509,
    "zone": "America/New_York"
  },
  {
    "name": "New Haven",
    "country": "US",
    "lat": 41.30815,
    "long": -72.92816,
    "zone": "America/New_York"
  },
  {
    "name": "North Stamford",
    "country": "US",
    "lat": 41.13815,
    "long": -73.54346,
    "zone": "America/New_York"
  },
  {
    "name": "Stamford",
    "country": "US",
    "lat": 41.05343,
    "long": -73.53873,
    "zone": "America/New_York"
  },
  {
    "name": "Waterbury",
    "country": "US",
    "lat": 41.55815,
    "long": -73.0515,
    "zone": "America/New_York"
  },
  {
    "name": "Cedar Rapids",
    "country": "US",
    "lat": 42.00833,
    "long": -91.64407,
    "zone": "America/Chicago"
  },
  {
    "name": "Des Moines",
    "country": "US",
    "lat": 41.60054,
    "long": -93.60911,
    "zone": "America/Chicago"
  },
  {
    "name": "Aurora",
    "country": "US",
    "lat": 41.76058,
    "long": -88.32007,
    "zone": "America/Chicago"
  },
  {
    "name": "Chicago",
    "country": "US",
    "lat": 41.85003,
    "long": -87.65005,
    "zone": "America/Chicago"
  },
  {
    "name": "Elgin",
    "country": "US",
    "lat": 42.03725,
    "long": -88.28119,
    "zone": "America/Chicago"
  },
  {
    "name": "Joliet",
    "country": "US",
    "lat": 41.52519,
    "long": -88.0834,
    "zone": "America/Chicago"
  },
  {
    "name": "Naperville",
    "country": "US",
    "lat": 41.78586,
    "long": -88.14729,
    "zone": "America/Chicago"
  },
  {
    "name": "North Peoria",
    "country": "US",
    "lat": 40.71754,
    "long": -89.58426,
    "zone": "America/Chicago"
  },
  {
    "name": "Peoria",
    "country": "US",
    "lat": 40.69365,
    "long": -89.58899,
    "zone": "America/Chicago"
  },
  {
    "name": "Rockford",
    "country": "US",
    "lat": 42.27113,
    "long": -89.094,
    "zone": "America/Chicago"
  },
  {
    "name": "Fort Wayne",
    "country": "US",
    "lat": 41.1306,
    "long": -85.12886,
    "zone": "America/Indiana/Indianapolis"
  },
  {
    "name": "South Bend",
    "country": "US",
    "lat": 41.68338,
    "long": -86.25001,
    "zone": "America/Indiana/Indianapolis"
  },
  {
    "name": "Boston",
    "country": "US",
    "lat": 42.35843,
    "long": -71.05977,
    "zone": "America/New_York"
  },
  {
    "name": "Cambridge",
    "country": "US",
    "lat": 42.3751,
    "long": -71.10561,
    "zone": "America/New_York"
  },
  {
    "name": "Lowell",
    "country": "US",
    "lat": 42.63342,
    "long": -71.31617,
    "zone": "America/New_York"
  },
  {
    "name": "South Boston",
    "country": "US",
    "lat": 42.33343,
    "long": -71.04949,
    "zone": "America/New_York"
  },
  {
    "name": "Springfield",
    "country": "US",
    "lat": 42.10148,
    "long": -72.58981,
    "zone": "America/New_York"
  },
  {
    "name": "Worcester",
    "country": "US",
    "lat": 42.26259,
    "long": -71.80229,
    "zone": "America/New_York"
  },
  {
    "name": "Ann Arbor",
    "country": "US",
    "lat": 42.27756,
    "long": -83.74088,
    "zone": "America/Detroit"
  },
  {
    "name": "Detroit",
    "country": "US",
    "lat": 42.33143,
    "long": -83.04575,
    "zone": "America/Detroit"
  },
  {
    "name": "Flint",
    "country": "US",
    "lat": 43.01253,
    "long": -83.68746,
    "zone": "America/Detroit"
  },
  {
    "name": "Grand Rapids",
    "country": "US",
    "lat": 42.96336,
    "long": -85.66809,
    "zone": "America/Detroit"
  },
  {
    "name": "Lansing",
    "country": "US",
    "lat": 42.73253,
    "long": -84.55553,
    "zone": "America/Detroit"
  },
  {
    "name": "Sterling Heights",
    "country": "US",
    "lat": 42.58031,
    "long": -83.0302,
    "zone": "America/Detroit"
  },
  {
    "name": "Warren",
    "country": "US",
    "lat": 42.47754,
    "long": -83.0277,
    "zone": "America/Detroit"
  },
  {
    "name": "Minneapolis",
    "country": "US",
    "lat": 44.97997,
    "long": -93.26384,
    "zone": "America/Chicago"
  },
  {
    "name": "Rochester",
    "country": "US",
    "lat": 44.02163,
    "long": -92.4699,
    "zone": "America/Chicago"
  },
  {
    "name": "Saint Paul",
    "country": "US",
    "lat": 44.94441,
    "long": -93.09327,
    "zone": "America/Chicago"
  },
  {
    "name": "Fargo",
    "country": "US",
    "lat": 46.87719,
    "long": -96.7898,
    "zone": "America/Chicago"
  },
  {
    "name": "Lincoln",
    "country": "US",
    "lat": 40.8,
    "long": -96.66696,
    "zone": "America/Chicago"
  },
  {
    "name": "Omaha",
    "country": "US",
    "lat": 41.25861,
    "long": -95.93779,
    "zone": "America/Chicago"
  },
  {
    "name": "Manchester",
    "country": "US",
    "lat": 42.99564,
    "long": -71.45479,
    "zone": "America/New_York"
  },
  {
    "name": "Edison",
    "country": "US",
    "lat": 40.51872,
    "long": -74.4121,
    "zone": "America/New_York"
  },
  {
    "name": "Elizabeth",
    "country": "US",
    "lat": 40.66399,
    "long": -74.2107,
    "zone": "America/New_York"
  },
  {
    "name": "Jersey City",
    "country": "US",
    "lat": 40.72816,
    "long": -74.07764,
    "zone": "America/New_York"
  },
  {
    "name": "Newark",
    "country": "US",
    "lat": 40.73566,
    "long": -74.17237,
    "zone": "America/New_York"
  },
  {
    "name": "Paterson",
    "country": "US",
    "lat": 40.91677,
    "long": -74.17181,
    "zone": "America/New_York"
  },
  {
    "name": "Amherst",
    "country": "US",
    "lat": 42.97839,
    "long": -78.79976,
    "zone": "America/New_York"
  },
  {
    "name": "The Bronx",
    "country": "US",
    "lat": 40.84985,
    "long": -73.86641,
    "zone": "America/New_York"
  },
  {
    "name": "Brooklyn",
    "country": "US",
    "lat": 40.6501,
    "long": -73.94958,
    "zone": "America/New_York"
  },
  {
    "name": "Buffalo",
    "country": "US",
    "lat": 42.88645,
    "long": -78.87837,
    "zone": "America/New_York"
  },
  {
    "name": "East New York",
    "country": "US",
    "lat": 40.66677,
    "long": -73.88236,
    "zone": "America/New_York"
  },
  {
    "name": "Jamaica",
    "country": "US",
    "lat": 40.69149,
    "long": -73.80569,
    "zone": "America/New_York"
  },
  {
    "name": "Manhattan",
    "country": "US",
    "lat": 40.78343,
    "long": -73.96625,
    "zone": "America/New_York"
  },
  {
    "name": "New York City",
    "country": "US",
    "lat": 40.71427,
    "long": -74.00597,
    "zone": "America/New_York"
  },
  {
    "name": "Borough of Queens",
    "country": "US",
    "lat": 40.68149,
    "long": -73.83652,
    "zone": "America/New_York"
  },
  {
    "name": "Rochester",
    "country": "US",
    "lat": 43.15478,
    "long": -77.61556,
    "zone": "America/New_York"
  },
  {
    "name": "Staten Island",
    "country": "US",
    "lat": 40.56233,
    "long": -74.13986,
    "zone": "America/New_York"
  },
  {
    "name": "Syracuse",
    "country": "US",
    "lat": 43.04812,
    "long": -76.14742,
    "zone": "America/New_York"
  },
  {
    "name": "Yonkers",
    "country": "US",
    "lat": 40.93121,
    "long": -73.89875,
    "zone": "America/New_York"
  },
  {
    "name": "Akron",
    "country": "US",
    "lat": 41.08144,
    "long": -81.51901,
    "zone": "America/New_York"
  },
  {
    "name": "Cleveland",
    "country": "US",
    "lat": 41.4995,
    "long": -81.69541,
    "zone": "America/New_York"
  },
  {
    "name": "Toledo",
    "country": "US",
    "lat": 41.66394,
    "long": -83.55521,
    "zone": "America/New_York"
  },
  {
    "name": "Allentown",
    "country": "US",
    "lat": 40.60843,
    "long": -75.49018,
    "zone": "America/New_York"
  },
  {
    "name": "Erie",
    "country": "US",
    "lat": 42.12922,
    "long": -80.08506,
    "zone": "America/New_York"
  },
  {
    "name": "Pittsburgh",
    "country": "US",
    "lat": 40.44062,
    "long": -79.99589,
    "zone": "America/New_York"
  },
  {
    "name": "Providence",
    "country": "US",
    "lat": 41.82399,
    "long": -71.41283,
    "zone": "America/New_York"
  },
  {
    "name": "Sioux Falls",
    "country": "US",
    "lat": 43.54997,
    "long": -96.70033,
    "zone": "America/Chicago"
  },
  {
    "name": "Green Bay",
    "country": "US",
    "lat": 44.51916,
    "long": -88.01983,
    "zone": "America/Chicago"
  },
  {
    "name": "Madison",
    "country": "US",
    "lat": 43.07305,
    "long": -89.40123,
    "zone": "America/Chicago"
  },
  {
    "name": "Milwaukee",
    "country": "US",
    "lat": 43.0389,
    "long": -87.90647,
    "zone": "America/Chicago"
  },
  {
    "name": "Bridgeport",
    "country": "US",
    "lat": 41.16704,
    "long": -73.20483,
    "zone": "America/New_York"
  },
  {
    "name": "Chandler",
    "country": "US",
    "lat": 33.30616,
    "long": -111.84125,
    "zone": "America/Phoenix"
  },
  {
    "name": "Gilbert",
    "country": "US",
    "lat": 33.35283,
    "long": -111.78903,
    "zone": "America/Phoenix"
  },
  {
    "name": "Glendale",
    "country": "US",
    "lat": 33.53865,
    "long": -112.18599,
    "zone": "America/Phoenix"
  },
  {
    "name": "Mesa",
    "country": "US",
    "lat": 33.41253,
    "long": -111.83189,
    "zone": "America/Phoenix"
  },
  {
    "name": "Peoria",
    "country": "US",
    "lat": 33.5806,
    "long": -112.23738,
    "zone": "America/Phoenix"
  },
  {
    "name": "Phoenix",
    "country": "US",
    "lat": 33.44838,
    "long": -112.07404,
    "zone": "America/Phoenix"
  },
  {
    "name": "Scottsdale",
    "country": "US",
    "lat": 33.50921,
    "long": -111.89903,
    "zone": "America/Phoenix"
  },
  {
    "name": "Surprise",
    "country": "US",
    "lat": 33.63059,
    "long": -112.33322,
    "zone": "America/Phoenix"
  },
  {
    "name": "Tempe",
    "country": "US",
    "lat": 33.41477,
    "long": -111.90931,
    "zone": "America/Phoenix"
  },
  {
    "name": "Tempe Junction",
    "country": "US",
    "lat": 33.41421,
    "long": -111.94348,
    "zone": "America/Phoenix"
  },
  {
    "name": "Tucson",
    "country": "US",
    "lat": 32.22174,
    "long": -110.92648,
    "zone": "America/Phoenix"
  },
  {
    "name": "Anaheim",
    "country": "US",
    "lat": 33.83529,
    "long": -117.9145,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Antioch",
    "country": "US",
    "lat": 38.00492,
    "long": -121.80579,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Bakersfield",
    "country": "US",
    "lat": 35.37329,
    "long": -119.01871,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Berkeley",
    "country": "US",
    "lat": 37.87159,
    "long": -122.27275,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Burbank",
    "country": "US",
    "lat": 34.18084,
    "long": -118.30897,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Carlsbad",
    "country": "US",
    "lat": 33.15809,
    "long": -117.35059,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Chula Vista",
    "country": "US",
    "lat": 32.64005,
    "long": -117.0842,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Concord",
    "country": "US",
    "lat": 37.97798,
    "long": -122.03107,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Corona",
    "country": "US",
    "lat": 33.87529,
    "long": -117.56644,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Costa Mesa",
    "country": "US",
    "lat": 33.64113,
    "long": -117.91867,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Daly City",
    "country": "US",
    "lat": 37.70577,
    "long": -122.46192,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Downey",
    "country": "US",
    "lat": 33.94001,
    "long": -118.13257,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "East Los Angeles",
    "country": "US",
    "lat": 34.0239,
    "long": -118.17202,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "El Monte",
    "country": "US",
    "lat": 34.06862,
    "long": -118.02757,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Elk Grove",
    "country": "US",
    "lat": 38.4088,
    "long": -121.37162,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Escondido",
    "country": "US",
    "lat": 33.11921,
    "long": -117.08642,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Fairfield",
    "country": "US",
    "lat": 38.24936,
    "long": -122.03997,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Fontana",
    "country": "US",
    "lat": 34.09223,
    "long": -117.43505,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Fremont",
    "country": "US",
    "lat": 37.54827,
    "long": -121.98857,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Fresno",
    "country": "US",
    "lat": 36.74773,
    "long": -119.77237,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Fullerton",
    "country": "US",
    "lat": 33.87029,
    "long": -117.92534,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Garden Grove",
    "country": "US",
    "lat": 33.77391,
    "long": -117.94145,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Glendale",
    "country": "US",
    "lat": 34.14251,
    "long": -118.25508,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Hayward",
    "country": "US",
    "lat": 37.66882,
    "long": -122.0808,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Hollywood",
    "country": "US",
    "lat": 34.09834,
    "long": -118.32674,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Huntington Beach",
    "country": "US",
    "lat": 33.6603,
    "long": -117.99923,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Inglewood",
    "country": "US",
    "lat": 33.96168,
    "long": -118.35313,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Irvine",
    "country": "US",
    "lat": 33.66946,
    "long": -117.82311,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Lancaster",
    "country": "US",
    "lat": 34.69804,
    "long": -118.13674,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Long Beach",
    "country": "US",
    "lat": 33.76696,
    "long": -118.18923,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Los Angeles",
    "country": "US",
    "lat": 34.05223,
    "long": -118.24368,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Modesto",
    "country": "US",
    "lat": 37.6391,
    "long": -120.99688,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Moreno Valley",
    "country": "US",
    "lat": 33.93752,
    "long": -117.23059,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Murrieta",
    "country": "US",
    "lat": 33.55391,
    "long": -117.21392,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "North Glendale",
    "country": "US",
    "lat": 34.16056,
    "long": -118.26452,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Norwalk",
    "country": "US",
    "lat": 33.90224,
    "long": -118.08173,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Oakland",
    "country": "US",
    "lat": 37.80437,
    "long": -122.2708,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Oceanside",
    "country": "US",
    "lat": 33.19587,
    "long": -117.37948,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Ontario",
    "country": "US",
    "lat": 34.06334,
    "long": -117.65089,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Orange",
    "country": "US",
    "lat": 33.78779,
    "long": -117.85311,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Oxnard",
    "country": "US",
    "lat": 34.1975,
    "long": -119.17705,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Oxnard Shores",
    "country": "US",
    "lat": 34.19084,
    "long": -119.2415,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Palmdale",
    "country": "US",
    "lat": 34.57943,
    "long": -118.11646,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Pasadena",
    "country": "US",
    "lat": 34.14778,
    "long": -118.14452,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Pomona",
    "country": "US",
    "lat": 34.05529,
    "long": -117.75228,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Rancho Cucamonga",
    "country": "US",
    "lat": 34.1064,
    "long": -117.59311,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Richmond",
    "country": "US",
    "lat": 37.93576,
    "long": -122.34775,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Riverside",
    "country": "US",
    "lat": 33.95335,
    "long": -117.39616,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Roseville",
    "country": "US",
    "lat": 38.75212,
    "long": -121.28801,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Sacramento",
    "country": "US",
    "lat": 38.58157,
    "long": -121.4944,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Salinas",
    "country": "US",
    "lat": 36.67774,
    "long": -121.6555,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "San Bernardino",
    "country": "US",
    "lat": 34.10834,
    "long": -117.28977,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "San Diego",
    "country": "US",
    "lat": 32.71533,
    "long": -117.15726,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "San Francisco",
    "country": "US",
    "lat": 37.77493,
    "long": -122.41942,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "San Jose",
    "country": "US",
    "lat": 37.33939,
    "long": -121.89496,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Santa Ana",
    "country": "US",
    "lat": 33.74557,
    "long": -117.86783,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Santa Clara",
    "country": "US",
    "lat": 37.35411,
    "long": -121.95524,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Santa Clarita",
    "country": "US",
    "lat": 34.39166,
    "long": -118.54259,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Santa Rosa",
    "country": "US",
    "lat": 38.44047,
    "long": -122.71443,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Simi Valley",
    "country": "US",
    "lat": 34.26945,
    "long": -118.78148,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Stockton",
    "country": "US",
    "lat": 37.9577,
    "long": -121.29078,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Sunnyvale",
    "country": "US",
    "lat": 37.36883,
    "long": -122.03635,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Temecula",
    "country": "US",
    "lat": 33.49364,
    "long": -117.14836,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Thousand Oaks",
    "country": "US",
    "lat": 34.17056,
    "long": -118.83759,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Torrance",
    "country": "US",
    "lat": 33.83585,
    "long": -118.34063,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Universal City",
    "country": "US",
    "lat": 34.1389,
    "long": -118.35341,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Valencia",
    "country": "US",
    "lat": 34.44361,
    "long": -118.60953,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Vallejo",
    "country": "US",
    "lat": 38.10409,
    "long": -122.25664,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Van Nuys",
    "country": "US",
    "lat": 34.18667,
    "long": -118.44897,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Victorville",
    "country": "US",
    "lat": 34.53611,
    "long": -117.29116,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Visalia",
    "country": "US",
    "lat": 36.33023,
    "long": -119.29206,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "West Covina",
    "country": "US",
    "lat": 34.06862,
    "long": -117.93895,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Arvada",
    "country": "US",
    "lat": 39.80276,
    "long": -105.08748,
    "zone": "America/Denver"
  },
  {
    "name": "Aurora",
    "country": "US",
    "lat": 39.72943,
    "long": -104.83192,
    "zone": "America/Denver"
  },
  {
    "name": "Centennial",
    "country": "US",
    "lat": 39.57916,
    "long": -104.87692,
    "zone": "America/Denver"
  },
  {
    "name": "Colorado Springs",
    "country": "US",
    "lat": 38.83388,
    "long": -104.82136,
    "zone": "America/Denver"
  },
  {
    "name": "Denver",
    "country": "US",
    "lat": 39.73915,
    "long": -104.9847,
    "zone": "America/Denver"
  },
  {
    "name": "Lakewood",
    "country": "US",
    "lat": 39.70471,
    "long": -105.08137,
    "zone": "America/Denver"
  },
  {
    "name": "Pueblo",
    "country": "US",
    "lat": 38.25445,
    "long": -104.60914,
    "zone": "America/Denver"
  },
  {
    "name": "Thornton",
    "country": "US",
    "lat": 39.86804,
    "long": -104.97192,
    "zone": "America/Denver"
  },
  {
    "name": "Westminster",
    "country": "US",
    "lat": 39.83665,
    "long": -105.0372,
    "zone": "America/Denver"
  },
  {
    "name": "Albuquerque",
    "country": "US",
    "lat": 35.08449,
    "long": -106.65114,
    "zone": "America/Denver"
  },
  {
    "name": "Enterprise",
    "country": "US",
    "lat": 36.02525,
    "long": -115.24194,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Henderson",
    "country": "US",
    "lat": 36.0397,
    "long": -114.98194,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Las Vegas",
    "country": "US",
    "lat": 36.17497,
    "long": -115.13722,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "North Las Vegas",
    "country": "US",
    "lat": 36.19886,
    "long": -115.1175,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Paradise",
    "country": "US",
    "lat": 36.09719,
    "long": -115.14666,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Reno",
    "country": "US",
    "lat": 39.52963,
    "long": -119.8138,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Spring Valley",
    "country": "US",
    "lat": 36.10803,
    "long": -115.245,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Sunrise Manor",
    "country": "US",
    "lat": 36.21108,
    "long": -115.07306,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Amarillo",
    "country": "US",
    "lat": 35.222,
    "long": -101.8313,
    "zone": "America/Chicago"
  },
  {
    "name": "El Paso",
    "country": "US",
    "lat": 31.75872,
    "long": -106.48693,
    "zone": "America/Denver"
  },
  {
    "name": "Lubbock",
    "country": "US",
    "lat": 33.57786,
    "long": -101.85517,
    "zone": "America/Chicago"
  },
  {
    "name": "Midland",
    "country": "US",
    "lat": 31.99735,
    "long": -102.07791,
    "zone": "America/Chicago"
  },
  {
    "name": "Fort Collins",
    "country": "US",
    "lat": 40.58526,
    "long": -105.08442,
    "zone": "America/Denver"
  },
  {
    "name": "Boise",
    "country": "US",
    "lat": 43.6135,
    "long": -116.20345,
    "zone": "America/Boise"
  },
  {
    "name": "Billings",
    "country": "US",
    "lat": 45.78329,
    "long": -108.50069,
    "zone": "America/Denver"
  },
  {
    "name": "Eugene",
    "country": "US",
    "lat": 44.05207,
    "long": -123.08675,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Gresham",
    "country": "US",
    "lat": 45.49818,
    "long": -122.43148,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Portland",
    "country": "US",
    "lat": 45.52345,
    "long": -122.67621,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Salem",
    "country": "US",
    "lat": 44.9429,
    "long": -123.0351,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Provo",
    "country": "US",
    "lat": 40.23384,
    "long": -111.65853,
    "zone": "America/Denver"
  },
  {
    "name": "Salt Lake City",
    "country": "US",
    "lat": 40.76078,
    "long": -111.89105,
    "zone": "America/Denver"
  },
  {
    "name": "West Jordan",
    "country": "US",
    "lat": 40.60967,
    "long": -111.9391,
    "zone": "America/Denver"
  },
  {
    "name": "West Valley City",
    "country": "US",
    "lat": 40.69161,
    "long": -112.00105,
    "zone": "America/Denver"
  },
  {
    "name": "Bellevue",
    "country": "US",
    "lat": 47.61038,
    "long": -122.20068,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Everett",
    "country": "US",
    "lat": 47.97898,
    "long": -122.20208,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Seattle",
    "country": "US",
    "lat": 47.60621,
    "long": -122.33207,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Spokane",
    "country": "US",
    "lat": 47.65966,
    "long": -117.42908,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Tacoma",
    "country": "US",
    "lat": 47.25288,
    "long": -122.44429,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Vancouver",
    "country": "US",
    "lat": 45.63873,
    "long": -122.66149,
    "zone": "America/Los_Angeles"
  },
  {
    "name": "Honolulu",
    "country": "US",
    "lat": 21.30694,
    "long": -157.85833,
    "zone": "Pacific/Honolulu"
  },
  {
    "name": "Anchorage",
    "country": "US",
    "lat": 61.21806,
    "long": -149.90028,
    "zone": "America/Anchorage"
  },
  {
    "name": "Montevideo",
    "country": "UY",
    "lat": -34.90328,
    "long": -56.18816,
    "zone": "America/Montevideo"
  },
  {
    "name": "Nukus",
    "country": "UZ",
    "lat": 42.45306,
    "long": 59.61028,
    "zone": "Asia/Samarkand"
  },
  {
    "name": "Tirmiz",
    "country": "UZ",
    "lat": 37.22417,
    "long": 67.27833,
    "zone": "Asia/Samarkand"
  },
  {
    "name": "Samarqand",
    "country": "UZ",
    "lat": 39.65417,
    "long": 66.95972,
    "zone": "Asia/Samarkand"
  },
  {
    "name": "Qarshi",
    "country": "UZ",
    "lat": 38.86056,
    "long": 65.78905,
    "zone": "Asia/Samarkand"
  },
  {
    "name": "Bukhara",
    "country": "UZ",
    "lat": 39.77472,
    "long": 64.42861,
    "zone": "Asia/Samarkand"
  },
  {
    "name": "Urganch",
    "country": "UZ",
    "lat": 41.55,
    "long": 60.63333,
    "zone": "Asia/Samarkand"
  },
  {
    "name": "Tashkent",
    "country": "UZ",
    "lat": 41.26465,
    "long": 69.21627,
    "zone": "Asia/Tashkent"
  },
  {
    "name": "Qo‘qon",
    "country": "UZ",
    "lat": 40.52861,
    "long": 70.9425,
    "zone": "Asia/Tashkent"
  },
  {
    "name": "Olmaliq",
    "country": "UZ",
    "lat": 40.84472,
    "long": 69.59833,
    "zone": "Asia/Tashkent"
  },
  {
    "name": "Navoiy",
    "country": "UZ",
    "lat": 40.08444,
    "long": 65.37917,
    "zone": "Asia/Samarkand"
  },
  {
    "name": "Namangan",
    "country": "UZ",
    "lat": 40.9983,
    "long": 71.67257,
    "zone": "Asia/Tashkent"
  },
  {
    "name": "Marg‘ilon",
    "country": "UZ",
    "lat": 40.47111,
    "long": 71.72472,
    "zone": "Asia/Tashkent"
  },
  {
    "name": "Jizzax",
    "country": "UZ",
    "lat": 40.11583,
    "long": 67.84222,
    "zone": "Asia/Samarkand"
  },
  {
    "name": "Fergana",
    "country": "UZ",
    "lat": 40.38421,
    "long": 71.78432,
    "zone": "Asia/Tashkent"
  },
  {
    "name": "Chirchiq",
    "country": "UZ",
    "lat": 41.46889,
    "long": 69.58222,
    "zone": "Asia/Tashkent"
  },
  {
    "name": "Angren",
    "country": "UZ",
    "lat": 41.01667,
    "long": 70.14361,
    "zone": "Asia/Tashkent"
  },
  {
    "name": "Andijon",
    "country": "UZ",
    "lat": 40.78206,
    "long": 72.34424,
    "zone": "Asia/Tashkent"
  },
  {
    "name": "Navoiy Shahri",
    "country": "UZ",
    "lat": 40.09294,
    "long": 65.3712,
    "zone": "Asia/Samarkand"
  },
  {
    "name": "Anaco",
    "country": "VE",
    "lat": 9.43889,
    "long": -64.47278,
    "zone": "America/Caracas"
  },
  {
    "name": "Alto Barinas",
    "country": "VE",
    "lat": 8.5931,
    "long": -70.2261,
    "zone": "America/Caracas"
  },
  {
    "name": "Valencia",
    "country": "VE",
    "lat": 10.16202,
    "long": -68.00765,
    "zone": "America/Caracas"
  },
  {
    "name": "Turmero",
    "country": "VE",
    "lat": 10.22856,
    "long": -67.47421,
    "zone": "America/Caracas"
  },
  {
    "name": "Santa Teresa",
    "country": "VE",
    "lat": 10.23409,
    "long": -66.66308,
    "zone": "America/Caracas"
  },
  {
    "name": "San Cristóbal",
    "country": "VE",
    "lat": 7.76694,
    "long": -72.225,
    "zone": "America/Caracas"
  },
  {
    "name": "Punto Fijo",
    "country": "VE",
    "lat": 11.6956,
    "long": -70.19957,
    "zone": "America/Caracas"
  },
  {
    "name": "Puerto La Cruz",
    "country": "VE",
    "lat": 10.21667,
    "long": -64.61667,
    "zone": "America/Caracas"
  },
  {
    "name": "Puerto Cabello",
    "country": "VE",
    "lat": 10.47306,
    "long": -68.0125,
    "zone": "America/Caracas"
  },
  {
    "name": "Petare",
    "country": "VE",
    "lat": 10.47226,
    "long": -66.80155,
    "zone": "America/Caracas"
  },
  {
    "name": "Palo Negro",
    "country": "VE",
    "lat": 10.17389,
    "long": -67.54194,
    "zone": "America/Caracas"
  },
  {
    "name": "Ocumare del Tuy",
    "country": "VE",
    "lat": 10.11649,
    "long": -66.77609,
    "zone": "America/Caracas"
  },
  {
    "name": "Mucumpiz",
    "country": "VE",
    "lat": 8.41667,
    "long": -71.13333,
    "zone": "America/Caracas"
  },
  {
    "name": "Mérida",
    "country": "VE",
    "lat": 8.59524,
    "long": -71.1434,
    "zone": "America/Caracas"
  },
  {
    "name": "Mariara",
    "country": "VE",
    "lat": 10.29644,
    "long": -67.71813,
    "zone": "America/Caracas"
  },
  {
    "name": "Maracay",
    "country": "VE",
    "lat": 10.24694,
    "long": -67.59583,
    "zone": "America/Caracas"
  },
  {
    "name": "Maracaibo",
    "country": "VE",
    "lat": 10.63167,
    "long": -71.64056,
    "zone": "America/Caracas"
  },
  {
    "name": "Los Teques",
    "country": "VE",
    "lat": 10.34447,
    "long": -67.04325,
    "zone": "America/Caracas"
  },
  {
    "name": "Guatire",
    "country": "VE",
    "lat": 10.4762,
    "long": -66.54266,
    "zone": "America/Caracas"
  },
  {
    "name": "Guarenas",
    "country": "VE",
    "lat": 10.46736,
    "long": -66.60663,
    "zone": "America/Caracas"
  },
  {
    "name": "Guanare",
    "country": "VE",
    "lat": 9.04183,
    "long": -69.74206,
    "zone": "America/Caracas"
  },
  {
    "name": "Guacara",
    "country": "VE",
    "lat": 10.22609,
    "long": -67.877,
    "zone": "America/Caracas"
  },
  {
    "name": "El Tigre",
    "country": "VE",
    "lat": 8.88752,
    "long": -64.24544,
    "zone": "America/Caracas"
  },
  {
    "name": "El Limón",
    "country": "VE",
    "lat": 10.30589,
    "long": -67.63212,
    "zone": "America/Caracas"
  },
  {
    "name": "Ejido",
    "country": "VE",
    "lat": 8.54665,
    "long": -71.24087,
    "zone": "America/Caracas"
  },
  {
    "name": "Cumaná",
    "country": "VE",
    "lat": 10.45397,
    "long": -64.18256,
    "zone": "America/Caracas"
  },
  {
    "name": "Cúa",
    "country": "VE",
    "lat": 10.15892,
    "long": -66.88575,
    "zone": "America/Caracas"
  },
  {
    "name": "Coro",
    "country": "VE",
    "lat": 11.4045,
    "long": -69.67344,
    "zone": "America/Caracas"
  },
  {
    "name": "Ciudad Guayana",
    "country": "VE",
    "lat": 8.35122,
    "long": -62.64102,
    "zone": "America/Caracas"
  },
  {
    "name": "Ciudad Bolívar",
    "country": "VE",
    "lat": 8.12923,
    "long": -63.54086,
    "zone": "America/Caracas"
  },
  {
    "name": "Charallave",
    "country": "VE",
    "lat": 10.24247,
    "long": -66.85723,
    "zone": "America/Caracas"
  },
  {
    "name": "Catia La Mar",
    "country": "VE",
    "lat": 10.60383,
    "long": -67.03034,
    "zone": "America/Caracas"
  },
  {
    "name": "Carúpano",
    "country": "VE",
    "lat": 10.66781,
    "long": -63.25849,
    "zone": "America/Caracas"
  },
  {
    "name": "Caracas",
    "country": "VE",
    "lat": 10.48801,
    "long": -66.87919,
    "zone": "America/Caracas"
  },
  {
    "name": "Calabozo",
    "country": "VE",
    "lat": 8.92416,
    "long": -67.42929,
    "zone": "America/Caracas"
  },
  {
    "name": "Cagua",
    "country": "VE",
    "lat": 10.18634,
    "long": -67.45935,
    "zone": "America/Caracas"
  },
  {
    "name": "Cabimas",
    "country": "VE",
    "lat": 10.38828,
    "long": -71.43993,
    "zone": "America/Caracas"
  },
  {
    "name": "Baruta",
    "country": "VE",
    "lat": 10.43398,
    "long": -66.87662,
    "zone": "America/Caracas"
  },
  {
    "name": "Barquisimeto",
    "country": "VE",
    "lat": 10.07389,
    "long": -69.32278,
    "zone": "America/Caracas"
  },
  {
    "name": "Barinas",
    "country": "VE",
    "lat": 8.62261,
    "long": -70.20749,
    "zone": "America/Caracas"
  },
  {
    "name": "Barcelona",
    "country": "VE",
    "lat": 10.13333,
    "long": -64.7,
    "zone": "America/Caracas"
  },
  {
    "name": "Acarigua",
    "country": "VE",
    "lat": 9.55451,
    "long": -69.19564,
    "zone": "America/Caracas"
  },
  {
    "name": "Maturín",
    "country": "VE",
    "lat": 9.74569,
    "long": -63.18323,
    "zone": "America/Caracas"
  },
  {
    "name": "Yên Vinh",
    "country": "VN",
    "lat": 18.66667,
    "long": 105.66667,
    "zone": "Asia/Ho_Chi_Minh"
  },
  {
    "name": "Vũng Tàu",
    "country": "VN",
    "lat": 10.34599,
    "long": 107.08426,
    "zone": "Asia/Ho_Chi_Minh"
  },
  {
    "name": "Vĩnh Long",
    "country": "VN",
    "lat": 10.25369,
    "long": 105.9722,
    "zone": "Asia/Ho_Chi_Minh"
  },
  {
    "name": "Vinh",
    "country": "VN",
    "lat": 18.67337,
    "long": 105.69232,
    "zone": "Asia/Ho_Chi_Minh"
  },
  {
    "name": "Ho Chi Minh City",
    "country": "VN",
    "lat": 10.82302,
    "long": 106.62965,
    "zone": "Asia/Ho_Chi_Minh"
  },
  {
    "name": "Thanh Hóa",
    "country": "VN",
    "lat": 19.8,
    "long": 105.76667,
    "zone": "Asia/Ho_Chi_Minh"
  },
  {
    "name": "Thành Phố Thái Nguyên",
    "country": "VN",
    "lat": 21.59422,
    "long": 105.84817,
    "zone": "Asia/Ho_Chi_Minh"
  },
  {
    "name": "Sóc Trăng",
    "country": "VN",
    "lat": 9.59995,
    "long": 105.97193,
    "zone": "Asia/Ho_Chi_Minh"
  },
  {
    "name": "Sa Pá",
    "country": "VN",
    "lat": 22.34023,
    "long": 103.84415,
    "zone": "Asia/Ho_Chi_Minh"
  },
  {
    "name": "Rạch Giá",
    "country": "VN",
    "lat": 10.01245,
    "long": 105.08091,
    "zone": "Asia/Ho_Chi_Minh"
  },
  {
    "name": "Qui Nhon",
    "country": "VN",
    "lat": 13.77648,
    "long": 109.22367,
    "zone": "Asia/Ho_Chi_Minh"
  },
  {
    "name": "Pleiku",
    "country": "VN",
    "lat": 13.98333,
    "long": 108,
    "zone": "Asia/Ho_Chi_Minh"
  },
  {
    "name": "Phan Thiết",
    "country": "VN",
    "lat": 10.92889,
    "long": 108.10208,
    "zone": "Asia/Ho_Chi_Minh"
  },
  {
    "name": "Nha Trang",
    "country": "VN",
    "lat": 12.24507,
    "long": 109.19432,
    "zone": "Asia/Ho_Chi_Minh"
  },
  {
    "name": "Thành Phố Nam Định",
    "country": "VN",
    "lat": 20.43389,
    "long": 106.17729,
    "zone": "Asia/Ho_Chi_Minh"
  },
  {
    "name": "Mỹ Tho",
    "country": "VN",
    "lat": 10.36004,
    "long": 106.35996,
    "zone": "Asia/Ho_Chi_Minh"
  },
  {
    "name": "Long Xuyên",
    "country": "VN",
    "lat": 10.38639,
    "long": 105.43518,
    "zone": "Asia/Ho_Chi_Minh"
  },
  {
    "name": "La Gi",
    "country": "VN",
    "lat": 10.65993,
    "long": 107.77206,
    "zone": "Asia/Ho_Chi_Minh"
  },
  {
    "name": "Huế",
    "country": "VN",
    "lat": 16.4619,
    "long": 107.59546,
    "zone": "Asia/Ho_Chi_Minh"
  },
  {
    "name": "Thành Phố Hạ Long",
    "country": "VN",
    "lat": 20.95045,
    "long": 107.07336,
    "zone": "Asia/Ho_Chi_Minh"
  },
  {
    "name": "Thành Phố Hòa Bình",
    "country": "VN",
    "lat": 20.81717,
    "long": 105.33759,
    "zone": "Asia/Ho_Chi_Minh"
  },
  {
    "name": "Hanoi",
    "country": "VN",
    "lat": 21.0245,
    "long": 105.84117,
    "zone": "Asia/Ho_Chi_Minh"
  },
  {
    "name": "Haiphong",
    "country": "VN",
    "lat": 20.86481,
    "long": 106.68345,
    "zone": "Asia/Ho_Chi_Minh"
  },
  {
    "name": "Da Nang",
    "country": "VN",
    "lat": 16.06778,
    "long": 108.22083,
    "zone": "Asia/Ho_Chi_Minh"
  },
  {
    "name": "Ðà Lạt",
    "country": "VN",
    "lat": 11.94646,
    "long": 108.44193,
    "zone": "Asia/Ho_Chi_Minh"
  },
  {
    "name": "Cần Thơ",
    "country": "VN",
    "lat": 10.03711,
    "long": 105.78825,
    "zone": "Asia/Ho_Chi_Minh"
  },
  {
    "name": "Cần Giuộc",
    "country": "VN",
    "lat": 10.60857,
    "long": 106.67135,
    "zone": "Asia/Ho_Chi_Minh"
  },
  {
    "name": "Cam Ranh",
    "country": "VN",
    "lat": 11.92144,
    "long": 109.15913,
    "zone": "Asia/Ho_Chi_Minh"
  },
  {
    "name": "Cẩm Phả Mines",
    "country": "VN",
    "lat": 21.01667,
    "long": 107.3,
    "zone": "Asia/Ho_Chi_Minh"
  },
  {
    "name": "Cà Mau",
    "country": "VN",
    "lat": 9.17682,
    "long": 105.15242,
    "zone": "Asia/Ho_Chi_Minh"
  },
  {
    "name": "Buôn Ma Thuột",
    "country": "VN",
    "lat": 12.66747,
    "long": 108.03775,
    "zone": "Asia/Ho_Chi_Minh"
  },
  {
    "name": "Biên Hòa",
    "country": "VN",
    "lat": 10.94469,
    "long": 106.82432,
    "zone": "Asia/Ho_Chi_Minh"
  },
  {
    "name": "Bảo Lộc",
    "country": "VN",
    "lat": 11.54798,
    "long": 107.80772,
    "zone": "Asia/Ho_Chi_Minh"
  },
  {
    "name": "Thành phố Bạc Liêu",
    "country": "VN",
    "lat": 9.29414,
    "long": 105.72776,
    "zone": "Asia/Ho_Chi_Minh"
  },
  {
    "name": "Prizren",
    "country": "XK",
    "lat": 42.21389,
    "long": 20.73972,
    "zone": "Europe/Belgrade"
  },
  {
    "name": "Pristina",
    "country": "XK",
    "lat": 42.67272,
    "long": 21.16688,
    "zone": "Europe/Belgrade"
  },
  {
    "name": "Mitrovicë",
    "country": "XK",
    "lat": 42.88333,
    "long": 20.86667,
    "zone": "Europe/Belgrade"
  },
  {
    "name": "Ta‘izz",
    "country": "YE",
    "lat": 13.57952,
    "long": 44.02091,
    "zone": "Asia/Aden"
  },
  {
    "name": "Sanaa",
    "country": "YE",
    "lat": 15.35472,
    "long": 44.20667,
    "zone": "Asia/Aden"
  },
  {
    "name": "Ibb",
    "country": "YE",
    "lat": 13.96667,
    "long": 44.18333,
    "zone": "Asia/Aden"
  },
  {
    "name": "Dhamār",
    "country": "YE",
    "lat": 14.54274,
    "long": 44.40514,
    "zone": "Asia/Aden"
  },
  {
    "name": "Al Mukallā",
    "country": "YE",
    "lat": 14.54248,
    "long": 49.12424,
    "zone": "Asia/Aden"
  },
  {
    "name": "Al Ḩudaydah",
    "country": "YE",
    "lat": 14.79781,
    "long": 42.95452,
    "zone": "Asia/Aden"
  },
  {
    "name": "Aden",
    "country": "YE",
    "lat": 12.77944,
    "long": 45.03667,
    "zone": "Asia/Aden"
  },
  {
    "name": "Roodepoort",
    "country": "ZA",
    "lat": -26.1625,
    "long": 27.8725,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Witbank",
    "country": "ZA",
    "lat": -25.87133,
    "long": 29.23323,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Westonaria",
    "country": "ZA",
    "lat": -26.31905,
    "long": 27.6486,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Welkom",
    "country": "ZA",
    "lat": -27.97742,
    "long": 26.73506,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Vryheid",
    "country": "ZA",
    "lat": -27.76952,
    "long": 30.79165,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Virginia",
    "country": "ZA",
    "lat": -28.10391,
    "long": 26.86593,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Vereeniging",
    "country": "ZA",
    "lat": -26.67313,
    "long": 27.92615,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Vanderbijlpark",
    "country": "ZA",
    "lat": -26.71171,
    "long": 27.83795,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Uitenhage",
    "country": "ZA",
    "lat": -33.75757,
    "long": 25.3971,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Tembisa",
    "country": "ZA",
    "lat": -25.99636,
    "long": 28.2268,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Springs",
    "country": "ZA",
    "lat": -26.25,
    "long": 28.4,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Soweto",
    "country": "ZA",
    "lat": -26.26781,
    "long": 27.85849,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Rustenburg",
    "country": "ZA",
    "lat": -25.66756,
    "long": 27.24208,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Richards Bay",
    "country": "ZA",
    "lat": -28.78301,
    "long": 32.03768,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Randfontein",
    "country": "ZA",
    "lat": -26.1844,
    "long": 27.70203,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Queenstown",
    "country": "ZA",
    "lat": -31.89756,
    "long": 26.87533,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Pretoria",
    "country": "ZA",
    "lat": -25.74486,
    "long": 28.18783,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Mokopane",
    "country": "ZA",
    "lat": -24.19436,
    "long": 29.00974,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Potchefstroom",
    "country": "ZA",
    "lat": -26.71667,
    "long": 27.1,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Port Elizabeth",
    "country": "ZA",
    "lat": -33.91799,
    "long": 25.57007,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Polokwane",
    "country": "ZA",
    "lat": -23.90449,
    "long": 29.46885,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Pietermaritzburg",
    "country": "ZA",
    "lat": -29.61679,
    "long": 30.39278,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Phalaborwa",
    "country": "ZA",
    "lat": -23.94299,
    "long": 31.14107,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Orkney",
    "country": "ZA",
    "lat": -26.98023,
    "long": 26.67272,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Nigel",
    "country": "ZA",
    "lat": -26.43138,
    "long": 28.47713,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Newcastle",
    "country": "ZA",
    "lat": -27.75796,
    "long": 29.9318,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Nelspruit",
    "country": "ZA",
    "lat": -25.47448,
    "long": 30.97033,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Mpumalanga",
    "country": "ZA",
    "lat": -29.81292,
    "long": 30.63646,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Mossel Bay",
    "country": "ZA",
    "lat": -34.18307,
    "long": 22.14605,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Middelburg",
    "country": "ZA",
    "lat": -25.77507,
    "long": 29.46482,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Krugersdorp",
    "country": "ZA",
    "lat": -26.08577,
    "long": 27.77515,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Kroonstad",
    "country": "ZA",
    "lat": -27.65036,
    "long": 27.23488,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Klerksdorp",
    "country": "ZA",
    "lat": -26.85213,
    "long": 26.66672,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Kimberley",
    "country": "ZA",
    "lat": -28.73226,
    "long": 24.76232,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Johannesburg",
    "country": "ZA",
    "lat": -26.20227,
    "long": 28.04363,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "George",
    "country": "ZA",
    "lat": -33.963,
    "long": 22.46173,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "eMbalenhle",
    "country": "ZA",
    "lat": -26.53333,
    "long": 29.06667,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "East London",
    "country": "ZA",
    "lat": -33.01529,
    "long": 27.91162,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Durban",
    "country": "ZA",
    "lat": -29.8579,
    "long": 31.0292,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Carletonville",
    "country": "ZA",
    "lat": -26.36094,
    "long": 27.39767,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Brits",
    "country": "ZA",
    "lat": -25.63473,
    "long": 27.78022,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Brakpan",
    "country": "ZA",
    "lat": -26.23656,
    "long": 28.36938,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Botshabelo",
    "country": "ZA",
    "lat": -29.27016,
    "long": 26.7052,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Boksburg",
    "country": "ZA",
    "lat": -26.21197,
    "long": 28.25958,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Bloemfontein",
    "country": "ZA",
    "lat": -29.12107,
    "long": 26.214,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Bhisho",
    "country": "ZA",
    "lat": -32.84721,
    "long": 27.44218,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Bethal",
    "country": "ZA",
    "lat": -26.45794,
    "long": 29.46553,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Benoni",
    "country": "ZA",
    "lat": -26.18848,
    "long": 28.32078,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Midrand",
    "country": "ZA",
    "lat": -25.98953,
    "long": 28.12843,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Centurion",
    "country": "ZA",
    "lat": -25.85891,
    "long": 28.18577,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Worcester",
    "country": "ZA",
    "lat": -33.64651,
    "long": 19.44852,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Paarl",
    "country": "ZA",
    "lat": -33.73378,
    "long": 18.97523,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Cape Town",
    "country": "ZA",
    "lat": -33.92584,
    "long": 18.42322,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Diepsloot",
    "country": "ZA",
    "lat": -25.93312,
    "long": 28.01213,
    "zone": "Africa/Johannesburg"
  },
  {
    "name": "Ndola",
    "country": "ZM",
    "lat": -12.95867,
    "long": 28.63659,
    "zone": "Africa/Lusaka"
  },
  {
    "name": "Mufulira",
    "country": "ZM",
    "lat": -12.54982,
    "long": 28.24071,
    "zone": "Africa/Lusaka"
  },
  {
    "name": "Lusaka",
    "country": "ZM",
    "lat": -15.40669,
    "long": 28.28713,
    "zone": "Africa/Lusaka"
  },
  {
    "name": "Luanshya",
    "country": "ZM",
    "lat": -13.13667,
    "long": 28.41661,
    "zone": "Africa/Lusaka"
  },
  {
    "name": "Livingstone",
    "country": "ZM",
    "lat": -17.84194,
    "long": 25.85425,
    "zone": "Africa/Lusaka"
  },
  {
    "name": "Kitwe",
    "country": "ZM",
    "lat": -12.80243,
    "long": 28.21323,
    "zone": "Africa/Lusaka"
  },
  {
    "name": "Kabwe",
    "country": "ZM",
    "lat": -14.4469,
    "long": 28.44644,
    "zone": "Africa/Lusaka"
  },
  {
    "name": "Chingola",
    "country": "ZM",
    "lat": -12.52897,
    "long": 27.88382,
    "zone": "Africa/Lusaka"
  },
  {
    "name": "Mutare",
    "country": "ZW",
    "lat": -18.9707,
    "long": 32.67086,
    "zone": "Africa/Harare"
  },
  {
    "name": "Harare",
    "country": "ZW",
    "lat": -17.82772,
    "long": 31.05337,
    "zone": "Africa/Harare"
  },
  {
    "name": "Gweru",
    "country": "ZW",
    "lat": -19.45,
    "long": 29.81667,
    "zone": "Africa/Harare"
  },
  {
    "name": "Bulawayo",
    "country": "ZW",
    "lat": -20.15,
    "long": 28.58333,
    "zone": "Africa/Harare"
  },
  {
    "name": "Epworth",
    "country": "ZW",
    "lat": -17.89,
    "long": 31.1475,
    "zone": "Africa/Harare"
  },
  {
    "name": "Chitungwiza",
    "country": "ZW",
    "lat": -18.01274,
    "long": 31.07555,
    "zone": "Africa/Harare"
  }
];

},{}],"/Users/claudiocalautti/Projects/TmzTab/tmz-clocks-app/src/scripts/data/zones.js":[function(require,module,exports){
module.exports = [
  {
    "name": "Africa/Casablanca",
    "abbrs": [
      "WET",
      "WEST",
      "WET",
      "WEST",
      "WET"
    ],
    "untils": [
      1427594400000,
      1434160800000,
      1437184800000,
      1445738400000,
      null
    ],
    "offsets": [
      0,
      -60,
      0,
      -60,
      0
    ]
  },
  {
    "name": "Africa/Ceuta",
    "abbrs": [
      "CET",
      "CEST",
      "CET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -60,
      -120,
      -60
    ]
  },
  {
    "name": "Africa/El_Aaiun",
    "abbrs": [
      "WET",
      "WEST",
      "WET",
      "WEST",
      "WET"
    ],
    "untils": [
      1427594400000,
      1434160800000,
      1437184800000,
      1445738400000,
      null
    ],
    "offsets": [
      0,
      -60,
      0,
      -60,
      0
    ]
  },
  {
    "name": "Africa/Windhoek",
    "abbrs": [
      "WAST",
      "WAT",
      "WAST"
    ],
    "untils": [
      1428192000000,
      1441501200000,
      null
    ],
    "offsets": [
      -120,
      -60,
      -120
    ]
  },
  {
    "name": "America/Adak",
    "abbrs": [
      "HST",
      "HDT",
      "HST"
    ],
    "untils": [
      1425816000000,
      1446375600000,
      null
    ],
    "offsets": [
      600,
      540,
      600
    ]
  },
  {
    "name": "America/Anchorage",
    "abbrs": [
      "AKST",
      "AKDT",
      "AKST"
    ],
    "untils": [
      1425812400000,
      1446372000000,
      null
    ],
    "offsets": [
      540,
      480,
      540
    ]
  },
  {
    "name": "America/Asuncion",
    "abbrs": [
      "PYST",
      "PYT",
      "PYST"
    ],
    "untils": [
      1426993200000,
      1443931200000,
      null
    ],
    "offsets": [
      180,
      240,
      180
    ]
  },
  {
    "name": "America/Atka",
    "abbrs": [
      "HST",
      "HDT",
      "HST"
    ],
    "untils": [
      1425816000000,
      1446375600000,
      null
    ],
    "offsets": [
      600,
      540,
      600
    ]
  },
  {
    "name": "America/Bahia_Banderas",
    "abbrs": [
      "CST",
      "CDT",
      "CST"
    ],
    "untils": [
      1428220800000,
      1445756400000,
      null
    ],
    "offsets": [
      360,
      300,
      360
    ]
  },
  {
    "name": "America/Boise",
    "abbrs": [
      "MST",
      "MDT",
      "MST"
    ],
    "untils": [
      1425805200000,
      1446364800000,
      null
    ],
    "offsets": [
      420,
      360,
      420
    ]
  },
  {
    "name": "America/Cambridge_Bay",
    "abbrs": [
      "MST",
      "MDT",
      "MST"
    ],
    "untils": [
      1425805200000,
      1446364800000,
      null
    ],
    "offsets": [
      420,
      360,
      420
    ]
  },
  {
    "name": "America/Campo_Grande",
    "abbrs": [
      "AMST",
      "AMT",
      "AMST"
    ],
    "untils": [
      1424574000000,
      1445140800000,
      null
    ],
    "offsets": [
      180,
      240,
      180
    ]
  },
  {
    "name": "America/Cancun",
    "abbrs": [
      "CST",
      "EST"
    ],
    "untils": [
      1422777600000,
      null
    ],
    "offsets": [
      360,
      300
    ]
  },
  {
    "name": "America/Chicago",
    "abbrs": [
      "CST",
      "CDT",
      "CST"
    ],
    "untils": [
      1425801600000,
      1446361200000,
      null
    ],
    "offsets": [
      360,
      300,
      360
    ]
  },
  {
    "name": "America/Chihuahua",
    "abbrs": [
      "MST",
      "MDT",
      "MST"
    ],
    "untils": [
      1428224400000,
      1445760000000,
      null
    ],
    "offsets": [
      420,
      360,
      420
    ]
  },
  {
    "name": "America/Cuiaba",
    "abbrs": [
      "AMST",
      "AMT",
      "AMST"
    ],
    "untils": [
      1424574000000,
      1445140800000,
      null
    ],
    "offsets": [
      180,
      240,
      180
    ]
  },
  {
    "name": "America/Dawson",
    "abbrs": [
      "PST",
      "PDT",
      "PST"
    ],
    "untils": [
      1425808800000,
      1446368400000,
      null
    ],
    "offsets": [
      480,
      420,
      480
    ]
  },
  {
    "name": "America/Denver",
    "abbrs": [
      "MST",
      "MDT",
      "MST"
    ],
    "untils": [
      1425805200000,
      1446364800000,
      null
    ],
    "offsets": [
      420,
      360,
      420
    ]
  },
  {
    "name": "America/Detroit",
    "abbrs": [
      "EST",
      "EDT",
      "EST"
    ],
    "untils": [
      1425798000000,
      1446357600000,
      null
    ],
    "offsets": [
      300,
      240,
      300
    ]
  },
  {
    "name": "America/Edmonton",
    "abbrs": [
      "MST",
      "MDT",
      "MST"
    ],
    "untils": [
      1425805200000,
      1446364800000,
      null
    ],
    "offsets": [
      420,
      360,
      420
    ]
  },
  {
    "name": "America/Ensenada",
    "abbrs": [
      "PST",
      "PDT",
      "PST"
    ],
    "untils": [
      1425808800000,
      1446368400000,
      null
    ],
    "offsets": [
      480,
      420,
      480
    ]
  },
  {
    "name": "America/Fort_Wayne",
    "abbrs": [
      "EST",
      "EDT",
      "EST"
    ],
    "untils": [
      1425798000000,
      1446357600000,
      null
    ],
    "offsets": [
      300,
      240,
      300
    ]
  },
  {
    "name": "America/Glace_Bay",
    "abbrs": [
      "AST",
      "ADT",
      "AST"
    ],
    "untils": [
      1425794400000,
      1446354000000,
      null
    ],
    "offsets": [
      240,
      180,
      240
    ]
  },
  {
    "name": "America/Godthab",
    "abbrs": [
      "WGT",
      "WGST",
      "WGT"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      180,
      120,
      180
    ]
  },
  {
    "name": "America/Goose_Bay",
    "abbrs": [
      "AST",
      "ADT",
      "AST"
    ],
    "untils": [
      1425794400000,
      1446354000000,
      null
    ],
    "offsets": [
      240,
      180,
      240
    ]
  },
  {
    "name": "America/Grand_Turk",
    "abbrs": [
      "EST",
      "EDT",
      "AST"
    ],
    "untils": [
      1425798000000,
      1446357600000,
      null
    ],
    "offsets": [
      300,
      240,
      240
    ]
  },
  {
    "name": "America/Halifax",
    "abbrs": [
      "AST",
      "ADT",
      "AST"
    ],
    "untils": [
      1425794400000,
      1446354000000,
      null
    ],
    "offsets": [
      240,
      180,
      240
    ]
  },
  {
    "name": "America/Havana",
    "abbrs": [
      "CST",
      "CDT",
      "CST"
    ],
    "untils": [
      1425790800000,
      1446354000000,
      null
    ],
    "offsets": [
      300,
      240,
      300
    ]
  },
  {
    "name": "America/Indiana/Indianapolis",
    "abbrs": [
      "EST",
      "EDT",
      "EST"
    ],
    "untils": [
      1425798000000,
      1446357600000,
      null
    ],
    "offsets": [
      300,
      240,
      300
    ]
  },
  {
    "name": "America/Indiana/Knox",
    "abbrs": [
      "CST",
      "CDT",
      "CST"
    ],
    "untils": [
      1425801600000,
      1446361200000,
      null
    ],
    "offsets": [
      360,
      300,
      360
    ]
  },
  {
    "name": "America/Indiana/Marengo",
    "abbrs": [
      "EST",
      "EDT",
      "EST"
    ],
    "untils": [
      1425798000000,
      1446357600000,
      null
    ],
    "offsets": [
      300,
      240,
      300
    ]
  },
  {
    "name": "America/Indiana/Petersburg",
    "abbrs": [
      "EST",
      "EDT",
      "EST"
    ],
    "untils": [
      1425798000000,
      1446357600000,
      null
    ],
    "offsets": [
      300,
      240,
      300
    ]
  },
  {
    "name": "America/Indiana/Tell_City",
    "abbrs": [
      "CST",
      "CDT",
      "CST"
    ],
    "untils": [
      1425801600000,
      1446361200000,
      null
    ],
    "offsets": [
      360,
      300,
      360
    ]
  },
  {
    "name": "America/Indiana/Vevay",
    "abbrs": [
      "EST",
      "EDT",
      "EST"
    ],
    "untils": [
      1425798000000,
      1446357600000,
      null
    ],
    "offsets": [
      300,
      240,
      300
    ]
  },
  {
    "name": "America/Indiana/Vincennes",
    "abbrs": [
      "EST",
      "EDT",
      "EST"
    ],
    "untils": [
      1425798000000,
      1446357600000,
      null
    ],
    "offsets": [
      300,
      240,
      300
    ]
  },
  {
    "name": "America/Indiana/Winamac",
    "abbrs": [
      "EST",
      "EDT",
      "EST"
    ],
    "untils": [
      1425798000000,
      1446357600000,
      null
    ],
    "offsets": [
      300,
      240,
      300
    ]
  },
  {
    "name": "America/Indianapolis",
    "abbrs": [
      "EST",
      "EDT",
      "EST"
    ],
    "untils": [
      1425798000000,
      1446357600000,
      null
    ],
    "offsets": [
      300,
      240,
      300
    ]
  },
  {
    "name": "America/Inuvik",
    "abbrs": [
      "MST",
      "MDT",
      "MST"
    ],
    "untils": [
      1425805200000,
      1446364800000,
      null
    ],
    "offsets": [
      420,
      360,
      420
    ]
  },
  {
    "name": "America/Iqaluit",
    "abbrs": [
      "EST",
      "EDT",
      "EST"
    ],
    "untils": [
      1425798000000,
      1446357600000,
      null
    ],
    "offsets": [
      300,
      240,
      300
    ]
  },
  {
    "name": "America/Juneau",
    "abbrs": [
      "AKST",
      "AKDT",
      "AKST"
    ],
    "untils": [
      1425812400000,
      1446372000000,
      null
    ],
    "offsets": [
      540,
      480,
      540
    ]
  },
  {
    "name": "America/Kentucky/Louisville",
    "abbrs": [
      "EST",
      "EDT",
      "EST"
    ],
    "untils": [
      1425798000000,
      1446357600000,
      null
    ],
    "offsets": [
      300,
      240,
      300
    ]
  },
  {
    "name": "America/Kentucky/Monticello",
    "abbrs": [
      "EST",
      "EDT",
      "EST"
    ],
    "untils": [
      1425798000000,
      1446357600000,
      null
    ],
    "offsets": [
      300,
      240,
      300
    ]
  },
  {
    "name": "America/Knox_IN",
    "abbrs": [
      "CST",
      "CDT",
      "CST"
    ],
    "untils": [
      1425801600000,
      1446361200000,
      null
    ],
    "offsets": [
      360,
      300,
      360
    ]
  },
  {
    "name": "America/Los_Angeles",
    "abbrs": [
      "PST",
      "PDT",
      "PST"
    ],
    "untils": [
      1425808800000,
      1446368400000,
      null
    ],
    "offsets": [
      480,
      420,
      480
    ]
  },
  {
    "name": "America/Louisville",
    "abbrs": [
      "EST",
      "EDT",
      "EST"
    ],
    "untils": [
      1425798000000,
      1446357600000,
      null
    ],
    "offsets": [
      300,
      240,
      300
    ]
  },
  {
    "name": "America/Matamoros",
    "abbrs": [
      "CST",
      "CDT",
      "CST"
    ],
    "untils": [
      1425801600000,
      1446361200000,
      null
    ],
    "offsets": [
      360,
      300,
      360
    ]
  },
  {
    "name": "America/Mazatlan",
    "abbrs": [
      "MST",
      "MDT",
      "MST"
    ],
    "untils": [
      1428224400000,
      1445760000000,
      null
    ],
    "offsets": [
      420,
      360,
      420
    ]
  },
  {
    "name": "America/Menominee",
    "abbrs": [
      "CST",
      "CDT",
      "CST"
    ],
    "untils": [
      1425801600000,
      1446361200000,
      null
    ],
    "offsets": [
      360,
      300,
      360
    ]
  },
  {
    "name": "America/Merida",
    "abbrs": [
      "CST",
      "CDT",
      "CST"
    ],
    "untils": [
      1428220800000,
      1445756400000,
      null
    ],
    "offsets": [
      360,
      300,
      360
    ]
  },
  {
    "name": "America/Mexico_City",
    "abbrs": [
      "CST",
      "CDT",
      "CST"
    ],
    "untils": [
      1428220800000,
      1445756400000,
      null
    ],
    "offsets": [
      360,
      300,
      360
    ]
  },
  {
    "name": "America/Miquelon",
    "abbrs": [
      "PMST",
      "PMDT",
      "PMST"
    ],
    "untils": [
      1425790800000,
      1446350400000,
      null
    ],
    "offsets": [
      180,
      120,
      180
    ]
  },
  {
    "name": "America/Moncton",
    "abbrs": [
      "AST",
      "ADT",
      "AST"
    ],
    "untils": [
      1425794400000,
      1446354000000,
      null
    ],
    "offsets": [
      240,
      180,
      240
    ]
  },
  {
    "name": "America/Monterrey",
    "abbrs": [
      "CST",
      "CDT",
      "CST"
    ],
    "untils": [
      1428220800000,
      1445756400000,
      null
    ],
    "offsets": [
      360,
      300,
      360
    ]
  },
  {
    "name": "America/Montevideo",
    "abbrs": [
      "UYST",
      "UYT",
      "UYST"
    ],
    "untils": [
      1425787200000,
      1443934800000,
      null
    ],
    "offsets": [
      120,
      180,
      120
    ]
  },
  {
    "name": "America/Montreal",
    "abbrs": [
      "EST",
      "EDT",
      "EST"
    ],
    "untils": [
      1425798000000,
      1446357600000,
      null
    ],
    "offsets": [
      300,
      240,
      300
    ]
  },
  {
    "name": "America/Nassau",
    "abbrs": [
      "EST",
      "EDT",
      "EST"
    ],
    "untils": [
      1425798000000,
      1446357600000,
      null
    ],
    "offsets": [
      300,
      240,
      300
    ]
  },
  {
    "name": "America/New_York",
    "abbrs": [
      "EST",
      "EDT",
      "EST"
    ],
    "untils": [
      1425798000000,
      1446357600000,
      null
    ],
    "offsets": [
      300,
      240,
      300
    ]
  },
  {
    "name": "America/Nipigon",
    "abbrs": [
      "EST",
      "EDT",
      "EST"
    ],
    "untils": [
      1425798000000,
      1446357600000,
      null
    ],
    "offsets": [
      300,
      240,
      300
    ]
  },
  {
    "name": "America/Nome",
    "abbrs": [
      "AKST",
      "AKDT",
      "AKST"
    ],
    "untils": [
      1425812400000,
      1446372000000,
      null
    ],
    "offsets": [
      540,
      480,
      540
    ]
  },
  {
    "name": "America/North_Dakota/Beulah",
    "abbrs": [
      "CST",
      "CDT",
      "CST"
    ],
    "untils": [
      1425801600000,
      1446361200000,
      null
    ],
    "offsets": [
      360,
      300,
      360
    ]
  },
  {
    "name": "America/North_Dakota/Center",
    "abbrs": [
      "CST",
      "CDT",
      "CST"
    ],
    "untils": [
      1425801600000,
      1446361200000,
      null
    ],
    "offsets": [
      360,
      300,
      360
    ]
  },
  {
    "name": "America/North_Dakota/New_Salem",
    "abbrs": [
      "CST",
      "CDT",
      "CST"
    ],
    "untils": [
      1425801600000,
      1446361200000,
      null
    ],
    "offsets": [
      360,
      300,
      360
    ]
  },
  {
    "name": "America/Ojinaga",
    "abbrs": [
      "MST",
      "MDT",
      "MST"
    ],
    "untils": [
      1425805200000,
      1446364800000,
      null
    ],
    "offsets": [
      420,
      360,
      420
    ]
  },
  {
    "name": "America/Pangnirtung",
    "abbrs": [
      "EST",
      "EDT",
      "EST"
    ],
    "untils": [
      1425798000000,
      1446357600000,
      null
    ],
    "offsets": [
      300,
      240,
      300
    ]
  },
  {
    "name": "America/Port-au-Prince",
    "abbrs": [
      "EST",
      "EDT",
      "EST"
    ],
    "untils": [
      1425798000000,
      1446357600000,
      null
    ],
    "offsets": [
      300,
      240,
      300
    ]
  },
  {
    "name": "America/Rainy_River",
    "abbrs": [
      "CST",
      "CDT",
      "CST"
    ],
    "untils": [
      1425801600000,
      1446361200000,
      null
    ],
    "offsets": [
      360,
      300,
      360
    ]
  },
  {
    "name": "America/Rankin_Inlet",
    "abbrs": [
      "CST",
      "CDT",
      "CST"
    ],
    "untils": [
      1425801600000,
      1446361200000,
      null
    ],
    "offsets": [
      360,
      300,
      360
    ]
  },
  {
    "name": "America/Resolute",
    "abbrs": [
      "CST",
      "CDT",
      "CST"
    ],
    "untils": [
      1425801600000,
      1446361200000,
      null
    ],
    "offsets": [
      360,
      300,
      360
    ]
  },
  {
    "name": "America/Santa_Isabel",
    "abbrs": [
      "PST",
      "PDT",
      "PST"
    ],
    "untils": [
      1428228000000,
      1445763600000,
      null
    ],
    "offsets": [
      480,
      420,
      480
    ]
  },
  {
    "name": "America/Santiago",
    "abbrs": [
      "CLST",
      "CLT"
    ],
    "untils": [
      1430017200000,
      null
    ],
    "offsets": [
      180,
      180
    ]
  },
  {
    "name": "America/Sao_Paulo",
    "abbrs": [
      "BRST",
      "BRT",
      "BRST"
    ],
    "untils": [
      1424570400000,
      1445137200000,
      null
    ],
    "offsets": [
      120,
      180,
      120
    ]
  },
  {
    "name": "America/Scoresbysund",
    "abbrs": [
      "EGT",
      "EGST",
      "EGT"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      60,
      0,
      60
    ]
  },
  {
    "name": "America/Shiprock",
    "abbrs": [
      "MST",
      "MDT",
      "MST"
    ],
    "untils": [
      1425805200000,
      1446364800000,
      null
    ],
    "offsets": [
      420,
      360,
      420
    ]
  },
  {
    "name": "America/Sitka",
    "abbrs": [
      "AKST",
      "AKDT",
      "AKST"
    ],
    "untils": [
      1425812400000,
      1446372000000,
      null
    ],
    "offsets": [
      540,
      480,
      540
    ]
  },
  {
    "name": "America/St_Johns",
    "abbrs": [
      "NST",
      "NDT",
      "NST"
    ],
    "untils": [
      1425792600000,
      1446352200000,
      null
    ],
    "offsets": [
      210,
      150,
      210
    ]
  },
  {
    "name": "America/Thule",
    "abbrs": [
      "AST",
      "ADT",
      "AST"
    ],
    "untils": [
      1425794400000,
      1446354000000,
      null
    ],
    "offsets": [
      240,
      180,
      240
    ]
  },
  {
    "name": "America/Thunder_Bay",
    "abbrs": [
      "EST",
      "EDT",
      "EST"
    ],
    "untils": [
      1425798000000,
      1446357600000,
      null
    ],
    "offsets": [
      300,
      240,
      300
    ]
  },
  {
    "name": "America/Tijuana",
    "abbrs": [
      "PST",
      "PDT",
      "PST"
    ],
    "untils": [
      1425808800000,
      1446368400000,
      null
    ],
    "offsets": [
      480,
      420,
      480
    ]
  },
  {
    "name": "America/Toronto",
    "abbrs": [
      "EST",
      "EDT",
      "EST"
    ],
    "untils": [
      1425798000000,
      1446357600000,
      null
    ],
    "offsets": [
      300,
      240,
      300
    ]
  },
  {
    "name": "America/Vancouver",
    "abbrs": [
      "PST",
      "PDT",
      "PST"
    ],
    "untils": [
      1425808800000,
      1446368400000,
      null
    ],
    "offsets": [
      480,
      420,
      480
    ]
  },
  {
    "name": "America/Whitehorse",
    "abbrs": [
      "PST",
      "PDT",
      "PST"
    ],
    "untils": [
      1425808800000,
      1446368400000,
      null
    ],
    "offsets": [
      480,
      420,
      480
    ]
  },
  {
    "name": "America/Winnipeg",
    "abbrs": [
      "CST",
      "CDT",
      "CST"
    ],
    "untils": [
      1425801600000,
      1446361200000,
      null
    ],
    "offsets": [
      360,
      300,
      360
    ]
  },
  {
    "name": "America/Yakutat",
    "abbrs": [
      "AKST",
      "AKDT",
      "AKST"
    ],
    "untils": [
      1425812400000,
      1446372000000,
      null
    ],
    "offsets": [
      540,
      480,
      540
    ]
  },
  {
    "name": "America/Yellowknife",
    "abbrs": [
      "MST",
      "MDT",
      "MST"
    ],
    "untils": [
      1425805200000,
      1446364800000,
      null
    ],
    "offsets": [
      420,
      360,
      420
    ]
  },
  {
    "name": "Antarctica/McMurdo",
    "abbrs": [
      "NZDT",
      "NZST",
      "NZDT"
    ],
    "untils": [
      1428156000000,
      1443276000000,
      null
    ],
    "offsets": [
      -780,
      -720,
      -780
    ]
  },
  {
    "name": "Antarctica/Palmer",
    "abbrs": [
      "CLST",
      "CLT"
    ],
    "untils": [
      1430017200000,
      null
    ],
    "offsets": [
      180,
      180
    ]
  },
  {
    "name": "Antarctica/South_Pole",
    "abbrs": [
      "NZDT",
      "NZST",
      "NZDT"
    ],
    "untils": [
      1428156000000,
      1443276000000,
      null
    ],
    "offsets": [
      -780,
      -720,
      -780
    ]
  },
  {
    "name": "Antarctica/Troll",
    "abbrs": [
      "UTC",
      "CEST",
      "UTC"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      0,
      -120,
      0
    ]
  },
  {
    "name": "Arctic/Longyearbyen",
    "abbrs": [
      "CET",
      "CEST",
      "CET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -60,
      -120,
      -60
    ]
  },
  {
    "name": "Asia/Amman",
    "abbrs": [
      "EET",
      "EEST",
      "EET"
    ],
    "untils": [
      1427407200000,
      1446156000000,
      null
    ],
    "offsets": [
      -120,
      -180,
      -120
    ]
  },
  {
    "name": "Asia/Baku",
    "abbrs": [
      "AZT",
      "AZST",
      "AZT"
    ],
    "untils": [
      1427587200000,
      1445731200000,
      null
    ],
    "offsets": [
      -240,
      -300,
      -240
    ]
  },
  {
    "name": "Asia/Beirut",
    "abbrs": [
      "EET",
      "EEST",
      "EET"
    ],
    "untils": [
      1427580000000,
      1445720400000,
      null
    ],
    "offsets": [
      -120,
      -180,
      -120
    ]
  },
  {
    "name": "Asia/Choibalsan",
    "abbrs": [
      "CHOT",
      "CHOST",
      "CHOT"
    ],
    "untils": [
      1427479200000,
      1443193200000,
      null
    ],
    "offsets": [
      -480,
      -540,
      -480
    ]
  },
  {
    "name": "Asia/Damascus",
    "abbrs": [
      "EET",
      "EEST",
      "EET"
    ],
    "untils": [
      1427407200000,
      1446152400000,
      null
    ],
    "offsets": [
      -120,
      -180,
      -120
    ]
  },
  {
    "name": "Asia/Gaza",
    "abbrs": [
      "EET",
      "EEST",
      "EET"
    ],
    "untils": [
      1427493600000,
      1445547600000,
      null
    ],
    "offsets": [
      -120,
      -180,
      -120
    ]
  },
  {
    "name": "Asia/Hebron",
    "abbrs": [
      "EET",
      "EEST",
      "EET"
    ],
    "untils": [
      1427493600000,
      1445547600000,
      null
    ],
    "offsets": [
      -120,
      -180,
      -120
    ]
  },
  {
    "name": "Asia/Hovd",
    "abbrs": [
      "HOVT",
      "HOVST",
      "HOVT"
    ],
    "untils": [
      1427482800000,
      1443196800000,
      null
    ],
    "offsets": [
      -420,
      -480,
      -420
    ]
  },
  {
    "name": "Asia/Istanbul",
    "abbrs": [
      "EET",
      "EEST",
      "EET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -120,
      -180,
      -120
    ]
  },
  {
    "name": "Asia/Jerusalem",
    "abbrs": [
      "IST",
      "IDT",
      "IST"
    ],
    "untils": [
      1427414400000,
      1445727600000,
      null
    ],
    "offsets": [
      -120,
      -180,
      -120
    ]
  },
  {
    "name": "Asia/Nicosia",
    "abbrs": [
      "EET",
      "EEST",
      "EET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -120,
      -180,
      -120
    ]
  },
  {
    "name": "Asia/Tehran",
    "abbrs": [
      "IRST",
      "IRDT",
      "IRST"
    ],
    "untils": [
      1426969800000,
      1442863800000,
      null
    ],
    "offsets": [
      -210,
      -270,
      -210
    ]
  },
  {
    "name": "Asia/Tel_Aviv",
    "abbrs": [
      "IST",
      "IDT",
      "IST"
    ],
    "untils": [
      1427414400000,
      1445727600000,
      null
    ],
    "offsets": [
      -120,
      -180,
      -120
    ]
  },
  {
    "name": "Asia/Ulaanbaatar",
    "abbrs": [
      "ULAT",
      "ULAST",
      "ULAT"
    ],
    "untils": [
      1427479200000,
      1443193200000,
      null
    ],
    "offsets": [
      -480,
      -540,
      -480
    ]
  },
  {
    "name": "Asia/Ulan_Bator",
    "abbrs": [
      "ULAT",
      "ULAST",
      "ULAT"
    ],
    "untils": [
      1427479200000,
      1443193200000,
      null
    ],
    "offsets": [
      -480,
      -540,
      -480
    ]
  },
  {
    "name": "Atlantic/Azores",
    "abbrs": [
      "AZOT",
      "AZOST",
      "AZOT"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      60,
      0,
      60
    ]
  },
  {
    "name": "Atlantic/Bermuda",
    "abbrs": [
      "AST",
      "ADT",
      "AST"
    ],
    "untils": [
      1425794400000,
      1446354000000,
      null
    ],
    "offsets": [
      240,
      180,
      240
    ]
  },
  {
    "name": "Atlantic/Canary",
    "abbrs": [
      "WET",
      "WEST",
      "WET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      0,
      -60,
      0
    ]
  },
  {
    "name": "Atlantic/Faeroe",
    "abbrs": [
      "WET",
      "WEST",
      "WET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      0,
      -60,
      0
    ]
  },
  {
    "name": "Atlantic/Faroe",
    "abbrs": [
      "WET",
      "WEST",
      "WET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      0,
      -60,
      0
    ]
  },
  {
    "name": "Atlantic/Jan_Mayen",
    "abbrs": [
      "CET",
      "CEST",
      "CET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -60,
      -120,
      -60
    ]
  },
  {
    "name": "Atlantic/Madeira",
    "abbrs": [
      "WET",
      "WEST",
      "WET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      0,
      -60,
      0
    ]
  },
  {
    "name": "Australia/ACT",
    "abbrs": [
      "AEDT",
      "AEST",
      "AEDT"
    ],
    "untils": [
      1428163200000,
      1443888000000,
      null
    ],
    "offsets": [
      -660,
      -600,
      -660
    ]
  },
  {
    "name": "Australia/Adelaide",
    "abbrs": [
      "ACDT",
      "ACST",
      "ACDT"
    ],
    "untils": [
      1428165000000,
      1443889800000,
      null
    ],
    "offsets": [
      -630,
      -570,
      -630
    ]
  },
  {
    "name": "Australia/Broken_Hill",
    "abbrs": [
      "ACDT",
      "ACST",
      "ACDT"
    ],
    "untils": [
      1428165000000,
      1443889800000,
      null
    ],
    "offsets": [
      -630,
      -570,
      -630
    ]
  },
  {
    "name": "Australia/Canberra",
    "abbrs": [
      "AEDT",
      "AEST",
      "AEDT"
    ],
    "untils": [
      1428163200000,
      1443888000000,
      null
    ],
    "offsets": [
      -660,
      -600,
      -660
    ]
  },
  {
    "name": "Australia/Currie",
    "abbrs": [
      "AEDT",
      "AEST",
      "AEDT"
    ],
    "untils": [
      1428163200000,
      1443888000000,
      null
    ],
    "offsets": [
      -660,
      -600,
      -660
    ]
  },
  {
    "name": "Australia/Hobart",
    "abbrs": [
      "AEDT",
      "AEST",
      "AEDT"
    ],
    "untils": [
      1428163200000,
      1443888000000,
      null
    ],
    "offsets": [
      -660,
      -600,
      -660
    ]
  },
  {
    "name": "Australia/LHI",
    "abbrs": [
      "LHDT",
      "LHST",
      "LHDT"
    ],
    "untils": [
      1428159600000,
      1443886200000,
      null
    ],
    "offsets": [
      -660,
      -630,
      -660
    ]
  },
  {
    "name": "Australia/Lord_Howe",
    "abbrs": [
      "LHDT",
      "LHST",
      "LHDT"
    ],
    "untils": [
      1428159600000,
      1443886200000,
      null
    ],
    "offsets": [
      -660,
      -630,
      -660
    ]
  },
  {
    "name": "Australia/Melbourne",
    "abbrs": [
      "AEDT",
      "AEST",
      "AEDT"
    ],
    "untils": [
      1428163200000,
      1443888000000,
      null
    ],
    "offsets": [
      -660,
      -600,
      -660
    ]
  },
  {
    "name": "Australia/NSW",
    "abbrs": [
      "AEDT",
      "AEST",
      "AEDT"
    ],
    "untils": [
      1428163200000,
      1443888000000,
      null
    ],
    "offsets": [
      -660,
      -600,
      -660
    ]
  },
  {
    "name": "Australia/South",
    "abbrs": [
      "ACDT",
      "ACST",
      "ACDT"
    ],
    "untils": [
      1428165000000,
      1443889800000,
      null
    ],
    "offsets": [
      -630,
      -570,
      -630
    ]
  },
  {
    "name": "Australia/Sydney",
    "abbrs": [
      "AEDT",
      "AEST",
      "AEDT"
    ],
    "untils": [
      1428163200000,
      1443888000000,
      null
    ],
    "offsets": [
      -660,
      -600,
      -660
    ]
  },
  {
    "name": "Australia/Tasmania",
    "abbrs": [
      "AEDT",
      "AEST",
      "AEDT"
    ],
    "untils": [
      1428163200000,
      1443888000000,
      null
    ],
    "offsets": [
      -660,
      -600,
      -660
    ]
  },
  {
    "name": "Australia/Victoria",
    "abbrs": [
      "AEDT",
      "AEST",
      "AEDT"
    ],
    "untils": [
      1428163200000,
      1443888000000,
      null
    ],
    "offsets": [
      -660,
      -600,
      -660
    ]
  },
  {
    "name": "Australia/Yancowinna",
    "abbrs": [
      "ACDT",
      "ACST",
      "ACDT"
    ],
    "untils": [
      1428165000000,
      1443889800000,
      null
    ],
    "offsets": [
      -630,
      -570,
      -630
    ]
  },
  {
    "name": "Brazil/East",
    "abbrs": [
      "BRST",
      "BRT",
      "BRST"
    ],
    "untils": [
      1424570400000,
      1445137200000,
      null
    ],
    "offsets": [
      120,
      180,
      120
    ]
  },
  {
    "name": "CET",
    "abbrs": [
      "CET",
      "CEST",
      "CET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -60,
      -120,
      -60
    ]
  },
  {
    "name": "CST6CDT",
    "abbrs": [
      "CST",
      "CDT",
      "CST"
    ],
    "untils": [
      1425801600000,
      1446361200000,
      null
    ],
    "offsets": [
      360,
      300,
      360
    ]
  },
  {
    "name": "Canada/Atlantic",
    "abbrs": [
      "AST",
      "ADT",
      "AST"
    ],
    "untils": [
      1425794400000,
      1446354000000,
      null
    ],
    "offsets": [
      240,
      180,
      240
    ]
  },
  {
    "name": "Canada/Central",
    "abbrs": [
      "CST",
      "CDT",
      "CST"
    ],
    "untils": [
      1425801600000,
      1446361200000,
      null
    ],
    "offsets": [
      360,
      300,
      360
    ]
  },
  {
    "name": "Canada/Eastern",
    "abbrs": [
      "EST",
      "EDT",
      "EST"
    ],
    "untils": [
      1425798000000,
      1446357600000,
      null
    ],
    "offsets": [
      300,
      240,
      300
    ]
  },
  {
    "name": "Canada/Mountain",
    "abbrs": [
      "MST",
      "MDT",
      "MST"
    ],
    "untils": [
      1425805200000,
      1446364800000,
      null
    ],
    "offsets": [
      420,
      360,
      420
    ]
  },
  {
    "name": "Canada/Newfoundland",
    "abbrs": [
      "NST",
      "NDT",
      "NST"
    ],
    "untils": [
      1425792600000,
      1446352200000,
      null
    ],
    "offsets": [
      210,
      150,
      210
    ]
  },
  {
    "name": "Canada/Pacific",
    "abbrs": [
      "PST",
      "PDT",
      "PST"
    ],
    "untils": [
      1425808800000,
      1446368400000,
      null
    ],
    "offsets": [
      480,
      420,
      480
    ]
  },
  {
    "name": "Canada/Yukon",
    "abbrs": [
      "PST",
      "PDT",
      "PST"
    ],
    "untils": [
      1425808800000,
      1446368400000,
      null
    ],
    "offsets": [
      480,
      420,
      480
    ]
  },
  {
    "name": "Chile/Continental",
    "abbrs": [
      "CLST",
      "CLT"
    ],
    "untils": [
      1430017200000,
      null
    ],
    "offsets": [
      180,
      180
    ]
  },
  {
    "name": "Chile/EasterIsland",
    "abbrs": [
      "EASST",
      "EAST"
    ],
    "untils": [
      1430017200000,
      null
    ],
    "offsets": [
      300,
      300
    ]
  },
  {
    "name": "Cuba",
    "abbrs": [
      "CST",
      "CDT",
      "CST"
    ],
    "untils": [
      1425790800000,
      1446354000000,
      null
    ],
    "offsets": [
      300,
      240,
      300
    ]
  },
  {
    "name": "EET",
    "abbrs": [
      "EET",
      "EEST",
      "EET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -120,
      -180,
      -120
    ]
  },
  {
    "name": "EST5EDT",
    "abbrs": [
      "EST",
      "EDT",
      "EST"
    ],
    "untils": [
      1425798000000,
      1446357600000,
      null
    ],
    "offsets": [
      300,
      240,
      300
    ]
  },
  {
    "name": "Eire",
    "abbrs": [
      "GMT",
      "IST",
      "GMT"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      0,
      -60,
      0
    ]
  },
  {
    "name": "Europe/Amsterdam",
    "abbrs": [
      "CET",
      "CEST",
      "CET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -60,
      -120,
      -60
    ]
  },
  {
    "name": "Europe/Andorra",
    "abbrs": [
      "CET",
      "CEST",
      "CET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -60,
      -120,
      -60
    ]
  },
  {
    "name": "Europe/Athens",
    "abbrs": [
      "EET",
      "EEST",
      "EET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -120,
      -180,
      -120
    ]
  },
  {
    "name": "Europe/Belfast",
    "abbrs": [
      "GMT",
      "BST",
      "GMT"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      0,
      -60,
      0
    ]
  },
  {
    "name": "Europe/Belgrade",
    "abbrs": [
      "CET",
      "CEST",
      "CET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -60,
      -120,
      -60
    ]
  },
  {
    "name": "Europe/Berlin",
    "abbrs": [
      "CET",
      "CEST",
      "CET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -60,
      -120,
      -60
    ]
  },
  {
    "name": "Europe/Bratislava",
    "abbrs": [
      "CET",
      "CEST",
      "CET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -60,
      -120,
      -60
    ]
  },
  {
    "name": "Europe/Brussels",
    "abbrs": [
      "CET",
      "CEST",
      "CET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -60,
      -120,
      -60
    ]
  },
  {
    "name": "Europe/Bucharest",
    "abbrs": [
      "EET",
      "EEST",
      "EET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -120,
      -180,
      -120
    ]
  },
  {
    "name": "Europe/Budapest",
    "abbrs": [
      "CET",
      "CEST",
      "CET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -60,
      -120,
      -60
    ]
  },
  {
    "name": "Europe/Busingen",
    "abbrs": [
      "CET",
      "CEST",
      "CET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -60,
      -120,
      -60
    ]
  },
  {
    "name": "Europe/Chisinau",
    "abbrs": [
      "EET",
      "EEST",
      "EET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -120,
      -180,
      -120
    ]
  },
  {
    "name": "Europe/Copenhagen",
    "abbrs": [
      "CET",
      "CEST",
      "CET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -60,
      -120,
      -60
    ]
  },
  {
    "name": "Europe/Dublin",
    "abbrs": [
      "GMT",
      "IST",
      "GMT"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      0,
      -60,
      0
    ]
  },
  {
    "name": "Europe/Gibraltar",
    "abbrs": [
      "CET",
      "CEST",
      "CET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -60,
      -120,
      -60
    ]
  },
  {
    "name": "Europe/Guernsey",
    "abbrs": [
      "GMT",
      "BST",
      "GMT"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      0,
      -60,
      0
    ]
  },
  {
    "name": "Europe/Helsinki",
    "abbrs": [
      "EET",
      "EEST",
      "EET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -120,
      -180,
      -120
    ]
  },
  {
    "name": "Europe/Isle_of_Man",
    "abbrs": [
      "GMT",
      "BST",
      "GMT"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      0,
      -60,
      0
    ]
  },
  {
    "name": "Europe/Istanbul",
    "abbrs": [
      "EET",
      "EEST",
      "EET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -120,
      -180,
      -120
    ]
  },
  {
    "name": "Europe/Jersey",
    "abbrs": [
      "GMT",
      "BST",
      "GMT"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      0,
      -60,
      0
    ]
  },
  {
    "name": "Europe/Kiev",
    "abbrs": [
      "EET",
      "EEST",
      "EET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -120,
      -180,
      -120
    ]
  },
  {
    "name": "Europe/Lisbon",
    "abbrs": [
      "WET",
      "WEST",
      "WET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      0,
      -60,
      0
    ]
  },
  {
    "name": "Europe/Ljubljana",
    "abbrs": [
      "CET",
      "CEST",
      "CET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -60,
      -120,
      -60
    ]
  },
  {
    "name": "Europe/London",
    "abbrs": [
      "GMT",
      "BST",
      "GMT"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      0,
      -60,
      0
    ]
  },
  {
    "name": "Europe/Luxembourg",
    "abbrs": [
      "CET",
      "CEST",
      "CET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -60,
      -120,
      -60
    ]
  },
  {
    "name": "Europe/Madrid",
    "abbrs": [
      "CET",
      "CEST",
      "CET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -60,
      -120,
      -60
    ]
  },
  {
    "name": "Europe/Malta",
    "abbrs": [
      "CET",
      "CEST",
      "CET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -60,
      -120,
      -60
    ]
  },
  {
    "name": "Europe/Mariehamn",
    "abbrs": [
      "EET",
      "EEST",
      "EET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -120,
      -180,
      -120
    ]
  },
  {
    "name": "Europe/Monaco",
    "abbrs": [
      "CET",
      "CEST",
      "CET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -60,
      -120,
      -60
    ]
  },
  {
    "name": "Europe/Nicosia",
    "abbrs": [
      "EET",
      "EEST",
      "EET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -120,
      -180,
      -120
    ]
  },
  {
    "name": "Europe/Oslo",
    "abbrs": [
      "CET",
      "CEST",
      "CET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -60,
      -120,
      -60
    ]
  },
  {
    "name": "Europe/Paris",
    "abbrs": [
      "CET",
      "CEST",
      "CET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -60,
      -120,
      -60
    ]
  },
  {
    "name": "Europe/Podgorica",
    "abbrs": [
      "CET",
      "CEST",
      "CET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -60,
      -120,
      -60
    ]
  },
  {
    "name": "Europe/Prague",
    "abbrs": [
      "CET",
      "CEST",
      "CET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -60,
      -120,
      -60
    ]
  },
  {
    "name": "Europe/Riga",
    "abbrs": [
      "EET",
      "EEST",
      "EET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -120,
      -180,
      -120
    ]
  },
  {
    "name": "Europe/Rome",
    "abbrs": [
      "CET",
      "CEST",
      "CET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -60,
      -120,
      -60
    ]
  },
  {
    "name": "Europe/San_Marino",
    "abbrs": [
      "CET",
      "CEST",
      "CET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -60,
      -120,
      -60
    ]
  },
  {
    "name": "Europe/Sarajevo",
    "abbrs": [
      "CET",
      "CEST",
      "CET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -60,
      -120,
      -60
    ]
  },
  {
    "name": "Europe/Skopje",
    "abbrs": [
      "CET",
      "CEST",
      "CET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -60,
      -120,
      -60
    ]
  },
  {
    "name": "Europe/Sofia",
    "abbrs": [
      "EET",
      "EEST",
      "EET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -120,
      -180,
      -120
    ]
  },
  {
    "name": "Europe/Stockholm",
    "abbrs": [
      "CET",
      "CEST",
      "CET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -60,
      -120,
      -60
    ]
  },
  {
    "name": "Europe/Tallinn",
    "abbrs": [
      "EET",
      "EEST",
      "EET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -120,
      -180,
      -120
    ]
  },
  {
    "name": "Europe/Tirane",
    "abbrs": [
      "CET",
      "CEST",
      "CET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -60,
      -120,
      -60
    ]
  },
  {
    "name": "Europe/Tiraspol",
    "abbrs": [
      "EET",
      "EEST",
      "EET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -120,
      -180,
      -120
    ]
  },
  {
    "name": "Europe/Uzhgorod",
    "abbrs": [
      "EET",
      "EEST",
      "EET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -120,
      -180,
      -120
    ]
  },
  {
    "name": "Europe/Vaduz",
    "abbrs": [
      "CET",
      "CEST",
      "CET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -60,
      -120,
      -60
    ]
  },
  {
    "name": "Europe/Vatican",
    "abbrs": [
      "CET",
      "CEST",
      "CET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -60,
      -120,
      -60
    ]
  },
  {
    "name": "Europe/Vienna",
    "abbrs": [
      "CET",
      "CEST",
      "CET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -60,
      -120,
      -60
    ]
  },
  {
    "name": "Europe/Vilnius",
    "abbrs": [
      "EET",
      "EEST",
      "EET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -120,
      -180,
      -120
    ]
  },
  {
    "name": "Europe/Warsaw",
    "abbrs": [
      "CET",
      "CEST",
      "CET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -60,
      -120,
      -60
    ]
  },
  {
    "name": "Europe/Zagreb",
    "abbrs": [
      "CET",
      "CEST",
      "CET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -60,
      -120,
      -60
    ]
  },
  {
    "name": "Europe/Zaporozhye",
    "abbrs": [
      "EET",
      "EEST",
      "EET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -120,
      -180,
      -120
    ]
  },
  {
    "name": "Europe/Zurich",
    "abbrs": [
      "CET",
      "CEST",
      "CET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -60,
      -120,
      -60
    ]
  },
  {
    "name": "GB-Eire",
    "abbrs": [
      "GMT",
      "BST",
      "GMT"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      0,
      -60,
      0
    ]
  },
  {
    "name": "GB",
    "abbrs": [
      "GMT",
      "BST",
      "GMT"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      0,
      -60,
      0
    ]
  },
  {
    "name": "Iran",
    "abbrs": [
      "IRST",
      "IRDT",
      "IRST"
    ],
    "untils": [
      1426969800000,
      1442863800000,
      null
    ],
    "offsets": [
      -210,
      -270,
      -210
    ]
  },
  {
    "name": "Israel",
    "abbrs": [
      "IST",
      "IDT",
      "IST"
    ],
    "untils": [
      1427414400000,
      1445727600000,
      null
    ],
    "offsets": [
      -120,
      -180,
      -120
    ]
  },
  {
    "name": "MET",
    "abbrs": [
      "MET",
      "MEST",
      "MET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -60,
      -120,
      -60
    ]
  },
  {
    "name": "MST7MDT",
    "abbrs": [
      "MST",
      "MDT",
      "MST"
    ],
    "untils": [
      1425805200000,
      1446364800000,
      null
    ],
    "offsets": [
      420,
      360,
      420
    ]
  },
  {
    "name": "Mexico/BajaNorte",
    "abbrs": [
      "PST",
      "PDT",
      "PST"
    ],
    "untils": [
      1425808800000,
      1446368400000,
      null
    ],
    "offsets": [
      480,
      420,
      480
    ]
  },
  {
    "name": "Mexico/BajaSur",
    "abbrs": [
      "MST",
      "MDT",
      "MST"
    ],
    "untils": [
      1428224400000,
      1445760000000,
      null
    ],
    "offsets": [
      420,
      360,
      420
    ]
  },
  {
    "name": "Mexico/General",
    "abbrs": [
      "CST",
      "CDT",
      "CST"
    ],
    "untils": [
      1428220800000,
      1445756400000,
      null
    ],
    "offsets": [
      360,
      300,
      360
    ]
  },
  {
    "name": "NZ-CHAT",
    "abbrs": [
      "CHADT",
      "CHAST",
      "CHADT"
    ],
    "untils": [
      1428156000000,
      1443276000000,
      null
    ],
    "offsets": [
      -825,
      -765,
      -825
    ]
  },
  {
    "name": "NZ",
    "abbrs": [
      "NZDT",
      "NZST",
      "NZDT"
    ],
    "untils": [
      1428156000000,
      1443276000000,
      null
    ],
    "offsets": [
      -780,
      -720,
      -780
    ]
  },
  {
    "name": "Navajo",
    "abbrs": [
      "MST",
      "MDT",
      "MST"
    ],
    "untils": [
      1425805200000,
      1446364800000,
      null
    ],
    "offsets": [
      420,
      360,
      420
    ]
  },
  {
    "name": "PST8PDT",
    "abbrs": [
      "PST",
      "PDT",
      "PST"
    ],
    "untils": [
      1425808800000,
      1446368400000,
      null
    ],
    "offsets": [
      480,
      420,
      480
    ]
  },
  {
    "name": "Pacific/Apia",
    "abbrs": [
      "WSDT",
      "WSST",
      "WSDT"
    ],
    "untils": [
      1428156000000,
      1443276000000,
      null
    ],
    "offsets": [
      -840,
      -780,
      -840
    ]
  },
  {
    "name": "Pacific/Auckland",
    "abbrs": [
      "NZDT",
      "NZST",
      "NZDT"
    ],
    "untils": [
      1428156000000,
      1443276000000,
      null
    ],
    "offsets": [
      -780,
      -720,
      -780
    ]
  },
  {
    "name": "Pacific/Chatham",
    "abbrs": [
      "CHADT",
      "CHAST",
      "CHADT"
    ],
    "untils": [
      1428156000000,
      1443276000000,
      null
    ],
    "offsets": [
      -825,
      -765,
      -825
    ]
  },
  {
    "name": "Pacific/Easter",
    "abbrs": [
      "EASST",
      "EAST"
    ],
    "untils": [
      1430017200000,
      null
    ],
    "offsets": [
      300,
      300
    ]
  },
  {
    "name": "Pacific/Fiji",
    "abbrs": [
      "FJST",
      "FJT",
      "FJST"
    ],
    "untils": [
      1421503200000,
      1446300000000,
      null
    ],
    "offsets": [
      -780,
      -720,
      -780
    ]
  },
  {
    "name": "Poland",
    "abbrs": [
      "CET",
      "CEST",
      "CET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -60,
      -120,
      -60
    ]
  },
  {
    "name": "Portugal",
    "abbrs": [
      "WET",
      "WEST",
      "WET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      0,
      -60,
      0
    ]
  },
  {
    "name": "Turkey",
    "abbrs": [
      "EET",
      "EEST",
      "EET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      -120,
      -180,
      -120
    ]
  },
  {
    "name": "US/Alaska",
    "abbrs": [
      "AKST",
      "AKDT",
      "AKST"
    ],
    "untils": [
      1425812400000,
      1446372000000,
      null
    ],
    "offsets": [
      540,
      480,
      540
    ]
  },
  {
    "name": "US/Aleutian",
    "abbrs": [
      "HST",
      "HDT",
      "HST"
    ],
    "untils": [
      1425816000000,
      1446375600000,
      null
    ],
    "offsets": [
      600,
      540,
      600
    ]
  },
  {
    "name": "US/Central",
    "abbrs": [
      "CST",
      "CDT",
      "CST"
    ],
    "untils": [
      1425801600000,
      1446361200000,
      null
    ],
    "offsets": [
      360,
      300,
      360
    ]
  },
  {
    "name": "US/East-Indiana",
    "abbrs": [
      "EST",
      "EDT",
      "EST"
    ],
    "untils": [
      1425798000000,
      1446357600000,
      null
    ],
    "offsets": [
      300,
      240,
      300
    ]
  },
  {
    "name": "US/Eastern",
    "abbrs": [
      "EST",
      "EDT",
      "EST"
    ],
    "untils": [
      1425798000000,
      1446357600000,
      null
    ],
    "offsets": [
      300,
      240,
      300
    ]
  },
  {
    "name": "US/Indiana-Starke",
    "abbrs": [
      "CST",
      "CDT",
      "CST"
    ],
    "untils": [
      1425801600000,
      1446361200000,
      null
    ],
    "offsets": [
      360,
      300,
      360
    ]
  },
  {
    "name": "US/Michigan",
    "abbrs": [
      "EST",
      "EDT",
      "EST"
    ],
    "untils": [
      1425798000000,
      1446357600000,
      null
    ],
    "offsets": [
      300,
      240,
      300
    ]
  },
  {
    "name": "US/Mountain",
    "abbrs": [
      "MST",
      "MDT",
      "MST"
    ],
    "untils": [
      1425805200000,
      1446364800000,
      null
    ],
    "offsets": [
      420,
      360,
      420
    ]
  },
  {
    "name": "US/Pacific-New",
    "abbrs": [
      "PST",
      "PDT",
      "PST"
    ],
    "untils": [
      1425808800000,
      1446368400000,
      null
    ],
    "offsets": [
      480,
      420,
      480
    ]
  },
  {
    "name": "US/Pacific",
    "abbrs": [
      "PST",
      "PDT",
      "PST"
    ],
    "untils": [
      1425808800000,
      1446368400000,
      null
    ],
    "offsets": [
      480,
      420,
      480
    ]
  },
  {
    "name": "WET",
    "abbrs": [
      "WET",
      "WEST",
      "WET"
    ],
    "untils": [
      1427590800000,
      1445734800000,
      null
    ],
    "offsets": [
      0,
      -60,
      0
    ]
  }
];

},{}]},{},["./src/scripts/app.jsx"]);
